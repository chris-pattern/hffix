/*!
\file
\brief The hffix_fields.hpp file is generated by the fixspec/spec-parse-fields Haskell program from the FIX Protocol specification documents in the fixspec/ directory.

Do not edit this file, instead modify the fixspec/spec-parse-fields program and run it from the fixspec/spec-parse-fields directory as shown here. You must have The Haskell Tool Stack https://haskellstack.org installed.

    cd fixspec/spec-parse-fields && stack run > hffix_fields.hpp && mv hffix_fields.hpp ../../include/hffix_fields.hpp

Line comments for each field indicate the data type of the field for each version of the FIX spec in which the field appears.
*/

#ifndef HFFIX_FIELDS_HEADER
#define HFFIX_FIELDS_HEADER
namespace hffix {

#define HFFIX_FIX_FIELDS(X) \
X(Account,                                                               1) /*!< 1 (String FIX.2.7) Account mnemonic as agreed between buy and sell sides, e.g. broker and institution or investor/intermediary and fund manager.*/ \
X(AdvId,                                                                 2) /*!< 2 (String FIX.2.7) Unique identifier of advertisement message. \
 \
(Prior to FIX 4.1 this field was of type int)*/ \
X(AdvRefID,                                                              3) /*!< 3 (String FIX.2.7) Reference identifier used with CANCEL and REPLACE transaction types. \
 \
(Prior to FIX 4.1 this field was of type int)*/ \
X(AdvSide,                                                               4) /*!< 4 (char FIX.2.7) Broker's side of advertised trade*/ \
X(AdvTransType,                                                          5) /*!< 5 (String FIX.2.7) Identifies advertisement message transaction type*/ \
X(AvgPx,                                                                 6) /*!< 6 (Price FIX.2.7) Calculated average price of all fills on this order. \
 \
For Fixed Income trades AvgPx is always expressed as percent-of-par, regardless of the PriceType (423) of LastPx (31). I.e., AvgPx will contain an average of percent-of-par values (see LastParPx (669)) for issues traded in Yield, Spread or Discount.*/ \
X(BeginSeqNo,                                                            7) /*!< 7 (SeqNum FIX.2.7) Message sequence number of first message in range to be resent*/ \
X(BeginString,                                                           8) /*!< 8 (String FIX.2.7) Identifies beginning of new message and protocol version. ALWAYS FIRST FIELD IN MESSAGE. (Always unencrypted) \
 \
Valid values: \
 \
FIXT.1.1 \
 \
*/ \
X(BodyLength,                                                            9) /*!< 9 (Length FIX.2.7) Message length, in bytes, forward to the CheckSum field. ALWAYS SECOND FIELD IN MESSAGE. (Always unencrypted)*/ \
X(CheckSum,                                                              10) /*!< 10 (String FIX.2.7) Three byte, simple checksum (see Volume 2: "Checksum Calculation" for description). ALWAYS LAST FIELD IN MESSAGE; i.e. serves, with the trailing &lt;SOH&gt;, as the end-of-message delimiter. Always defined as three characters. (Always unencrypted)*/ \
X(ClOrdID,                                                               11) /*!< 11 (String FIX.2.7) Unique identifier for Order as assigned by the buy-side (institution, broker, intermediary etc.) (identified by SenderCompID (49) or OnBehalfOfCompID (5) as appropriate). Uniqueness must be guaranteed within a single trading day. Firms, particularly those which electronically submit multi-day orders, trade globally or throughout market close periods, should ensure uniqueness across days, for example by embedding a date within the ClOrdID field.*/ \
X(Commission,                                                            12) /*!< 12 (Amt FIX.2.7) Commission. Note if CommType (13) is percentage, Commission of 5% should be represented as .05.*/ \
X(CommType,                                                              13) /*!< 13 (char FIX.2.7) Specifies the basis or unit used to calculate the total commission based on the rate.*/ \
X(CumQty,                                                                14) /*!< 14 (Qty FIX.2.7) Total quantity (e.g. number of shares) filled. \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(Currency,                                                              15) /*!< 15 (Currency FIX.2.7) Identifies currency used for price. Absence of this field is interpreted as the default for the security. It is recommended that systems provide the currency value whenever possible. See "Appendix 6-A: Valid Currency Codes" for information on obtaining valid values.*/ \
X(EndSeqNo,                                                              16) /*!< 16 (SeqNum FIX.2.7) Message sequence number of last message in range to be resent. If request is for a single message BeginSeqNo (7) = EndSeqNo. If request is for all messages subsequent to a particular message, EndSeqNo = "0" (representing infinity).*/ \
X(ExecID,                                                                17) /*!< 17 (String FIX.2.7) Unique identifier of execution message as assigned by sell-side (broker, exchange, ECN) (will be 0 (zero) for ExecType (150)=I (Order Status)). \
 \
Uniqueness must be guaranteed within a single trading day or the life of a multi-day order. Firms which accept multi-day orders should consider embedding a date within the ExecID field to assure uniqueness across days. \
 \
(Prior to FIX 4.1 this field was of type int).*/ \
X(ExecInst,                                                              18) /*!< 18 (MultipleCharValue FIX.2.7) Instructions for order handling on exchange trading floor. If more than one instruction is applicable to an order, this field can contain multiple instructions separated by space. *** SOME VALUES HAVE BEEN REPLACED - See "Replaced Features and Supported Approach" *** (see Volume : "Glossary" for value definitions)*/ \
X(ExecRefID,                                                             19) /*!< 19 (String FIX.2.7) Reference identifier used with Trade, Trade Cancel and Trade Correct execution types. \
 \
(Prior to FIX 4.1 this field was of type int)*/ \
X(ExecTransType,                                                         20) /*!< 20 (char FIX.4.2) Identifies transaction type \
 \
 \
 \
Valid values: \
 \
   0 = New \
 \
   1 = Cancel \
 \
   2 = Correct \
 \
   3 = Status \
 \
*/ \
X(HandlInst,                                                             21) /*!< 21 (char FIX.2.7) Instructions for order handling on Broker trading floor*/ \
X(SecurityIDSource,                                                      22) /*!< 22 (String FIX.2.7) Identifies class or source of the SecurityID(48) value. */ \
X(IOIID,                                                                 23) /*!< 23 (String FIX.2.7) Unique identifier of IOI message. \
 \
(Prior to FIX 4.1 this field was of type int)*/ \
X(IOIQltyInd,                                                            25) /*!< 25 (char FIX.2.7) Relative quality of indication*/ \
X(IOIRefID,                                                              26) /*!< 26 (String FIX.2.7) Reference identifier used with CANCEL and REPLACE, transaction types. \
 \
(Prior to FIX 4.1 this field was of type int)*/ \
X(IOIQty,                                                                27) /*!< 27 (String FIX.2.7) Quantity (e.g. number of shares) in numeric form or relative size.*/ \
X(IOITransType,                                                          28) /*!< 28 (char FIX.2.7) Identifies IOI message transaction type*/ \
X(LastCapacity,                                                          29) /*!< 29 (char FIX.2.7) Broker capacity in order execution*/ \
X(LastMkt,                                                               30) /*!< 30 (Exchange FIX.2.7) Market of execution for last fill, or an indication of the market where an order was routed \
 \
Valid values: \
 \
See "Appendix 6-C"*/ \
X(LastPx,                                                                31) /*!< 31 (Price FIX.2.7) Price of this (last) fill.*/ \
X(LastQty,                                                               32) /*!< 32 (Qty FIX.2.7) Quantity (e.g. shares) bought/sold on this (last) fill. \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(NoLinesOfText,                                                         33) /*!< 33 (NumInGroup FIX.2.7) Identifies number of lines of text body*/ \
X(MsgSeqNum,                                                             34) /*!< 34 (SeqNum FIX.2.7) Integer message sequence number.*/ \
X(MsgType,                                                               35) /*!< 35 (String FIX.2.7) Defines message type ALWAYS THIRD FIELD IN MESSAGE. (Always unencrypted) \
 \
Note: A "U" as the first character in the MsgType field (i.e. U, U2, etc) indicates that the message format is privately defined between the sender and receiver. \
 \
*** Note the use of lower case letters ****/ \
X(NewSeqNo,                                                              36) /*!< 36 (SeqNum FIX.2.7) New sequence number*/ \
X(OrderID,                                                               37) /*!< 37 (String FIX.2.7) Unique identifier for Order as assigned by sell-side (broker, exchange, ECN). Uniqueness must be guaranteed within a single trading day. Firms which accept multi-day orders should consider embedding a date within the OrderID field to assure uniqueness across days.*/ \
X(OrderQty,                                                              38) /*!< 38 (Qty FIX.2.7) Quantity ordered. This represents the number of shares for equities or par, face or nominal value for FI instruments. \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(OrdStatus,                                                             39) /*!< 39 (char FIX.2.7) Identifies current status of order. *** SOME VALUES HAVE BEEN REPLACED - See "Replaced Features and Supported Approach" *** (see Volume : "Glossary" for value definitions)*/ \
X(OrdType,                                                               40) /*!< 40 (char FIX.2.7) Order type. *** SOME VALUES ARE NO LONGER USED - See "Deprecated (Phased-out) Features and Supported Approach" *** (see Volume : "Glossary" for value definitions)*/ \
X(OrigClOrdID,                                                           41) /*!< 41 (String FIX.2.7) ClOrdID (11) of the previous order (NOT the initial order of the day) as assigned by the institution, used to identify the previous order in cancel and cancel/replace requests.*/ \
X(OrigTime,                                                              42) /*!< 42 (UTCTimestamp FIX.2.7) Time of message origination (always expressed in UTC (Universal Time Coordinated, also known as "GMT"))*/ \
X(PossDupFlag,                                                           43) /*!< 43 (Boolean FIX.2.7) Indicates possible retransmission of message with this sequence number*/ \
X(Price,                                                                 44) /*!< 44 (Price FIX.2.7) Price per unit of quantity (e.g. per share)*/ \
X(RefSeqNum,                                                             45) /*!< 45 (SeqNum FIX.2.7) Reference message sequence number*/ \
X(SecurityID,                                                            48) /*!< 48 (String FIX.2.7) Security identifier value of SecurityIDSource (22) type (e.g. CUSIP, SEDOL, ISIN, etc). Requires SecurityIDSource.*/ \
X(SenderCompID,                                                          49) /*!< 49 (String FIX.2.7) Assigned value used to identify firm sending message.*/ \
X(SenderSubID,                                                           50) /*!< 50 (String FIX.2.7) Assigned value used to identify specific message originator (desk, trader, etc.)*/ \
X(SendingTime,                                                           52) /*!< 52 (UTCTimestamp FIX.2.7) Time of message transmission (always expressed in UTC (Universal Time Coordinated, also known as "GMT")*/ \
X(Quantity,                                                              53) /*!< 53 (Qty FIX.2.7) Overall/total quantity (e.g. number of shares) \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(Side,                                                                  54) /*!< 54 (char FIX.2.7) Side of order (see Volume : "Glossary" for value definitions)*/ \
X(Symbol,                                                                55) /*!< 55 (String FIX.2.7) Ticker symbol. Common, "human understood" representation of the security. SecurityID (48) value can be specified if no symbol exists (e.g. non-exchange traded Collective Investment Vehicles) \
 \
Use "[N/A]" for products which do not have a symbol.*/ \
X(TargetCompID,                                                          56) /*!< 56 (String FIX.2.7) Assigned value used to identify receiving firm.*/ \
X(TargetSubID,                                                           57) /*!< 57 (String FIX.2.7) Assigned value used to identify specific individual or unit intended to receive message. "ADMIN" reserved for administrative messages not intended for a specific user.*/ \
X(Text,                                                                  58) /*!< 58 (String FIX.2.7) Free format text string \
 \
(Note: this field does not have a specified maximum length)*/ \
X(TimeInForce,                                                           59) /*!< 59 (char FIX.2.7) Specifies how long the order remains in effect. Absence of this field is interpreted as DAY. NOTE not applicable to CIV Orders. (see Volume : "Glossary" for value definitions)*/ \
X(TransactTime,                                                          60) /*!< 60 (UTCTimestamp FIX.2.7) Timestamp when the business transaction represented by the message occurred.*/ \
X(Urgency,                                                               61) /*!< 61 (char FIX.2.7) Urgency flag*/ \
X(ValidUntilTime,                                                        62) /*!< 62 (UTCTimestamp FIX.2.7) Indicates expiration time of indication message (always expressed in UTC (Universal Time Coordinated, also known as "GMT")*/ \
X(SettlType,                                                             63) /*!< 63 (String FIX.2.7) Indicates order settlement period. If present, SettlDate (64) overrides this field. If both SettlType (63) and SettDate (64) are omitted, the default for SettlType (63) is 0 (Regular) \
 \
Regular is defined as the default settlement period for the particular security on the exchange of execution. \
 \
In Fixed Income the contents of this field may influence the instrument definition if the SecurityID (48) is ambiguous. In the US an active Treasury offering may be re-opened, and for a time one CUSIP will apply to both the current and "when-issued" securities. Supplying a value of "7" clarifies the instrument description; any other value or the absence of this field should cause the respondent to default to the active issue. \
 \
Additionally the following patterns may be uses as well as enum values \
 \
Dx = FX tenor expression for "days", e.g. "D5", where "x" is any integer &gt; 0 \
 \
Mx = FX tenor expression for "months", e.g. "M3", where "x" is any integer &gt; 0 \
 \
Wx = FX tenor expression for "weeks", e.g. "W13", where "x" is any integer &gt; 0 \
 \
Yx = FX tenor expression for "years", e.g. "Y1", where "x" is any integer &gt; 0 \
 \
Noted that for FX the tenors expressed using Dx, Mx, Wx, and Yx values do not denote business days, but calendar days.*/ \
X(SettlDate,                                                             64) /*!< 64 (LocalMktDate FIX.2.7) Specific date of trade settlement (SettlementDate) in YYYYMMDD format. \
 \
If present, this field overrides SettlType (63). This field is required if the value of SettlType (63) is 6 (Future) or 8 (Sellers Option). This field must be omitted if the value of SettlType (63) is 7 (When and If Issued) \
 \
(expressed in local time at place of settlement)*/ \
X(SymbolSfx,                                                             65) /*!< 65 (String FIX.2.7) Additional information about the security (e.g. preferred, warrants, etc.). Note also see SecurityType (167). \
 \
As defined in the NYSE Stock and bond Symbol Directory and in the AMEX Fitch Directory.*/ \
X(ListID,                                                                66) /*!< 66 (String FIX.2.7) Unique identifier for list as assigned by institution, used to associate multiple individual orders. Uniqueness must be guaranteed within a single trading day. Firms which generate multi-day orders should consider embedding a date within the ListID field to assure uniqueness across days.*/ \
X(ListSeqNo,                                                             67) /*!< 67 (int FIX.2.7) Sequence of individual order within list (i.e. ListSeqNo of TotNoOrders (68), 2 of 25, 3 of 25, . . . )*/ \
X(TotNoOrders,                                                           68) /*!< 68 (int FIX.2.7) Total number of list order entries across all messages. Should be the sum of all NoOrders (73) in each message that has repeating list order entries related to the same ListID (66). Used to support fragmentation. \
 \
(Prior to FIX 4.2 this field was named "ListNoOrds")*/ \
X(ListExecInst,                                                          69) /*!< 69 (String FIX.2.7) Free format text message containing list handling and execution instructions.*/ \
X(AllocID,                                                               70) /*!< 70 (String FIX.2.7) Unique identifier for allocation message. \
 \
(Prior to FIX 4.1 this field was of type int)*/ \
X(AllocTransType,                                                        71) /*!< 71 (char FIX.2.7) Identifies allocation transaction type *** SOME VALUES HAVE BEEN REPLACED - See "Replaced Features and Supported Approach" ****/ \
X(RefAllocID,                                                            72) /*!< 72 (String FIX.2.7) Reference identifier to be used with AllocTransType (71) = Replace or Cancel. \
 \
(Prior to FIX 4.1 this field was of type int)*/ \
X(NoOrders,                                                              73) /*!< 73 (NumInGroup FIX.2.7) Indicates number of orders to be combined for average pricing and allocation.*/ \
X(AvgPxPrecision,                                                        74) /*!< 74 (int FIX.2.7) Indicates number of decimal places to be used for average pricing. Absence of this field indicates that default precision arranged by the broker/institution is to be used.*/ \
X(TradeDate,                                                             75) /*!< 75 (LocalMktDate FIX.2.7) Indicates date of trading day. Absence of this field indicates current day (expressed in local time at place of trade).*/ \
X(PositionEffect,                                                        77) /*!< 77 (char FIX.2.7) Indicates whether the resulting position after a trade should be an opening position or closing position. Used for omnibus accounting - where accounts are held on a gross basis instead of being netted together.*/ \
X(NoAllocs,                                                              78) /*!< 78 (NumInGroup FIX.2.7) Number of repeating AllocAccount (79)/AllocPrice (366) entries.*/ \
X(AllocAccount,                                                          79) /*!< 79 (String FIX.2.7) Sub-account mnemonic*/ \
X(AllocQty,                                                              80) /*!< 80 (Qty FIX.2.7) Quantity to be allocated to specific sub-account \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(ProcessCode,                                                           81) /*!< 81 (char FIX.2.7) Processing code for sub-account. Absence of this field in AllocAccount (79) / AllocPrice (366) /AllocQty (80) / ProcessCode instance indicates regular trade.*/ \
X(NoRpts,                                                                82) /*!< 82 (int FIX.2.7) Total number of reports within series.*/ \
X(RptSeq,                                                                83) /*!< 83 (int FIX.2.7) Sequence number of message within report series. Used to carry reporting sequence number of the fill as represented on the Trade Report Side.*/ \
X(CxlQty,                                                                84) /*!< 84 (Qty FIX.2.7) Total quantity canceled for this order. \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(NoDlvyInst,                                                            85) /*!< 85 (NumInGroup FIX.2.7) Number of delivery instruction fields in repeating group. \
 \
Note this field was removed in FIX 4.1 and reinstated in FIX 4.4.*/ \
X(AllocStatus,                                                           87) /*!< 87 (int FIX.2.7) Identifies status of allocation.*/ \
X(AllocRejCode,                                                          88) /*!< 88 (int FIX.2.7) Identifies reason for rejection.*/ \
X(Signature,                                                             89) /*!< 89 (data FIX.2.7) Electronic signature*/ \
X(SecureDataLen,                                                         90) /*!< 90 (Length FIX.2.7) Length of encrypted message*/ \
X(SecureData,                                                            91) /*!< 91 (data FIX.2.7) Actual encrypted data stream*/ \
X(SignatureLength,                                                       93) /*!< 93 (Length FIX.2.7) Number of bytes in signature field*/ \
X(EmailType,                                                             94) /*!< 94 (char FIX.2.7) Email message type.*/ \
X(RawDataLength,                                                         95) /*!< 95 (Length FIX.2.7) Number of bytes in raw data field.*/ \
X(RawData,                                                               96) /*!< 96 (data FIX.2.7) Unformatted raw data, can include bitmaps, word processor documents, etc.*/ \
X(PossResend,                                                            97) /*!< 97 (Boolean FIX.2.7) Indicates that message may contain information that has been sent under another sequence number.*/ \
X(EncryptMethod,                                                         98) /*!< 98 (int FIX.2.7) Method of encryption.*/ \
X(StopPx,                                                                99) /*!< 99 (Price FIX.2.7) Price per unit of quantity (e.g. per share)*/ \
X(ExDestination,                                                         100) /*!< 100 (Exchange FIX.2.7) Execution destination as defined by institution when order is entered. \
 \
Valid values: \
 \
See "Appendix 6-C"*/ \
X(CxlRejReason,                                                          102) /*!< 102 (int FIX.2.7) Code to identify reason for cancel rejection.*/ \
X(OrdRejReason,                                                          103) /*!< 103 (int FIX.2.7) Code to identify reason for order rejection. Note: Values 3, 4, and 5 will be used when rejecting an order due to pre-allocation information errors.*/ \
X(IOIQualifier,                                                          104) /*!< 104 (char FIX.3.0) Code to qualify IOI use. (see Volume : "Glossary" for value definitions)*/ \
X(Issuer,                                                                106) /*!< 106 (String FIX.3.0) Name of security issuer (e.g. International Business Machines, GNMA). \
 \
see also Volume 7: "PRODUCT: FIXED INCOME - Euro Issuer Values"*/ \
X(SecurityDesc,                                                          107) /*!< 107 (String FIX.3.0) Can be used by the venue or one of the trading parties to provide a non-normative textual description for the financial instrument.*/ \
X(HeartBtInt,                                                            108) /*!< 108 (int FIX.3.0) Heartbeat interval (seconds)*/ \
X(MinQty,                                                                110) /*!< 110 (Qty FIX.3.0) Minimum quantity of an order to be executed. \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(MaxFloor,                                                              111) /*!< 111 (Qty FIX.3.0) The quantity to be displayed . Required for reserve orders. On orders specifies the qty to be displayed, on execution reports the currently displayed quantity.*/ \
X(TestReqID,                                                             112) /*!< 112 (String FIX.3.0) Identifier included in Test Request message to be returned in resulting Heartbeat*/ \
X(ReportToExch,                                                          113) /*!< 113 (Boolean FIX.3.0) Identifies party of trade responsible for exchange reporting.*/ \
X(LocateReqd,                                                            114) /*!< 114 (Boolean FIX.4.0) Indicates whether the broker is to locate the stock in conjunction with a short sell order.*/ \
X(OnBehalfOfCompID,                                                      115) /*!< 115 (String FIX.4.0) Assigned value used to identify firm originating message if the message was delivered by a third party i.e. the third party firm identifier would be delivered in the SenderCompID field and the firm originating the message in this field.*/ \
X(OnBehalfOfSubID,                                                       116) /*!< 116 (String FIX.4.0) Assigned value used to identify specific message originator (i.e. trader) if the message was delivered by a third party*/ \
X(QuoteID,                                                               117) /*!< 117 (String FIX.4.0) Unique identifier for quote*/ \
X(NetMoney,                                                              118) /*!< 118 (Amt FIX.4.0) Total amount due as the result of the transaction (e.g. for Buy order - principal + commission + fees) reported in currency of execution.*/ \
X(SettlCurrAmt,                                                          119) /*!< 119 (Amt FIX.4.0) Total amount due expressed in settlement currency (includes the effect of the forex transaction)*/ \
X(SettlCurrency,                                                         120) /*!< 120 (Currency FIX.4.0) Currency code of settlement denomination.*/ \
X(ForexReq,                                                              121) /*!< 121 (Boolean FIX.4.0) Indicates request for forex accommodation trade to be executed along with security transaction.*/ \
X(OrigSendingTime,                                                       122) /*!< 122 (UTCTimestamp FIX.4.0) Original time of message transmission (always expressed in UTC (Universal Time Coordinated, also known as "GMT") when transmitting orders as the result of a resend request.*/ \
X(GapFillFlag,                                                           123) /*!< 123 (Boolean FIX.4.0) Indicates that the Sequence Reset message is replacing administrative or application messages which will not be resent.*/ \
X(NoExecs,                                                               124) /*!< 124 (NumInGroup FIX.4.0) Number of executions or trades.*/ \
X(ExpireTime,                                                            126) /*!< 126 (UTCTimestamp FIX.4.0) Time/Date of order expiration (always expressed in UTC (Universal Time Coordinated, also known as "GMT") \
 \
 \
 \
The meaning of expiration is specific to the context where the field is used. \
 \
 \
 \
For orders, this is the expiration time of a Good Til Date TimeInForce. \
 \
 \
 \
For Quotes - this is the expiration of the quote. \
 \
 \
 \
Expiration time is provided across the quote message dialog to control the length of time of the overall quoting process. \
 \
 \
 \
For collateral requests, this is the time by which collateral must be assigned. \
 \
 \
 \
For collateral assignments, this is the time by which a response to the assignment is expected. \
 \
 \
 \
For credit/risk limit checks, this is the time when the reserved credit limit will expire for the requested transaction.*/ \
X(DKReason,                                                              127) /*!< 127 (char FIX.4.0) Reason for execution rejection.*/ \
X(DeliverToCompID,                                                       128) /*!< 128 (String FIX.4.0) Assigned value used to identify the firm targeted to receive the message if the message is delivered by a third party i.e. the third party firm identifier would be delivered in the TargetCompID (56) field and the ultimate receiver firm ID in this field.*/ \
X(DeliverToSubID,                                                        129) /*!< 129 (String FIX.4.0) Assigned value used to identify specific message recipient (i.e. trader) if the message is delivered by a third party*/ \
X(IOINaturalFlag,                                                        130) /*!< 130 (Boolean FIX.4.0) Indicates that IOI is the result of an existing agency order or a facilitation position resulting from an agency order, not from principal trading or order solicitation activity.*/ \
X(QuoteReqID,                                                            131) /*!< 131 (String FIX.4.0) Unique identifier for a QuoteRequest(35=R).*/ \
X(BidPx,                                                                 132) /*!< 132 (Price FIX.4.0) Bid price/rate*/ \
X(OfferPx,                                                               133) /*!< 133 (Price FIX.4.0) Offer price/rate*/ \
X(BidSize,                                                               134) /*!< 134 (Qty FIX.4.0) Quantity of bid \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(OfferSize,                                                             135) /*!< 135 (Qty FIX.4.0) Quantity of offer \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(NoMiscFees,                                                            136) /*!< 136 (NumInGroup FIX.4.0) Number of repeating groups of miscellaneous fees*/ \
X(MiscFeeAmt,                                                            137) /*!< 137 (Amt FIX.4.0) Miscellaneous fee value*/ \
X(MiscFeeCurr,                                                           138) /*!< 138 (Currency FIX.4.0) Currency of miscellaneous fee*/ \
X(MiscFeeType,                                                           139) /*!< 139 (String FIX.4.0) Indicates type of miscellaneous fee.*/ \
X(PrevClosePx,                                                           140) /*!< 140 (Price FIX.4.0) Previous closing price of security.*/ \
X(ResetSeqNumFlag,                                                       141) /*!< 141 (Boolean FIX.4.1) Indicates that both sides of the FIX session should reset sequence numbers.*/ \
X(SenderLocationID,                                                      142) /*!< 142 (String FIX.4.1) Assigned value used to identify specific message originator's location (i.e. geographic location and/or desk, trader)*/ \
X(TargetLocationID,                                                      143) /*!< 143 (String FIX.4.1) Assigned value used to identify specific message destination's location (i.e. geographic location and/or desk, trader)*/ \
X(OnBehalfOfLocationID,                                                  144) /*!< 144 (String FIX.4.1) Assigned value used to identify specific message originator's location (i.e. geographic location and/or desk, trader) if the message was delivered by a third party*/ \
X(DeliverToLocationID,                                                   145) /*!< 145 (String FIX.4.1) Assigned value used to identify specific message recipient's location (i.e. geographic location and/or desk, trader) if the message was delivered by a third party*/ \
X(NoRelatedSym,                                                          146) /*!< 146 (NumInGroup FIX.4.1) Specifies the number of repeating symbols specified.*/ \
X(Subject,                                                               147) /*!< 147 (String FIX.4.1) The subject of an Email message*/ \
X(Headline,                                                              148) /*!< 148 (String FIX.4.1) The headline of a News message*/ \
X(URLLink,                                                               149) /*!< 149 (String FIX.4.1) A URI (Uniform Resource Identifier) or URL (Uniform Resource Locator) link to additional information (i.e. http://www.XYZ.com/research.html) \
 \
See "Appendix 6-B FIX Fields Based Upon Other Standards"*/ \
X(ExecType,                                                              150) /*!< 150 (char FIX.4.1) Describes the specific ExecutionRpt (e.g. Pending Cancel) while OrdStatus(39) will always identify the current order status (e.g. Partially Filled).*/ \
X(LeavesQty,                                                             151) /*!< 151 (Qty FIX.4.1) Quantity open for further execution. If the OrdStatus (39) is Canceled, DoneForTheDay, Expired, Calculated, or Rejected (in which case the order is no longer active) then LeavesQty could be 0, otherwise LeavesQty = OrderQty (38) - CumQty (14). \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(CashOrderQty,                                                          152) /*!< 152 (Qty FIX.4.1) Specifies the approximate order quantity desired in total monetary units vs. as tradeable units (e.g. number of shares). The broker or fund manager (for CIV orders) would be responsible for converting and calculating a tradeable unit (e.g. share) quantity (OrderQty (38)) based upon this amount to be used for the actual order and subsequent messages.*/ \
X(AllocAvgPx,                                                            153) /*!< 153 (Price FIX.4.1) AvgPx (6) for a specific AllocAccount (79) \
 \
For Fixed Income this is always expressed as "percent of par" price type.*/ \
X(AllocNetMoney,                                                         154) /*!< 154 (Amt FIX.4.1) NetMoney (8) for a specific AllocAccount (79)*/ \
X(SettlCurrFxRate,                                                       155) /*!< 155 (float FIX.4.1) Foreign exchange rate used to compute SettlCurrAmt (9) from Currency (5) to SettlCurrency (20)*/ \
X(SettlCurrFxRateCalc,                                                   156) /*!< 156 (char FIX.4.1) Specifies whether or not SettlCurrFxRate (155) should be multiplied or divided.*/ \
X(NumDaysInterest,                                                       157) /*!< 157 (int FIX.4.1) Number of Days of Interest for convertible bonds and fixed income. Note value may be negative.*/ \
X(AccruedInterestRate,                                                   158) /*!< 158 (Percentage FIX.4.1) The amount the buyer compensates the seller for the portion of the next coupon interest payment the seller has earned but will not receive from the issuer because the issuer will send the next coupon payment to the buyer. Accrued Interest Rate is the annualized Accrued Interest amount divided by the purchase price of the bond.*/ \
X(AccruedInterestAmt,                                                    159) /*!< 159 (Amt FIX.4.1) Amount of Accrued Interest for convertible bonds and fixed income*/ \
X(SettlInstMode,                                                         160) /*!< 160 (char FIX.4.1) Indicates mode used for Settlement Instructions message. *** SOME VALUES HAVE BEEN REPLACED - See "Replaced Features and Supported Approach" ****/ \
X(AllocText,                                                             161) /*!< 161 (String FIX.4.1) Free format text related to a specific AllocAccount (79).*/ \
X(SettlInstID,                                                           162) /*!< 162 (String FIX.4.1) Unique identifier for Settlement Instruction.*/ \
X(SettlInstTransType,                                                    163) /*!< 163 (char FIX.4.1) Settlement Instructions message transaction type*/ \
X(EmailThreadID,                                                         164) /*!< 164 (String FIX.4.1) Unique identifier for an email thread (new and chain of replies)*/ \
X(SettlInstSource,                                                       165) /*!< 165 (char FIX.4.1) Indicates source of Settlement Instructions*/ \
X(SecurityType,                                                          167) /*!< 167 (String FIX.4.1) Indicates type of security. Security type enumerations are grouped by Product(460) field value. NOTE: Additional values may be used by mutual agreement of the counterparties.*/ \
X(EffectiveTime,                                                         168) /*!< 168 (UTCTimestamp FIX.4.1) Time the details within the message should take effect (always expressed in UTC (Universal Time Coordinated, also known as "GMT")*/ \
X(StandInstDbType,                                                       169) /*!< 169 (int FIX.4.1) Identifies the Standing Instruction database used*/ \
X(StandInstDbName,                                                       170) /*!< 170 (String FIX.4.1) Name of the Standing Instruction database represented with StandInstDbType (169) (i.e. the Global Custodian's name).*/ \
X(StandInstDbID,                                                         171) /*!< 171 (String FIX.4.1) Unique identifier used on the Standing Instructions database for the Standing Instructions to be referenced.*/ \
X(SettlDeliveryType,                                                     172) /*!< 172 (int FIX.4.1) Identifies type of settlement*/ \
X(BidSpotRate,                                                           188) /*!< 188 (Price FIX.4.1) Bid F/X spot rate.*/ \
X(BidForwardPoints,                                                      189) /*!< 189 (PriceOffset FIX.4.1) Bid F/X forward points added to spot rate. May be a negative value.*/ \
X(OfferSpotRate,                                                         190) /*!< 190 (Price FIX.4.1) Offer F/X spot rate.*/ \
X(OfferForwardPoints,                                                    191) /*!< 191 (PriceOffset FIX.4.1) Offer F/X forward points added to spot rate. May be a negative value.*/ \
X(OrderQty2,                                                             192) /*!< 192 (Qty FIX.4.1) OrderQty (38) of the future part of a F/X swap order.*/ \
X(SettlDate2,                                                            193) /*!< 193 (LocalMktDate FIX.4.1) SettDate (64) of the future part of a F/X swap order.*/ \
X(LastSpotRate,                                                          194) /*!< 194 (Price FIX.4.1) F/X spot rate.*/ \
X(LastForwardPoints,                                                     195) /*!< 195 (PriceOffset FIX.4.1) F/X forward points added to LastSpotRate (94). May be a negative value. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(AllocLinkID,                                                           196) /*!< 196 (String FIX.4.1) Can be used to link two different Allocation messages (each with unique AllocID (70)) together, i.e. for F/X "Netting" or "Swaps". Should be unique.*/ \
X(AllocLinkType,                                                         197) /*!< 197 (int FIX.4.1) Identifies the type of Allocation linkage when AllocLinkID (96) is used.*/ \
X(SecondaryOrderID,                                                      198) /*!< 198 (String FIX.4.1) Assigned by the party which accepts the order. Can be used to provide the OrderID (37) used by an exchange or executing system.*/ \
X(NoIOIQualifiers,                                                       199) /*!< 199 (NumInGroup FIX.4.1) Number of repeating groups of IOIQualifiers (04).*/ \
X(MaturityMonthYear,                                                     200) /*!< 200 (MonthYear FIX.4.1) Can be used with standardized derivatives vs. the MaturityDate (54) field.  Month and Year of the maturity (used for standardized futures and options). \
 \
Format: \
 \
YYYYMM (e.g. 199903) \
 \
YYYYMMDD (e.g. 20030323) \
 \
YYYYMMwN (e.g. 200303w) for week \
 \
A specific date or can be appended to the MaturityMonthYear. For instance, if multiple standard products exist that mature in the same Year and Month, but actually mature at a different time, a value can be appended, such as "w" or "w2" to indicate week  as opposed to week 2 expiration. Likewise, the date (0-3) can be appended to indicate a specific expiration (maturity date).*/ \
X(PutOrCall,                                                             201) /*!< 201 (int FIX.4.1) Indicates whether an option contract is a put, call, chooser or undetermined.*/ \
X(StrikePrice,                                                           202) /*!< 202 (Price FIX.4.1) Strike Price for an Option.*/ \
X(CoveredOrUncovered,                                                    203) /*!< 203 (int FIX.4.1) Used for derivative products, such as options*/ \
X(OptAttribute,                                                          206) /*!< 206 (char FIX.4.1) Provided to support versioning of option contracts as a result of corporate actions or events. Use of this field is defined by counterparty agreement or market conventions.*/ \
X(SecurityExchange,                                                      207) /*!< 207 (Exchange FIX.4.1) Market used to help identify a security. \
 \
Valid values: \
 \
See "Appendix 6-C"*/ \
X(NotifyBrokerOfCredit,                                                  208) /*!< 208 (Boolean FIX.4.1) Indicates whether or not details should be communicated to BrokerOfCredit (i.e. step-in broker).*/ \
X(AllocHandlInst,                                                        209) /*!< 209 (int FIX.4.1) Indicates how the receiver (i.e. third party) of Allocation message should handle/process the account details.*/ \
X(MaxShow,                                                               210) /*!< 210 (Qty FIX.4.1) Maximum quantity (e.g. number of shares) within an order to be shown to other customers (i.e. sent via an IOI). \
 \
(Prior to FIX 4.2 this field was of type int)*/ \
X(PegOffsetValue,                                                        211) /*!< 211 (float FIX.4.1) Amount (signed) added to the peg for a pegged order in the context of the PegOffsetType (836) \
 \
(Prior to FIX 4.4 this field was of type PriceOffset)*/ \
X(XmlDataLen,                                                            212) /*!< 212 (Length FIX.4.2) Length of the XmlData data block.*/ \
X(XmlData,                                                               213) /*!< 213 (data FIX.4.2) Actual XML data stream (e.g. FIXML). See approriate XML reference (e.g. FIXML). Note: may contain embedded SOH characters.*/ \
X(SettlInstRefID,                                                        214) /*!< 214 (String FIX.4.2) Reference identifier for the SettlInstID (162) with Cancel and Replace SettlInstTransType (163) transaction types.*/ \
X(NoRoutingIDs,                                                          215) /*!< 215 (NumInGroup FIX.4.2) Number of repeating groups of RoutingID (217) and RoutingType (216) values. \
 \
See Volume 3: "Pre-Trade Message Targeting/Routing"*/ \
X(RoutingType,                                                           216) /*!< 216 (int FIX.4.2) Indicates the type of RoutingID (217) specified.*/ \
X(RoutingID,                                                             217) /*!< 217 (String FIX.4.2) Assigned value used to identify a specific routing destination.*/ \
X(Spread,                                                                218) /*!< 218 (PriceOffset FIX.4.2) For Fixed Income. Either Swap Spread or Spread to Benchmark depending upon the order type. \
 \
Spread to Benchmark: Basis points relative to a benchmark. To be expressed as "count of basis points" (vs. an absolute value). E.g. High Grade Corporate Bonds may express price as basis points relative to benchmark (the BenchmarkCurveName (22) field). Note: Basis points can be negative. \
 \
Swap Spread: Target spread for a swap.*/ \
X(BenchmarkCurveCurrency,                                                220) /*!< 220 (Currency FIX.4.2) Identifies currency used for benchmark curve. See "Appendix 6-A: Valid Currency Codes" for information on obtaining valid values. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(BenchmarkCurveName,                                                    221) /*!< 221 (String FIX.4.2) Name of benchmark curve. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(BenchmarkCurvePoint,                                                   222) /*!< 222 (String FIX.4.2) Point on benchmark curve. Free form values: e.g. "Y", "7Y", "INTERPOLATED".  \
 \
Sample values:  \
 \
M = combination of a number between 1-12 and a "M" for month  \
 \
Y = combination of number between 1-100 and a "Y" for year}  \
 \
10Y-OLD = see above, then add "-OLD" when appropriate  \
 \
INTERPOLATED = the point is mathematically derived  \
 \
2/2031 5 3/8 = the point is stated via a combination of maturity month / year and coupon  \
 \
See Fixed Income-specific documentation at http://www.fixtradingcommunity.org for additional values.  \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)	*/ \
X(CouponRate,                                                            223) /*!< 223 (Percentage FIX.4.2) The rate of interest that, when multiplied by the principal, par value, or face value of a bond, provides the currency amount of the periodic interest payment. The coupon is always cited, along with maturity, in any quotation of a bond's price.*/ \
X(CouponPaymentDate,                                                     224) /*!< 224 (LocalMktDate FIX.4.2) Date interest is to be paid. Used in identifying Corporate Bond issues. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(IssueDate,                                                             225) /*!< 225 (LocalMktDate FIX.4.2) The date on which a bond or stock offering is issued. It may or may not be the same as the effective date ("Dated Date") or the date on which interest begins to accrue ("Interest Accrual Date") \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(RepurchaseTerm,                                                        226) /*!< 226 (int FIX.4.2) Number of business days before repurchase of a repo. (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(RepurchaseRate,                                                        227) /*!< 227 (Percentage FIX.4.2) Percent of par at which a Repo will be repaid. Represented as a percent, e.g. .9525 represents 95-/4 percent of par. (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(Factor,                                                                228) /*!< 228 (float FIX.4.2) For Fixed Income: Amorization Factor for deriving Current face from Original face for ABS or MBS securities, note the fraction may be greater than, equal to or less than . In TIPS securities this is the Inflation index. \
 \
Qty * Factor * Price = Gross Trade Amount \
 \
For Derivatives: Contract Value Factor by which price must be adjusted to determine the true nominal value of one futures/options contract. \
 \
(Qty * Price) * Factor = Nominal Value \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(TradeOriginationDate,                                                  229) /*!< 229 (LocalMktDate FIX.4.2) Used with Fixed Income for Muncipal New Issue Market. Agreement in principal between counter-parties prior to actual trade date. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(ExDate,                                                                230) /*!< 230 (LocalMktDate FIX.4.2) The date when a distribution of interest is deducted from a securities assets or set aside for payment to bondholders. On the ex-date, the securities price drops by the amount of the distribution (plus or minus any market activity). \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(ContractMultiplier,                                                    231) /*!< 231 (float FIX.4.2) Specifies the ratio or multiply factor to convert from "nominal" units (e.g. contracts) to total units (e.g. shares) (e.g. 1.0, 100, 1000, etc). Applicable For Fixed Income, Convertible Bonds, Derivatives, etc.*/ \
X(NoStipulations,                                                        232) /*!< 232 (NumInGroup FIX.4.2) Number of stipulation entries \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3).*/ \
X(StipulationType,                                                       233) /*!< 233 (String FIX.4.2) For Fixed Income. \
 \
Type of Stipulation. \
 \
Other types may be used by mutual agreement of the counterparties. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(StipulationValue,                                                      234) /*!< 234 (String FIX.4.2) For Fixed Income. Value of stipulation. \
 \
The expression can be an absolute single value or a combination of values and logical operators: \
 \
&lt; value \
 \
&gt; value \
 \
&lt;= value \
 \
&gt;= value \
 \
value \
 \
value - value2 \
 \
value OR value2 \
 \
value AND value2 \
 \
YES \
 \
NO \
 \
Bargain conditions recognized by the London Stock Exchange - to be used when StipulationType is "BGNCON". \
 \
CD = Special cum Dividend \
 \
XD = Special ex Dividend \
 \
CC = Special cum Coupon \
 \
XC = Special ex Coupon \
 \
CB = Special cum Bonus \
 \
XB = Special ex Bonus \
 \
CR = Special cum Rights \
 \
XR = Special ex Rights \
 \
CP = Special cum Capital Repayments \
 \
XP = Special ex Capital Repayments \
 \
CS = Cash Settlement \
 \
SP = Special Price \
 \
TR = Report for European Equity Market Securities in accordance with Chapter 8 of the Rules. \
 \
GD = Guaranteed Delivery \
 \
Values for StipulationType = "PXSOURCE": \
 \
BB GENERIC \
 \
BB FAIRVALUE \
 \
BROKERTEC \
 \
ESPEED \
 \
GOVPX \
 \
HILLIARD FARBER \
 \
ICAP \
 \
TRADEWEB \
 \
TULLETT LIBERTY \
 \
If a particular side of the market is wanted append /BID /OFFER or /MID. \
 \
plus appropriate combinations of the above and other expressions by mutual agreement of the counterparties. \
 \
Examples: "&gt;=60", ".25", "ORANGE OR CONTRACOSTA", etc. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(YieldType,                                                             235) /*!< 235 (String FIX.4.2) Type of yield. (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(Yield,                                                                 236) /*!< 236 (Percentage FIX.4.2) Yield percentage. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(TotalTakedown,                                                         237) /*!< 237 (Amt FIX.4.2) The price at which the securities are distributed to the different members of an underwriting group for the primary market in Municipals, total gross underwriter's spread. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(Concession,                                                            238) /*!< 238 (Amt FIX.4.2) Provides the reduction in price for the secondary market in Muncipals. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(RepoCollateralSecurityType,                                            239) /*!< 239 (String FIX.4.3) Identifies the collateral used in the transaction. \
 \
Valid values: see SecurityType (167) field (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(RedemptionDate,                                                        240) /*!< 240 (LocalMktDate FIX.4.2) Return of investor's principal in a security. Bond redemption can occur before maturity date.(Note tag # was reserved in FIX 4.1, added in FIX 4.3) (prior to FIX 4.4 field was of type UTCDate)*/ \
X(UnderlyingCouponPaymentDate,                                           241) /*!< 241 (LocalMktDate FIX.4.2) Underlying security's CouponPaymentDate. \
 \
See CouponPaymentDate (224) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(UnderlyingIssueDate,                                                   242) /*!< 242 (LocalMktDate FIX.4.2) Underlying security's IssueDate. \
 \
See IssueDate (225) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(UnderlyingRepoCollateralSecurityType,                                  243) /*!< 243 (String FIX.4.3) Underlying security's RepoCollateralSecurityType. See RepoCollateralSecurityType (239) field for description.(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(UnderlyingRepurchaseTerm,                                              244) /*!< 244 (int FIX.4.2) Underlying security's RepurchaseTerm. See RepurchaseTerm (226) field for description (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(UnderlyingRepurchaseRate,                                              245) /*!< 245 (Percentage FIX.4.2) Underlying security's RepurchaseRate. See RepurchaseRate (227) field for description (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(UnderlyingFactor,                                                      246) /*!< 246 (float FIX.4.2) Underlying security's Factor. \
 \
See Factor (228) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(UnderlyingRedemptionDate,                                              247) /*!< 247 (LocalMktDate FIX.4.2) Underlying security's RedemptionDate. See RedemptionDate (240) field for description (Note tag # was reserved in FIX 4.1, added in FIX 4.3) (prior to FIX 4.4 field was of type UTCDate)*/ \
X(LegCouponPaymentDate,                                                  248) /*!< 248 (LocalMktDate FIX.4.2) Multileg instrument's individual leg security's CouponPaymentDate. \
 \
See CouponPaymentDate (224) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(LegIssueDate,                                                          249) /*!< 249 (LocalMktDate FIX.4.2) Multileg instrument's individual leg security's IssueDate. \
 \
See IssueDate (225) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(LegRepoCollateralSecurityType,                                         250) /*!< 250 (String FIX.4.3) Multileg instrument's individual leg security's RepoCollateralSecurityType. See RepoCollateralSecurityType (239) field for description (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(LegRepurchaseTerm,                                                     251) /*!< 251 (int FIX.4.2) Multileg instrument's individual leg security's RepurchaseTerm. See RepurchaseTerm (226) field for description (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(LegRepurchaseRate,                                                     252) /*!< 252 (Percentage FIX.4.2) Multileg instrument's individual leg security's RepurchaseRate. See RepurchaseRate (227) field for description (Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(LegFactor,                                                             253) /*!< 253 (float FIX.4.2) Multileg instrument's individual leg security's Factor. \
 \
See Factor (228) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(LegRedemptionDate,                                                     254) /*!< 254 (LocalMktDate FIX.4.2) Multileg instrument's individual leg security's RedemptionDate. See RedemptionDate (240) field for description (Note tag # was reserved in FIX 4.1, added in FIX 4.3) (prior to FIX 4.4 field was of type UTCDate)*/ \
X(CreditRating,                                                          255) /*!< 255 (String FIX.4.2) An evaluation of a company's ability to repay obligations or its likelihood of not defaulting. These evaluation are provided by Credit Rating Agencies, i.e. S&P, Moody's. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(UnderlyingCreditRating,                                                256) /*!< 256 (String FIX.4.2) Underlying security's CreditRating. \
 \
See CreditRating (255) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(LegCreditRating,                                                       257) /*!< 257 (String FIX.4.2) Multileg instrument's individual leg security's CreditRating. \
 \
See CreditRating (255) field for description \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(TradedFlatSwitch,                                                      258) /*!< 258 (Boolean FIX.4.2) Driver and part of trade in the event that the Security Master file was wrong at the point of entry(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(BasisFeatureDate,                                                      259) /*!< 259 (LocalMktDate FIX.4.2) BasisFeatureDate allows requesting firms within fixed income the ability to request an alternative yield-to-worst, -maturity, -extended or other call. This flows through the confirm process. \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3) \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(BasisFeaturePrice,                                                     260) /*!< 260 (Price FIX.4.2) Price for BasisFeatureDate. \
 \
See BasisFeatureDate (259) \
 \
(Note tag # was reserved in FIX 4.1, added in FIX 4.3)*/ \
X(MDReqID,                                                               262) /*!< 262 (String FIX.4.2) Unique identifier for Market Data Request*/ \
X(SubscriptionRequestType,                                               263) /*!< 263 (char FIX.4.2) Subscription Request Type*/ \
X(MarketDepth,                                                           264) /*!< 264 (int FIX.4.2) Depth of market for Book Snapshot / Incremental updates \
 \
0 - full book depth \
 \
1 - top of book \
 \
2 and above - book depth (number of levels)*/ \
X(MDUpdateType,                                                          265) /*!< 265 (int FIX.4.2) Specifies the type of Market Data update.*/ \
X(AggregatedBook,                                                        266) /*!< 266 (Boolean FIX.4.2) Specifies whether or not book entries should be aggregated. (Not specified) = broker option*/ \
X(NoMDEntryTypes,                                                        267) /*!< 267 (NumInGroup FIX.4.2) Number of MDEntryType (269) fields requested.*/ \
X(NoMDEntries,                                                           268) /*!< 268 (NumInGroup FIX.4.2) Number of entries in Market Data message.*/ \
X(MDEntryType,                                                           269) /*!< 269 (char FIX.4.2) Type of market data entry.*/ \
X(MDEntryPx,                                                             270) /*!< 270 (Price FIX.4.2) Price of the Market Data Entry.*/ \
X(MDEntrySize,                                                           271) /*!< 271 (Qty FIX.4.2) Quantity or volume represented by the Market Data Entry.*/ \
X(MDEntryDate,                                                           272) /*!< 272 (UTCDateOnly FIX.4.2) Date of Market Data Entry. \
 \
(prior to FIX 4.4 field was of type UTCDate)*/ \
X(MDEntryTime,                                                           273) /*!< 273 (UTCTimeOnly FIX.4.2) Time of Market Data Entry.*/ \
X(TickDirection,                                                         274) /*!< 274 (char FIX.4.2) Direction of the "tick".*/ \
X(MDMkt,                                                                 275) /*!< 275 (Exchange FIX.4.2) Market posting quote / trade. \
 \
Valid values: \
 \
See "Appendix 6-C"*/ \
X(QuoteCondition,                                                        276) /*!< 276 (MultipleStringValue FIX.4.2) Space-delimited list of conditions describing a quote.*/ \
X(TradeCondition,                                                        277) /*!< 277 (MultipleStringValue FIX.4.2) Type of market data entry.*/ \
X(MDEntryID,                                                             278) /*!< 278 (String FIX.4.2) Unique Market Data Entry identifier.*/ \
X(MDUpdateAction,                                                        279) /*!< 279 (char FIX.4.2) Type of Market Data update action.*/ \
X(MDEntryRefID,                                                          280) /*!< 280 (String FIX.4.2) Refers to a previous MDEntryID (278).*/ \
X(MDReqRejReason,                                                        281) /*!< 281 (char FIX.4.2) Reason for the rejection of a Market Data request.*/ \
X(MDEntryOriginator,                                                     282) /*!< 282 (String FIX.4.2) Originator of a Market Data Entry*/ \
X(LocationID,                                                            283) /*!< 283 (String FIX.4.2) Identification of a Market Maker's location*/ \
X(DeskID,                                                                284) /*!< 284 (String FIX.4.2) Identification of a Market Maker's desk*/ \
X(DeleteReason,                                                          285) /*!< 285 (char FIX.4.2) Reason for deletion.*/ \
X(OpenCloseSettlFlag,                                                    286) /*!< 286 (MultipleCharValue FIX.4.2) Flag that identifies a market data entry. (Prior to FIX 4.3 this field was of type char)*/ \
X(SellerDays,                                                            287) /*!< 287 (int FIX.4.2) Specifies the number of days that may elapse before delivery of the security*/ \
X(MDEntryBuyer,                                                          288) /*!< 288 (String FIX.4.2) Buying party in a trade*/ \
X(MDEntrySeller,                                                         289) /*!< 289 (String FIX.4.2) Selling party in a trade*/ \
X(MDEntryPositionNo,                                                     290) /*!< 290 (int FIX.4.2) Display position of a bid or offer, numbered from most competitive to least competitive, per market side, beginning with .*/ \
X(FinancialStatus,                                                       291) /*!< 291 (MultipleCharValue FIX.4.2) Identifies a firm's or a security's financial status*/ \
X(CorporateAction,                                                       292) /*!< 292 (MultipleCharValue FIX.4.2) Identifies the type of Corporate Action.*/ \
X(DefBidSize,                                                            293) /*!< 293 (Qty FIX.4.2) Default Bid Size.*/ \
X(DefOfferSize,                                                          294) /*!< 294 (Qty FIX.4.2) Default Offer Size.*/ \
X(NoQuoteEntries,                                                        295) /*!< 295 (NumInGroup FIX.4.2) The number of quote entries for a QuoteSet.*/ \
X(NoQuoteSets,                                                           296) /*!< 296 (NumInGroup FIX.4.2) The number of sets of quotes in the message.*/ \
X(QuoteStatus,                                                           297) /*!< 297 (int FIX.4.2) Identifies the status of the quote acknowledgement.*/ \
X(QuoteCancelType,                                                       298) /*!< 298 (int FIX.4.2) Identifies the type of quote cancel.*/ \
X(QuoteEntryID,                                                          299) /*!< 299 (String FIX.4.2) Unique identifier for a quote. The QuoteEntryID stays with the quote as a static identifier even if the quote is updated.*/ \
X(QuoteRejectReason,                                                     300) /*!< 300 (int FIX.4.2) Reason Quote was rejected:*/ \
X(QuoteResponseLevel,                                                    301) /*!< 301 (int FIX.4.2) Level of Response requested from receiver of quote messages. A default value should be bilaterally agreed.*/ \
X(QuoteSetID,                                                            302) /*!< 302 (String FIX.4.2) Unique id for the Quote Set.*/ \
X(QuoteRequestType,                                                      303) /*!< 303 (int FIX.4.2) Indicates the type of Quote Request being generated*/ \
X(TotNoQuoteEntries,                                                     304) /*!< 304 (int FIX.4.2) Total number of quotes for the quote set.*/ \
X(UnderlyingSecurityIDSource,                                            305) /*!< 305 (String FIX.4.2) Underlying security's SecurityIDSource. \
 \
Valid values: see SecurityIDSource (22) field*/ \
X(UnderlyingIssuer,                                                      306) /*!< 306 (String FIX.4.2) Underlying security's Issuer. \
 \
See Issuer (06) field for description*/ \
X(UnderlyingSecurityDesc,                                                307) /*!< 307 (String FIX.4.2) Description of the underlying security. \
 \
Can be used by the venue or one of the trading parties to provide an optional non-normative textual description of the financial instrument. \
 \
*/ \
X(UnderlyingSecurityExchange,                                            308) /*!< 308 (Exchange FIX.4.2) Underlying security's SecurityExchange. Can be used to identify the underlying security. \
 \
Valid values: see SecurityExchange (207)*/ \
X(UnderlyingSecurityID,                                                  309) /*!< 309 (String FIX.4.2) Underlying security's SecurityID. \
 \
See SecurityID (48) field for description*/ \
X(UnderlyingSecurityType,                                                310) /*!< 310 (String FIX.4.2) Underlying security's SecurityType. \
 \
Valid values: see SecurityType (167) field \
 \
(see below for details concerning this fields use in conjunction with SecurityType=REPO) \
 \
The following applies when used in conjunction with SecurityType=REPO \
 \
Represents the general or specific type of security that underlies a financing agreement \
 \
Valid values for SecurityType=REPO: \
 \
If bonds of a particular issuer or country are wanted in an Order or are in the basket of an Execution and the SecurityType is not granular enough, include the UnderlyingIssuer (306), UnderlyingCountryOfIssue (592), UnderlyingProgram, UnderlyingRegType and/or &lt; UnderlyingStipulations &gt; block e.g.:*/ \
X(UnderlyingSymbol,                                                      311) /*!< 311 (String FIX.4.2) Underlying security's Symbol. \
 \
See Symbol (55) field for description*/ \
X(UnderlyingSymbolSfx,                                                   312) /*!< 312 (String FIX.4.2) Underlying security's SymbolSfx. \
 \
See SymbolSfx (65) field for description*/ \
X(UnderlyingMaturityMonthYear,                                           313) /*!< 313 (MonthYear FIX.4.2) Underlying security's MaturityMonthYear. Can be used with standardized derivatives vs. the UnderlyingMaturityDate (542) field. \
 \
See MaturityMonthYear (200) field for description*/ \
X(UnderlyingPutOrCall,                                                   315) /*!< 315 (int FIX.4.2) Indicates whether an underlying option contract is a put, call, chooser or undetermined.*/ \
X(UnderlyingStrikePrice,                                                 316) /*!< 316 (Price FIX.4.2) Underlying security's StrikePrice. \
 \
See StrikePrice (202) field for description*/ \
X(UnderlyingOptAttribute,                                                317) /*!< 317 (char FIX.4.2) Underlying security's OptAttribute. \
 \
See OptAttribute (206) field for description*/ \
X(UnderlyingCurrency,                                                    318) /*!< 318 (Currency FIX.4.2) Underlying security's Currency. \
 \
See Currency (5) field for description and valid values*/ \
X(SecurityReqID,                                                         320) /*!< 320 (String FIX.4.2) Unique ID of a Security Definition Request.*/ \
X(SecurityRequestType,                                                   321) /*!< 321 (int FIX.4.2) Type of Security Definition Request.*/ \
X(SecurityResponseID,                                                    322) /*!< 322 (String FIX.4.2) Unique ID of a Security Definition message.*/ \
X(SecurityResponseType,                                                  323) /*!< 323 (int FIX.4.2) Type of Security Definition message response.*/ \
X(SecurityStatusReqID,                                                   324) /*!< 324 (String FIX.4.2) Unique ID of a Security Status Request or a Security Mass Status Request message.*/ \
X(UnsolicitedIndicator,                                                  325) /*!< 325 (Boolean FIX.4.2) Indicates whether or not message is being sent as a result of a subscription request or not.*/ \
X(SecurityTradingStatus,                                                 326) /*!< 326 (int FIX.4.2) Identifies the trading status applicable to the transaction.*/ \
X(HaltReason,                                                            327) /*!< 327 (int FIX.4.2) Denotes the reason for the Opening Delay or Trading Halt.*/ \
X(InViewOfCommon,                                                        328) /*!< 328 (Boolean FIX.4.2) Indicates whether or not the halt was due to Common Stock trading being halted.*/ \
X(DueToRelated,                                                          329) /*!< 329 (Boolean FIX.4.2) Indicates whether or not the halt was due to the Related Security being halted.*/ \
X(BuyVolume,                                                             330) /*!< 330 (Qty FIX.4.2) Quantity bought.*/ \
X(SellVolume,                                                            331) /*!< 331 (Qty FIX.4.2) Quantity sold.*/ \
X(HighPx,                                                                332) /*!< 332 (Price FIX.4.2) Represents an indication of the high end of the price range for a security prior to the open or reopen*/ \
X(LowPx,                                                                 333) /*!< 333 (Price FIX.4.2) Represents an indication of the low end of the price range for a security prior to the open or reopen*/ \
X(Adjustment,                                                            334) /*!< 334 (int FIX.4.2) Identifies the type of adjustment.*/ \
X(TradSesReqID,                                                          335) /*!< 335 (String FIX.4.2) Unique ID of a Trading Session Status message.*/ \
X(TradingSessionID,                                                      336) /*!< 336 (String FIX.4.2) Identifier for a trading session. \
 \
A trading session spans an extended period of time that can also be expressed informally in terms of the trading day. Usage is determined by market or counterparties. \
 \
To specify good for session where session spans more than one calendar day, use TimeInForce = 0 (Day) in conjunction with TradingSessionID(336). \
 \
Bilaterally agreed values of data type "String" that start with a character can be used for backward compatibility.*/ \
X(ContraTrader,                                                          337) /*!< 337 (String FIX.4.2) Identifies the trader (e.g. "badge number") of the ContraBroker.*/ \
X(TradSesMethod,                                                         338) /*!< 338 (int FIX.4.2) Method of trading*/ \
X(TradSesMode,                                                           339) /*!< 339 (int FIX.4.2) Trading Session Mode*/ \
X(TradSesStatus,                                                         340) /*!< 340 (int FIX.4.2) State of the trading session.*/ \
X(TradSesStartTime,                                                      341) /*!< 341 (UTCTimestamp FIX.4.2) Starting time of the trading session*/ \
X(TradSesOpenTime,                                                       342) /*!< 342 (UTCTimestamp FIX.4.2) Time of the opening of the trading session*/ \
X(TradSesPreCloseTime,                                                   343) /*!< 343 (UTCTimestamp FIX.4.2) Time of the pre-closed of the trading session*/ \
X(TradSesCloseTime,                                                      344) /*!< 344 (UTCTimestamp FIX.4.2) Closing time of the trading session*/ \
X(TradSesEndTime,                                                        345) /*!< 345 (UTCTimestamp FIX.4.2) End time of the trading session*/ \
X(NumberOfOrders,                                                        346) /*!< 346 (int FIX.4.2) Number of orders in the market.*/ \
X(MessageEncoding,                                                       347) /*!< 347 (String FIX.4.2) Type of message encoding (non-ASCII (non-English) characters) used in a message's "Encoded" fields.*/ \
X(EncodedIssuerLen,                                                      348) /*!< 348 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedIssuer (349) field.*/ \
X(EncodedIssuer,                                                         349) /*!< 349 (data FIX.4.2) Encoded (non-ASCII characters) representation of the Issuer field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the Issuer field.*/ \
X(EncodedSecurityDescLen,                                                350) /*!< 350 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedSecurityDesc (351) field.*/ \
X(EncodedSecurityDesc,                                                   351) /*!< 351 (data FIX.4.2) Encoded (non-ASCII characters) representation of the SecurityDesc (107) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the SecurityDesc field.*/ \
X(EncodedListExecInstLen,                                                352) /*!< 352 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedListExecInst (353) field.*/ \
X(EncodedListExecInst,                                                   353) /*!< 353 (data FIX.4.2) Encoded (non-ASCII characters) representation of the ListExecInst (69) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the ListExecInst field.*/ \
X(EncodedTextLen,                                                        354) /*!< 354 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedText (355) field.*/ \
X(EncodedText,                                                           355) /*!< 355 (data FIX.4.2) Encoded (non-ASCII characters) representation of the Text (58) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the Text(58) field.*/ \
X(EncodedSubjectLen,                                                     356) /*!< 356 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedSubject (357) field.*/ \
X(EncodedSubject,                                                        357) /*!< 357 (data FIX.4.2) Encoded (non-ASCII characters) representation of the Subject (147) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the Subject field.*/ \
X(EncodedHeadlineLen,                                                    358) /*!< 358 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedHeadline (359) field.*/ \
X(EncodedHeadline,                                                       359) /*!< 359 (data FIX.4.2) Encoded (non-ASCII characters) representation of the Headline (148) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the Headline field.*/ \
X(EncodedAllocTextLen,                                                   360) /*!< 360 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedAllocText (361) field.*/ \
X(EncodedAllocText,                                                      361) /*!< 361 (data FIX.4.2) Encoded (non-ASCII characters) representation of the AllocText (161) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the AllocText field.*/ \
X(EncodedUnderlyingIssuerLen,                                            362) /*!< 362 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingIssuer (363) field.*/ \
X(EncodedUnderlyingIssuer,                                               363) /*!< 363 (data FIX.4.2) Encoded (non-ASCII characters) representation of the UnderlyingIssuer (306) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingIssuer field.*/ \
X(EncodedUnderlyingSecurityDescLen,                                      364) /*!< 364 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingSecurityDesc (365) field.*/ \
X(EncodedUnderlyingSecurityDesc,                                         365) /*!< 365 (data FIX.4.2) Encoded (non-ASCII characters) representation of the UnderlyingSecurityDesc (307) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingSecurityeDesc field.*/ \
X(AllocPrice,                                                            366) /*!< 366 (Price FIX.4.2) Executed price for an AllocAccount (79) entry used when using "executed price" vs. "average price" allocations (e.g. Japan).*/ \
X(QuoteSetValidUntilTime,                                                367) /*!< 367 (UTCTimestamp FIX.4.2) Indicates expiration time of this particular QuoteSet (always expressed in UTC (Universal Time Coordinated, also known as "GMT")*/ \
X(QuoteEntryRejectReason,                                                368) /*!< 368 (int FIX.4.2) Reason Quote Entry was rejected:*/ \
X(LastMsgSeqNumProcessed,                                                369) /*!< 369 (SeqNum FIX.4.2) The last MsgSeqNum (34) value received by the FIX engine and processed by downstream application, such as trading engine or order routing system. Can be specified on every message sent. Useful for detecting a backlog with a counterparty.*/ \
X(RefTagID,                                                              371) /*!< 371 (int FIX.4.2) The tag number of the FIX field being referenced.*/ \
X(RefMsgType,                                                            372) /*!< 372 (String FIX.4.2) The MsgType (35) of the FIX message being referenced.*/ \
X(SessionRejectReason,                                                   373) /*!< 373 (int FIX.4.2) Code to identify reason for a session-level Reject message.*/ \
X(BidRequestTransType,                                                   374) /*!< 374 (char FIX.4.2) Identifies the Bid Request message type.*/ \
X(ContraBroker,                                                          375) /*!< 375 (String FIX.4.2) Identifies contra broker. Standard NASD market-maker mnemonic is preferred.*/ \
X(ComplianceID,                                                          376) /*!< 376 (String FIX.4.2) ID used to represent this transaction for compliance purposes (e.g. OATS reporting).*/ \
X(SolicitedFlag,                                                         377) /*!< 377 (Boolean FIX.4.2) Indicates whether or not the order was solicited.*/ \
X(ExecRestatementReason,                                                 378) /*!< 378 (int FIX.4.2) The reason for restatement when an ExecutionReport(35=8) or TradeCaptureReport(35=AE) message is sent with ExecType(150) = D (Restated) or used when communicating an unsolicited cancel.*/ \
X(BusinessRejectRefID,                                                   379) /*!< 379 (String FIX.4.2) The value of the business-level "ID" field on the message being referenced.*/ \
X(BusinessRejectReason,                                                  380) /*!< 380 (int FIX.4.2) Code to identify reason for a Business Message Reject message.*/ \
X(GrossTradeAmt,                                                         381) /*!< 381 (Amt FIX.4.2) Total amount traded (i.e. quantity * price) expressed in units of currency. For FX Futures this is used to express the notional value of a fill when quantity fields are expressed in terms of contract size (i.e. quantity * price * contract size).*/ \
X(NoContraBrokers,                                                       382) /*!< 382 (NumInGroup FIX.4.2) The number of ContraBroker (375) entries.*/ \
X(MaxMessageSize,                                                        383) /*!< 383 (Length FIX.4.2) Maximum number of bytes supported for a single message.*/ \
X(NoMsgTypes,                                                            384) /*!< 384 (NumInGroup FIX.4.2) Number of MsgTypes (35) in repeating group.*/ \
X(MsgDirection,                                                          385) /*!< 385 (char FIX.4.2) Specifies the direction of the messsage.*/ \
X(NoTradingSessions,                                                     386) /*!< 386 (NumInGroup FIX.4.2) Number of TradingSessionIDs (336) in repeating group.*/ \
X(TotalVolumeTraded,                                                     387) /*!< 387 (Qty FIX.4.2) Total volume (quantity) traded.*/ \
X(DiscretionInst,                                                        388) /*!< 388 (char FIX.4.2) Code to identify the price a DiscretionOffsetValue (389) is related to and should be mathematically added to.*/ \
X(DiscretionOffsetValue,                                                 389) /*!< 389 (float FIX.4.2) Amount (signed) added to the "related to" price specified via DiscretionInst (388), in the context of DiscretionOffsetType (842) \
 \
(Prior to FIX 4.4 this field was of type PriceOffset)*/ \
X(BidID,                                                                 390) /*!< 390 (String FIX.4.2) For bid lists, unique identifier for BidResponse(35=I) as assigned by sell-side (broker, exchange, ECN). Uniqueness must be guaranteed within a single trading day. \
 \
 \
 \
For quotes, unique identifier for the bid side of the quote assigned by the quote issuer.*/ \
X(ClientBidID,                                                           391) /*!< 391 (String FIX.4.2) Unique identifier for a Bid Request as assigned by institution. Uniqueness must be guaranteed within a single trading day.*/ \
X(ListName,                                                              392) /*!< 392 (String FIX.4.2) Descriptive name for list order.*/ \
X(TotNoRelatedSym,                                                       393) /*!< 393 (int FIX.4.2) Total number of securities. \
 \
(Prior to FIX 4.4 this field was named TotalNumSecurities)*/ \
X(BidType,                                                               394) /*!< 394 (int FIX.4.2) Code to identify the type of Bid Request.*/ \
X(NumTickets,                                                            395) /*!< 395 (int FIX.4.2) Total number of tickets.*/ \
X(SideValue1,                                                            396) /*!< 396 (Amt FIX.4.2) Amounts in currency*/ \
X(SideValue2,                                                            397) /*!< 397 (Amt FIX.4.2) Amounts in currency*/ \
X(NoBidDescriptors,                                                      398) /*!< 398 (NumInGroup FIX.4.2) Number of BidDescriptor (400) entries.*/ \
X(BidDescriptorType,                                                     399) /*!< 399 (int FIX.4.2) Code to identify the type of BidDescriptor (400).*/ \
X(BidDescriptor,                                                         400) /*!< 400 (String FIX.4.2) BidDescriptor value. Usage depends upon BidDescriptorTyp (399). \
 \
If BidDescriptorType = 1 \
 \
Industrials etc - Free text \
 \
If BidDescriptorType = 2 \
 \
"FR" etc - ISO Country Codes \
 \
If BidDescriptorType = 3 \
 \
FT00, FT250, STOX - Free text*/ \
X(SideValueInd,                                                          401) /*!< 401 (int FIX.4.2) Code to identify which "SideValue" the value refers to. SideValue1 and SideValue2 are used as opposed to Buy or Sell so that the basket can be quoted either way as Buy or Sell.*/ \
X(LiquidityPctLow,                                                       402) /*!< 402 (Percentage FIX.4.2) Liquidity indicator or lower limit if TotalNumSecurities (393) &gt; 1. Represented as a percentage.*/ \
X(LiquidityPctHigh,                                                      403) /*!< 403 (Percentage FIX.4.2) Upper liquidity indicator if TotalNumSecurities (393) &gt; 1. Represented as a percentage.*/ \
X(LiquidityValue,                                                        404) /*!< 404 (Amt FIX.4.2) Value between LiquidityPctLow (402) and LiquidityPctHigh (403) in Currency*/ \
X(EFPTrackingError,                                                      405) /*!< 405 (Percentage FIX.4.2) Eg Used in EFP trades 2% (EFP - Exchange for Physical ). Represented as a percentage.*/ \
X(FairValue,                                                             406) /*!< 406 (Amt FIX.4.2) Used in EFP trades*/ \
X(OutsideIndexPct,                                                       407) /*!< 407 (Percentage FIX.4.2) Used in EFP trades. Represented as a percentage.*/ \
X(ValueOfFutures,                                                        408) /*!< 408 (Amt FIX.4.2) Used in EFP trades*/ \
X(LiquidityIndType,                                                      409) /*!< 409 (int FIX.4.2) Code to identify the type of liquidity indicator.*/ \
X(WtAverageLiquidity,                                                    410) /*!< 410 (Percentage FIX.4.2) Overall weighted average liquidity expressed as a % of average daily volume. Represented as a percentage.*/ \
X(ExchangeForPhysical,                                                   411) /*!< 411 (Boolean FIX.4.2) Indicates whether or not to exchange for phsyical.*/ \
X(OutMainCntryUIndex,                                                    412) /*!< 412 (Amt FIX.4.2) Value of stocks in Currency*/ \
X(CrossPercent,                                                          413) /*!< 413 (Percentage FIX.4.2) Percentage of program that crosses in Currency. Represented as a percentage.*/ \
X(ProgRptReqs,                                                           414) /*!< 414 (int FIX.4.2) Code to identify the desired frequency of progress reports.*/ \
X(ProgPeriodInterval,                                                    415) /*!< 415 (int FIX.4.2) Time in minutes between each ListStatus report sent by SellSide. Zero means don't send status.*/ \
X(IncTaxInd,                                                             416) /*!< 416 (int FIX.4.2) Code to represent whether value is net (inclusive of tax) or gross.*/ \
X(NumBidders,                                                            417) /*!< 417 (int FIX.4.2) Indicates the total number of bidders on the list*/ \
X(BidTradeType,                                                          418) /*!< 418 (char FIX.4.2) Code to represent the type of trade. \
 \
(Prior to FIX 4.4 this field was named "TradeType")*/ \
X(BasisPxType,                                                           419) /*!< 419 (char FIX.4.2) Code to represent the basis price type.*/ \
X(NoBidComponents,                                                       420) /*!< 420 (NumInGroup FIX.4.2) Indicates the number of list entries.*/ \
X(Country,                                                               421) /*!< 421 (Country FIX.4.2) ISO Country Code in field*/ \
X(TotNoStrikes,                                                          422) /*!< 422 (int FIX.4.2) Total number of strike price entries across all messages. Should be the sum of all NoStrikes (428) in each message that has repeating strike price entries related to the same ListID (66). Used to support fragmentation.*/ \
X(PriceType,                                                             423) /*!< 423 (int FIX.4.2) Code to represent the price type.*/ \
X(DayOrderQty,                                                           424) /*!< 424 (Qty FIX.4.2) For GT orders, the OrderQty (38) less all quantity (adjusted for stock splits) that traded on previous days. DayOrderQty (424) = OrderQty - (CumQty (14) - DayCumQty (425))*/ \
X(DayCumQty,                                                             425) /*!< 425 (Qty FIX.4.2) Quantity on a GT order that has traded today.*/ \
X(DayAvgPx,                                                              426) /*!< 426 (Price FIX.4.2) The average price for quantity on a GT order that has traded today.*/ \
X(GTBookingInst,                                                         427) /*!< 427 (int FIX.4.2) Code to identify whether to book out executions on a part-filled GT order on the day of execution or to accumulate.*/ \
X(NoStrikes,                                                             428) /*!< 428 (NumInGroup FIX.4.2) Number of list strike price entries.*/ \
X(ListStatusType,                                                        429) /*!< 429 (int FIX.4.2) Code to represent the status type.*/ \
X(NetGrossInd,                                                           430) /*!< 430 (int FIX.4.2) Code to represent whether value is net (inclusive of tax) or gross.*/ \
X(ListOrderStatus,                                                       431) /*!< 431 (int FIX.4.2) Code to represent the status of a list order.*/ \
X(ExpireDate,                                                            432) /*!< 432 (LocalMktDate FIX.4.2) Date of order expiration (last day the order can trade), always expressed in terms of the local market date. The time at which the order expires is determined by the local market's business practices*/ \
X(ListExecInstType,                                                      433) /*!< 433 (char FIX.4.2) Identifies the type of ListExecInst (69).*/ \
X(CxlRejResponseTo,                                                      434) /*!< 434 (char FIX.4.2) Identifies the type of request that a Cancel Reject is in response to.*/ \
X(UnderlyingCouponRate,                                                  435) /*!< 435 (Percentage FIX.4.2) Underlying security's CouponRate. \
 \
See CouponRate (223) field for description*/ \
X(UnderlyingContractMultiplier,                                          436) /*!< 436 (float FIX.4.2) Underlying security's ContractMultiplier. \
 \
See ContractMultiplier (231) field for description*/ \
X(ContraTradeQty,                                                        437) /*!< 437 (Qty FIX.4.2) Quantity traded with the ContraBroker (375).*/ \
X(ContraTradeTime,                                                       438) /*!< 438 (UTCTimestamp FIX.4.2) Identifes the time of the trade with the ContraBroker (375). (always expressed in UTC (Universal Time Coordinated, also known as "GMT")*/ \
X(LiquidityNumSecurities,                                                441) /*!< 441 (int FIX.4.2) Number of Securites between LiquidityPctLow (402) and LiquidityPctHigh (403) in Currency.*/ \
X(MultiLegReportingType,                                                 442) /*!< 442 (char FIX.4.2) Used to indicate how the multi-legged security (e.g. option strategies, spreads, etc.) is being reported. */ \
X(StrikeTime,                                                            443) /*!< 443 (UTCTimestamp FIX.4.2) The time at which current market prices are used to determine the value of a basket.  \
 \
In negotiation workflows where a spread-to-benchmark price is negotiated, this is the pre-determined time at which the benchmark is to be spotted. */ \
X(ListStatusText,                                                        444) /*!< 444 (String FIX.4.2) Free format text string related to List Status.*/ \
X(EncodedListStatusTextLen,                                              445) /*!< 445 (Length FIX.4.2) Byte length of encoded (non-ASCII characters) EncodedListStatusText (446) field.*/ \
X(EncodedListStatusText,                                                 446) /*!< 446 (data FIX.4.2) Encoded (non-ASCII characters) representation of the ListStatusText (444) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the ListStatusText field.*/ \
X(PartyIDSource,                                                         447) /*!< 447 (char FIX.4.3) Identifies class or source of the PartyID (448) value. Required if PartyID is specified. Note: applicable values depend upon PartyRole (452) specified. \
 \
See "Appendix 6-G - Use of &lt;Parties&gt; Component Block"*/ \
X(PartyID,                                                               448) /*!< 448 (String FIX.4.3) Party identifier/code. See PartyIDSource (447) and PartyRole (452). \
 \
See "Appendix 6-G - Use of &lt;Parties&gt; Component Block"*/ \
X(NetChgPrevDay,                                                         451) /*!< 451 (PriceOffset FIX.4.3) Net change from previous day's closing price vs. last traded price.*/ \
X(PartyRole,                                                             452) /*!< 452 (int FIX.4.3) Identifies the type or role of the PartyID (448) specified. \
 \
See "Appendix 6-G - Use of &lt;Parties&gt; Component Block" \
 \
(see Volume : "Glossary" for value definitions)*/ \
X(NoPartyIDs,                                                            453) /*!< 453 (NumInGroup FIX.4.3) Number of PartyID (448), PartyIDSource (447), and PartyRole (452) entries*/ \
X(NoSecurityAltID,                                                       454) /*!< 454 (NumInGroup FIX.4.3) Number of SecurityAltID (455) entries.*/ \
X(SecurityAltID,                                                         455) /*!< 455 (String FIX.4.3) Alternate Security identifier value for this security of SecurityAltIDSource (456) type (e.g. CUSIP, SEDOL, ISIN, etc). Requires SecurityAltIDSource.*/ \
X(SecurityAltIDSource,                                                   456) /*!< 456 (String FIX.4.3) Identifies class or source of the SecurityAltID (455) value. Required if SecurityAltID is specified. \
 \
Valid values: \
 \
Same valid values as the SecurityIDSource (22) field*/ \
X(NoUnderlyingSecurityAltID,                                             457) /*!< 457 (NumInGroup FIX.4.3) Number of UnderlyingSecurityAltID (458) entries.*/ \
X(UnderlyingSecurityAltID,                                               458) /*!< 458 (String FIX.4.3) Alternate Security identifier value for this underlying security of UnderlyingSecurityAltIDSource (459) type (e.g. CUSIP, SEDOL, ISIN, etc). Requires UnderlyingSecurityAltIDSource.*/ \
X(UnderlyingSecurityAltIDSource,                                         459) /*!< 459 (String FIX.4.3) Identifies class or source of the UnderlyingSecurityAltID (458) value. Required if UnderlyingSecurityAltID is specified. \
 \
Valid values: \
 \
Same valid values as the SecurityIDSource (22) field*/ \
X(Product,                                                               460) /*!< 460 (int FIX.4.3) Indicates the type of product the security is associated with. See also the CFICode (461) and SecurityType (167) fields.*/ \
X(CFICode,                                                               461) /*!< 461 (String FIX.4.3) Indicates the type of security using ISO 10962 standard, Classification of Financial Instruments (CFI code) values. ISO 10962 is maintained by ANNA (Association of National Numbering Agencies) acting as Registration Authority. See "Appendix 6-B FIX Fields Based Upon Other Standards". See also the Product (460) and SecurityType (167) fields. It is recommended that CFICode be used instead of SecurityType (167) for non-Fixed Income instruments. \
 \
A subset of possible values applicable to FIX usage are identified in "Appendix 6-D CFICode Usage - ISO 10962 Classification of Financial Instruments (CFI code)"*/ \
X(UnderlyingProduct,                                                     462) /*!< 462 (int FIX.4.3) Underlying security's Product. \
 \
Valid values: see Product(460) field*/ \
X(UnderlyingCFICode,                                                     463) /*!< 463 (String FIX.4.3) Underlying security's CFICode. \
 \
Valid values: see CFICode (461) field*/ \
X(TestMessageIndicator,                                                  464) /*!< 464 (Boolean FIX.4.3) Indicates whether or not this FIX Session is a "test" vs. "production" connection. Useful for preventing "accidents".*/ \
X(BookingRefID,                                                          466) /*!< 466 (String FIX.4.3) Common reference passed to a post-trade booking process (e.g. industry matching utility).*/ \
X(IndividualAllocID,                                                     467) /*!< 467 (String FIX.4.3) Unique identifier for a specific NoAllocs (78) repeating group instance (e.g. for an AllocAccount).*/ \
X(RoundingDirection,                                                     468) /*!< 468 (char FIX.4.3) Specifies which direction to round For CIV - indicates whether or not the quantity of shares/units is to be rounded and in which direction where CashOrdQty (152) or (for CIV only) OrderPercent (516) are specified on an order. \
 \
The default is for rounding to be at the discretion of the executing broker or fund manager. \
 \
e.g. for an order specifying CashOrdQty or OrderPercent if the calculated number of shares/units was 325.76 and RoundingModulus (469) was 0 - "round down" would give 320 units, 1 - "round up" would give 330 units and "round to nearest" would give 320 units.*/ \
X(RoundingModulus,                                                       469) /*!< 469 (float FIX.4.3) For CIV - a float value indicating the value to which rounding is required. \
 \
i.e. 0 means round to a multiple of 0 units/shares; 0.5 means round to a multiple of 0.5 units/shares. \
 \
The default, if RoundingDirection (468) is specified without RoundingModulus, is to round to a whole unit/share.*/ \
X(CountryOfIssue,                                                        470) /*!< 470 (Country FIX.4.3) ISO Country code of instrument issue (e.g. the country portion typically used in ISIN). Can be used in conjunction with non-ISIN SecurityID (48) (e.g. CUSIP for Municipal Bonds without ISIN) to provide uniqueness.*/ \
X(StateOrProvinceOfIssue,                                                471) /*!< 471 (String FIX.4.3) A two-character state or province abbreviation.*/ \
X(LocaleOfIssue,                                                         472) /*!< 472 (String FIX.4.3) Identifies the locale or region of issue. */ \
X(NoRegistDtls,                                                          473) /*!< 473 (NumInGroup FIX.4.3) The number of registration details on a Registration Instructions message*/ \
X(MailingDtls,                                                           474) /*!< 474 (String FIX.4.3) Set of Correspondence address details, possibly including phone, fax, etc.*/ \
X(InvestorCountryOfResidence,                                            475) /*!< 475 (Country FIX.4.3) The ISO 366 Country code (2 character) identifying which country the beneficial investor is resident for tax purposes.*/ \
X(PaymentRef,                                                            476) /*!< 476 (String FIX.4.3) "Settlement Payment Reference" - A free format Payment reference to assist with reconciliation, e.g. a Client and/or Order ID number.*/ \
X(DistribPaymentMethod,                                                  477) /*!< 477 (int FIX.4.3) A code identifying the payment method for a (fractional) distribution. \
 \
13 through 998 are reserved for future use \
 \
Values above 1000 are available for use by private agreement among counterparties*/ \
X(CashDistribCurr,                                                       478) /*!< 478 (Currency FIX.4.3) Specifies currency to be used for Cash Distributions see "Appendix 6-A Valid Currency Codes".*/ \
X(CommCurrency,                                                          479) /*!< 479 (Currency FIX.4.3) Specifies currency to be use for Commission (12) if the Commission currency is different from the Deal Currency - see "Appendix 6-A; Valid Currency Codes".*/ \
X(CancellationRights,                                                    480) /*!< 480 (char FIX.4.3) For CIV - A one character code identifying whether Cancellation rights/Cooling off period applies.*/ \
X(MoneyLaunderingStatus,                                                 481) /*!< 481 (char FIX.4.3) A one character code identifying Money laundering status.*/ \
X(MailingInst,                                                           482) /*!< 482 (String FIX.4.3) Free format text to specify mailing instruction requirements, e.g. "no third party mailings".*/ \
X(TransBkdTime,                                                          483) /*!< 483 (UTCTimestamp FIX.4.3) For CIV A date and time stamp to indicate the time a CIV order was booked by the fund manager. \
 \
For derivatives a date and time stamp to indicate when this order was booked with the agent prior to submission to the VMU. Indicates the time at which the order was finalized between the buyer and seller prior to submission.*/ \
X(ExecPriceType,                                                         484) /*!< 484 (char FIX.4.3) For CIV - Identifies how the execution price LastPx (31) was calculated from the fund unit/share price(s) calculated at the fund valuation point.*/ \
X(ExecPriceAdjustment,                                                   485) /*!< 485 (float FIX.4.3) For CIV the amount or percentage by which the fund unit/share price was adjusted, as indicated by ExecPriceType (484)*/ \
X(DateOfBirth,                                                           486) /*!< 486 (LocalMktDate FIX.4.3) The date of birth applicable to the individual, e.g. required to open some types of tax-exempt account.*/ \
X(TradeReportTransType,                                                  487) /*!< 487 (int FIX.4.3) Identifies Trade Report message transaction type \
 \
(Prior to FIX 4.4 this field was of type char)*/ \
X(CardHolderName,                                                        488) /*!< 488 (String FIX.4.3) The name of the payment card holder as specified on the card being used for payment.*/ \
X(CardNumber,                                                            489) /*!< 489 (String FIX.4.3) The number of the payment card as specified on the card being used for payment.*/ \
X(CardExpDate,                                                           490) /*!< 490 (LocalMktDate FIX.4.3) The expiry date of the payment card as specified on the card being used for payment.*/ \
X(CardIssNum,                                                            491) /*!< 491 (String FIX.4.3) The issue number of the payment card as specified on the card being used for payment. This is only applicable to certain types of card.*/ \
X(PaymentMethod,                                                         492) /*!< 492 (int FIX.4.3) A code identifying the Settlement payment method. 16 through 998 are reserved for future use \
 \
Values above 1000 are available for use by private agreement among counterparties*/ \
X(RegistAcctType,                                                        493) /*!< 493 (String FIX.4.3) For CIV - a fund manager-defined code identifying which of the fund manager's account types is required.*/ \
X(Designation,                                                           494) /*!< 494 (String FIX.4.3) Free format text defining the designation to be associated with a holding on the register. Used to identify assets of a specific underlying investor using a common registration, e.g. a broker's nominee or street name.*/ \
X(TaxAdvantageType,                                                      495) /*!< 495 (int FIX.4.3) For CIV - a code identifying the type of tax exempt account in which purchased shares/units are to be held. \
 \
30 - 998 are reserved for future use by recognized taxation authorities \
 \
999=Other \
 \
values above 1000 are available for use by private agreement among counterparties*/ \
X(RegistRejReasonText,                                                   496) /*!< 496 (String FIX.4.3) Text indicating reason(s) why a Registration Instruction has been rejected.*/ \
X(FundRenewWaiv,                                                         497) /*!< 497 (char FIX.4.3) A one character code identifying whether the Fund based renewal commission is to be waived.*/ \
X(CashDistribAgentName,                                                  498) /*!< 498 (String FIX.4.3) Name of local agent bank if for cash distributions*/ \
X(CashDistribAgentCode,                                                  499) /*!< 499 (String FIX.4.3) BIC (Bank Identification Code--Swift managed) code of agent bank for cash distributions*/ \
X(CashDistribAgentAcctNumber,                                            500) /*!< 500 (String FIX.4.3) Account number at agent bank for distributions.*/ \
X(CashDistribPayRef,                                                     501) /*!< 501 (String FIX.4.3) Free format Payment reference to assist with reconciliation of distributions.*/ \
X(CashDistribAgentAcctName,                                              502) /*!< 502 (String FIX.4.3) Name of account at agent bank for distributions.*/ \
X(CardStartDate,                                                         503) /*!< 503 (LocalMktDate FIX.4.3) The start date of the card as specified on the card being used for payment.*/ \
X(PaymentDate,                                                           504) /*!< 504 (LocalMktDate FIX.4.3) The date written on a cheque or date payment should be submitted to the relevant clearing system.*/ \
X(PaymentRemitterID,                                                     505) /*!< 505 (String FIX.4.3) Identifies sender of a payment, e.g. the payment remitter or a customer reference number.*/ \
X(RegistStatus,                                                          506) /*!< 506 (char FIX.4.3) Registration status as returned by the broker or (for CIV) the fund manager:*/ \
X(RegistRejReasonCode,                                                   507) /*!< 507 (int FIX.4.3) Reason(s) why Registration Instructions has been rejected. \
 \
The reason may be further amplified in the RegistRejReasonCode field. \
 \
Possible values of reason code include:*/ \
X(RegistRefID,                                                           508) /*!< 508 (String FIX.4.3) Reference identifier for the RegistID (53) with Cancel and Replace RegistTransType (54) transaction types.*/ \
X(RegistDtls,                                                            509) /*!< 509 (String FIX.4.3) Set of Registration name and address details, possibly including phone, fax etc.*/ \
X(NoDistribInsts,                                                        510) /*!< 510 (NumInGroup FIX.4.3) The number of Distribution Instructions on a Registration Instructions message*/ \
X(RegistEmail,                                                           511) /*!< 511 (String FIX.4.3) Email address relating to Registration name and address details*/ \
X(DistribPercentage,                                                     512) /*!< 512 (Percentage FIX.4.3) The amount of each distribution to go to this beneficiary, expressed as a percentage*/ \
X(RegistID,                                                              513) /*!< 513 (String FIX.4.3) Unique identifier of the registration details as assigned by institution or intermediary.*/ \
X(RegistTransType,                                                       514) /*!< 514 (char FIX.4.3) Identifies Registration Instructions transaction type*/ \
X(ExecValuationPoint,                                                    515) /*!< 515 (UTCTimestamp FIX.4.3) For CIV - a date and time stamp to indicate the fund valuation point with respect to which a order was priced by the fund manager.*/ \
X(OrderPercent,                                                          516) /*!< 516 (Percentage FIX.4.3) For CIV specifies the approximate order quantity desired. For a CIV Sale it specifies percentage of investor's total holding to be sold. For a CIV switch/exchange it specifies percentage of investor's cash realised from sales to be re-invested. The executing broker, intermediary or fund manager is responsible for converting and calculating OrderQty (38) in shares/units for subsequent messages.*/ \
X(OwnershipType,                                                         517) /*!< 517 (char FIX.4.3) The relationship between Registration parties.*/ \
X(NoContAmts,                                                            518) /*!< 518 (NumInGroup FIX.4.3) The number of Contract Amount details on an Execution Report message*/ \
X(ContAmtType,                                                           519) /*!< 519 (int FIX.4.3) Type of ContAmtValue (520). \
 \
NOTE That Commission Amount / % in Contract Amounts is the commission actually charged, rather than the commission instructions given in Fields 2/3.*/ \
X(ContAmtValue,                                                          520) /*!< 520 (float FIX.4.3) Value of Contract Amount, e.g. a financial amount or percentage as indicated by ContAmtType (519).*/ \
X(ContAmtCurr,                                                           521) /*!< 521 (Currency FIX.4.3) Specifies currency for the Contract amount if different from the Deal Currency - see "Appendix 6-A; Valid Currency Codes".*/ \
X(OwnerType,                                                             522) /*!< 522 (int FIX.4.3) Identifies the type of owner.*/ \
X(PartySubID,                                                            523) /*!< 523 (String FIX.4.3) Sub-identifier (e.g. Clearing Account for PartyRole (452)=Clearing Firm, Locate ID # for PartyRole=Locate/Lending Firm, etc). Not required when using PartyID (448), PartyIDSource (447), and PartyRole.*/ \
X(NestedPartyID,                                                         524) /*!< 524 (String FIX.4.3) PartyID value within a nested repeating group. \
 \
Same values as PartyID (448)*/ \
X(NestedPartyIDSource,                                                   525) /*!< 525 (char FIX.4.3) PartyIDSource value within a nested repeating group. \
 \
Same values as PartyIDSource (447)*/ \
X(SecondaryClOrdID,                                                      526) /*!< 526 (String FIX.4.3) Assigned by the party which originates the order. Can be used to provide the ClOrdID (11) used by an exchange or executing system.*/ \
X(SecondaryExecID,                                                       527) /*!< 527 (String FIX.4.3) Assigned by the party which accepts the order. Can be used to provide the ExecID (17) used by an exchange or executing system.*/ \
X(OrderCapacity,                                                         528) /*!< 528 (char FIX.4.3) Designates the capacity of the firm placing the order. \
 \
(as of FIX 4.3, this field replaced Rule80A (tag 47) --used in conjunction with OrderRestrictions (529) field) \
 \
(see Volume : "Glossary" for value definitions)*/ \
X(OrderRestrictions,                                                     529) /*!< 529 (MultipleCharValue FIX.4.3) Restrictions associated with an order. If more than one restriction is applicable to an order, this field can contain multiple instructions separated by space.*/ \
X(MassCancelRequestType,                                                 530) /*!< 530 (char FIX.4.3) Specifies scope of Order Mass Cancel Request.*/ \
X(MassCancelResponse,                                                    531) /*!< 531 (char FIX.4.3) Specifies the action taken by counterparty order handling system as a result of the Order Mass Cancel Request*/ \
X(MassCancelRejectReason,                                                532) /*!< 532 (int FIX.4.3) Reason Order Mass Cancel Request was rejected*/ \
X(TotalAffectedOrders,                                                   533) /*!< 533 (int FIX.4.3) Total number of orders affected by either the OrderMassActionRequest(MsgType=CA) or OrderMassCancelRequest(MsgType=Q).*/ \
X(NoAffectedOrders,                                                      534) /*!< 534 (NumInGroup FIX.4.3) Number of affected orders in the repeating group of order ids.*/ \
X(AffectedOrderID,                                                       535) /*!< 535 (String FIX.4.3) OrderID(37) of an order affected by a mass cancel or mass action request.*/ \
X(AffectedSecondaryOrderID,                                              536) /*!< 536 (String FIX.4.3) SecondaryOrderID(198) of an order affected by a mass cancel or mass action request.*/ \
X(QuoteType,                                                             537) /*!< 537 (int FIX.4.3) Identifies the type of quote. \
 \
An indicative quote is used to inform a counterparty of a market. An indicative quote does not result directly in a trade. \
 \
A tradeable quote is submitted to a market and will result directly in a trade against other orders and quotes in a market. \
 \
A restricted tradeable quote is submitted to a market and within a certain restriction (possibly based upon price or quantity) will automatically trade against orders. Order that do not comply with restrictions are sent to the quote issuer who can choose to accept or decline the order. \
 \
A counter quote is used in the negotiation model. See Volume 7 - Product: Fixed Income for example usage.*/ \
X(NestedPartyRole,                                                       538) /*!< 538 (int FIX.4.3) PartyRole value within a nested repeating group. \
 \
Same values as PartyRole (452)*/ \
X(NoNestedPartyIDs,                                                      539) /*!< 539 (NumInGroup FIX.4.3) Number of NestedPartyID (524), NestedPartyIDSource (525), and NestedPartyRole (538) entries*/ \
X(TotalAccruedInterestAmt,                                               540) /*!< 540 (Amt FIX.4.3) Total Amount of Accrued Interest for convertible bonds and fixed income*/ \
X(MaturityDate,                                                          541) /*!< 541 (LocalMktDate FIX.4.3) Date of maturity.*/ \
X(UnderlyingMaturityDate,                                                542) /*!< 542 (LocalMktDate FIX.4.3) Underlying security's maturity date. \
 \
See MaturityDate (541) field for description*/ \
X(InstrRegistry,                                                         543) /*!< 543 (String FIX.4.3) Values may include BIC for the depository or custodian who maintain ownership records, the ISO country code for the location of the record, or the value "ZZ" to specify physical ownership of the security (e.g. stock certificate).*/ \
X(CashMargin,                                                            544) /*!< 544 (char FIX.4.3) Identifies whether an order is a margin order or a non-margin order. This is primarily used when sending orders to Japanese exchanges to indicate sell margin or buy to cover. The same tag could be assigned also by buy-side to indicate the intent to sell or buy margin and the sell-side to accept or reject (base on some validation criteria) the margin request.*/ \
X(NestedPartySubID,                                                      545) /*!< 545 (String FIX.4.3) PartySubID value within a nested repeating group. \
 \
Same values as PartySubID (523)*/ \
X(Scope,                                                                 546) /*!< 546 (MultipleCharValue FIX.4.3) Specifies the market scope of the market data.*/ \
X(MDImplicitDelete,                                                      547) /*!< 547 (Boolean FIX.4.3) Defines how a server handles distribution of a truncated book. Defaults to broker option.*/ \
X(CrossID,                                                               548) /*!< 548 (String FIX.4.3) Identifier for a cross order. Must be unique during a given trading day. Recommend that firms use the order date as part of the CrossID for Good Till Cancel (GT) orders.*/ \
X(CrossType,                                                             549) /*!< 549 (int FIX.4.3) Type of cross being submitted to a market*/ \
X(CrossPrioritization,                                                   550) /*!< 550 (int FIX.4.3) Indicates if one side or the other of a cross order should be prioritized. \
 \
The definition of prioritization is left to the market. In some markets prioritization means which side of the cross order is applied to the market first. In other markets - prioritization may mean that the prioritized side is fully executed (sometimes referred to as the side being protected).*/ \
X(OrigCrossID,                                                           551) /*!< 551 (String FIX.4.3) CrossID of the previous cross order (NOT the initial cross order of the day) as assigned by the institution, used to identify the previous cross order in Cross Cancel and Cross Cancel/Replace Requests.*/ \
X(NoSides,                                                               552) /*!< 552 (NumInGroup FIX.4.3) Number of Side repeating group instances.*/ \
X(Username,                                                              553) /*!< 553 (String FIX.4.3) Userid or username.*/ \
X(Password,                                                              554) /*!< 554 (String FIX.4.3) Password or passphrase.*/ \
X(NoLegs,                                                                555) /*!< 555 (NumInGroup FIX.4.3) Number of InstrumentLeg repeating group instances.*/ \
X(LegCurrency,                                                           556) /*!< 556 (Currency FIX.4.3) Currency associated with a particular Leg's quantity*/ \
X(TotNoSecurityTypes,                                                    557) /*!< 557 (int FIX.4.3) Used to support fragmentation. Indicates total number of security types when multiple Security Type messages are used to return results.*/ \
X(NoSecurityTypes,                                                       558) /*!< 558 (NumInGroup FIX.4.3) Number of Security Type repeating group instances.*/ \
X(SecurityListRequestType,                                               559) /*!< 559 (int FIX.4.3) Identifies the type/criteria of Security List Request*/ \
X(SecurityRequestResult,                                                 560) /*!< 560 (int FIX.4.3) The results returned to a Security Request message*/ \
X(RoundLot,                                                              561) /*!< 561 (Qty FIX.4.3) The trading lot size of a security*/ \
X(MinTradeVol,                                                           562) /*!< 562 (Qty FIX.4.3) The minimum order quantity (as expressed by TradeVolType(1786)) that can be submitted for a security.*/ \
X(MultiLegRptTypeReq,                                                    563) /*!< 563 (int FIX.4.3) Indicates the method of execution reporting requested by issuer of the order.*/ \
X(LegPositionEffect,                                                     564) /*!< 564 (char FIX.4.3) PositionEffect for leg of a multileg \
 \
See PositionEffect (77) field for description*/ \
X(LegCoveredOrUncovered,                                                 565) /*!< 565 (int FIX.4.3) CoveredOrUncovered for leg of a multileg \
 \
See CoveredOrUncovered (203) field for description*/ \
X(LegPrice,                                                              566) /*!< 566 (Price FIX.4.3) Price for leg of a multileg \
 \
See Price (44) field for description*/ \
X(TradSesStatusRejReason,                                                567) /*!< 567 (int FIX.4.3) Indicates the reason a Trading Session Status Request was rejected.*/ \
X(TradeRequestID,                                                        568) /*!< 568 (String FIX.4.3) Trade Capture Report Request ID*/ \
X(TradeRequestType,                                                      569) /*!< 569 (int FIX.4.3) Type of Trade Capture Report.*/ \
X(PreviouslyReported,                                                    570) /*!< 570 (Boolean FIX.4.3) Indicates if the transaction was previously reported to the counterparty or market.*/ \
X(TradeReportID,                                                         571) /*!< 571 (String FIX.4.3) Unique identifier of trade capture report*/ \
X(TradeReportRefID,                                                      572) /*!< 572 (String FIX.4.3) Reference identifier used with CANCEL and REPLACE transaction types.*/ \
X(MatchStatus,                                                           573) /*!< 573 (char FIX.4.3) The status of this trade with respect to matching or comparison.*/ \
X(MatchType,                                                             574) /*!< 574 (String FIX.4.3) The point in the matching process at which this trade was matched.*/ \
X(OddLot,                                                                575) /*!< 575 (Boolean FIX.4.3) This trade is to be treated as an odd lot \
 \
If this field is not specified, the default will be "N"*/ \
X(NoClearingInstructions,                                                576) /*!< 576 (NumInGroup FIX.4.3) Number of clearing instructions*/ \
X(ClearingInstruction,                                                   577) /*!< 577 (int FIX.4.3) Eligibility of this trade for clearing and central counterparty processing.*/ \
X(TradeInputSource,                                                      578) /*!< 578 (String FIX.4.3) Type of input device or system from which the trade was entered.*/ \
X(TradeInputDevice,                                                      579) /*!< 579 (String FIX.4.3) Specific device number, terminal number or station where trade was entered*/ \
X(NoDates,                                                               580) /*!< 580 (NumInGroup FIX.4.3) Number of Date fields provided in date range*/ \
X(AccountType,                                                           581) /*!< 581 (int FIX.4.3) Type of account associated with an order*/ \
X(CustOrderCapacity,                                                     582) /*!< 582 (int FIX.4.3) Capacity of customer placing the order.*/ \
X(ClOrdLinkID,                                                           583) /*!< 583 (String FIX.4.3) Permits order originators to tie together groups of orders in which trades resulting from orders are associated for a specific purpose, for example the calculation of average execution price for a customer or to associate lists submitted to a broker as waves of a larger program trade.*/ \
X(MassStatusReqID,                                                       584) /*!< 584 (String FIX.4.3) Value assigned by issuer of Mass Status Request to uniquely identify the request*/ \
X(MassStatusReqType,                                                     585) /*!< 585 (int FIX.4.3) Mass Status Request Type*/ \
X(OrigOrdModTime,                                                        586) /*!< 586 (UTCTimestamp FIX.4.3) The most recent (or current) modification TransactTime (tag 60) reported on an Execution Report for the order. The OrigOrdModTime is provided as an optional field on Order Cancel Request and Order Cancel Replace Requests to identify that the state of the order has not changed since the request was issued. The use of this approach is not recommended.*/ \
X(LegSettlType,                                                          587) /*!< 587 (String FIX.4.3) Indicates order settlement period. If present, LegSettlDate (588) overrides this field. If both LegSettlType (587) and LegSettDate (588) are omitted, the default for LegSettlType (587) is 0 (Regular) \
 \
Regular is defined as the default settlement period for the particular security on the exchange of execution. \
 \
In Fixed Income the contents of this field may influence the instrument definition if the LegSecurityID (602) is ambiguous. In the US an active Treasury offering may be re-opened, and for a time one CUSIP will apply to both the current and "when-issued" securities. Supplying a value of "7" clarifies the instrument description; any other value or the absence of this field should cause the respondent to default to the active issue. \
 \
Additionally the following patterns may be uses as well as enum values \
 \
Dx = FX tenor expression for "days", e.g. "D5", where "x" is any integer &gt; 0 \
 \
Mx = FX tenor expression for "months", e.g. "M3", where "x" is any integer &gt; 0 \
 \
Wx = FX tenor expression for "weeks", e.g. "W13", where "x" is any integer &gt; 0 \
 \
Yx = FX tenor expression for "years", e.g. "Y1", where "x" is any integer &gt; 0. \
 \
Note that for FX the tenors expressed using Dx, Mx, Wx, and Yx values do not denote business days, but calendar days.*/ \
X(LegSettlDate,                                                          588) /*!< 588 (LocalMktDate FIX.4.3) Refer to description for SettlDate[64]*/ \
X(DayBookingInst,                                                        589) /*!< 589 (char FIX.4.3) Indicates whether or not automatic booking can occur.*/ \
X(BookingUnit,                                                           590) /*!< 590 (char FIX.4.3) Indicates what constitutes a bookable unit.*/ \
X(PreallocMethod,                                                        591) /*!< 591 (char FIX.4.3) Indicates the method of preallocation.*/ \
X(UnderlyingCountryOfIssue,                                              592) /*!< 592 (Country FIX.4.3) Underlying security's CountryOfIssue. \
 \
See CountryOfIssue (470) field for description*/ \
X(UnderlyingStateOrProvinceOfIssue,                                      593) /*!< 593 (String FIX.4.3) Underlying security's StateOrProvinceOfIssue. \
 \
See StateOrProvinceOfIssue (471) field for description*/ \
X(UnderlyingLocaleOfIssue,                                               594) /*!< 594 (String FIX.4.3) Underlying security's LocaleOfIssue. \
 \
See LocaleOfIssue (472) field for description*/ \
X(UnderlyingInstrRegistry,                                               595) /*!< 595 (String FIX.4.3) Underlying security's InstrRegistry. \
 \
See InstrRegistry (543) field for description*/ \
X(LegCountryOfIssue,                                                     596) /*!< 596 (Country FIX.4.3) Multileg instrument's individual leg security's CountryOfIssue. \
 \
See CountryOfIssue (470) field for description*/ \
X(LegStateOrProvinceOfIssue,                                             597) /*!< 597 (String FIX.4.3) Multileg instrument's individual leg security's StateOrProvinceOfIssue. \
 \
See StateOrProvinceOfIssue (471) field for description*/ \
X(LegLocaleOfIssue,                                                      598) /*!< 598 (String FIX.4.3) Multileg instrument's individual leg security's LocaleOfIssue. \
 \
See LocaleOfIssue (472) field for description*/ \
X(LegInstrRegistry,                                                      599) /*!< 599 (String FIX.4.3) Multileg instrument's individual leg security's InstrRegistry. \
 \
See InstrRegistry (543) field for description*/ \
X(LegSymbol,                                                             600) /*!< 600 (String FIX.4.3) Multileg instrument's individual security's Symbol. \
 \
See Symbol (55) field for description*/ \
X(LegSymbolSfx,                                                          601) /*!< 601 (String FIX.4.3) Multileg instrument's individual security's SymbolSfx. \
 \
See SymbolSfx (65) field for description*/ \
X(LegSecurityID,                                                         602) /*!< 602 (String FIX.4.3) Multileg instrument's individual security's SecurityID. \
 \
See SecurityID (48) field for description*/ \
X(LegSecurityIDSource,                                                   603) /*!< 603 (String FIX.4.3) Multileg instrument's individual security's SecurityIDSource. \
 \
See SecurityIDSource (22) field for description*/ \
X(NoLegSecurityAltID,                                                    604) /*!< 604 (NumInGroup FIX.4.3) Multileg instrument's individual security's NoSecurityAltID. \
 \
See NoSecurityAltID (454) field for description*/ \
X(LegSecurityAltID,                                                      605) /*!< 605 (String FIX.4.3) Multileg instrument's individual security's SecurityAltID. \
 \
See SecurityAltID (455) field for description*/ \
X(LegSecurityAltIDSource,                                                606) /*!< 606 (String FIX.4.3) Multileg instrument's individual security's SecurityAltIDSource. \
 \
See SecurityAltIDSource (456) field for description*/ \
X(LegProduct,                                                            607) /*!< 607 (int FIX.4.3) Multileg instrument's individual security's Product. \
 \
See Product (460) field for description*/ \
X(LegCFICode,                                                            608) /*!< 608 (String FIX.4.3) Multileg instrument's individual security's CFICode. \
 \
See CFICode (461) field for description*/ \
X(LegSecurityType,                                                       609) /*!< 609 (String FIX.4.3) Refer to definition of SecurityType(167)*/ \
X(LegMaturityMonthYear,                                                  610) /*!< 610 (MonthYear FIX.4.3) Multileg instrument's individual security's MaturityMonthYear. \
 \
See MaturityMonthYear (200) field for description*/ \
X(LegMaturityDate,                                                       611) /*!< 611 (LocalMktDate FIX.4.3) Multileg instrument's individual security's MaturityDate. \
 \
See MaturityDate (54) field for description*/ \
X(LegStrikePrice,                                                        612) /*!< 612 (Price FIX.4.3) Multileg instrument's individual security's StrikePrice. \
 \
See StrikePrice (202) field for description*/ \
X(LegOptAttribute,                                                       613) /*!< 613 (char FIX.4.3) Multileg instrument's individual security's OptAttribute. \
 \
See OptAttribute (206) field for description*/ \
X(LegContractMultiplier,                                                 614) /*!< 614 (float FIX.4.3) Multileg instrument's individual security's ContractMultiplier. \
 \
See ContractMultiplier (23) field for description*/ \
X(LegCouponRate,                                                         615) /*!< 615 (Percentage FIX.4.3) Multileg instrument's individual security's CouponRate. \
 \
See CouponRate (223) field for description*/ \
X(LegSecurityExchange,                                                   616) /*!< 616 (Exchange FIX.4.3) Multileg instrument's individual security's SecurityExchange. \
 \
See SecurityExchange (207) field for description*/ \
X(LegIssuer,                                                             617) /*!< 617 (String FIX.4.3) Multileg instrument's individual security's Issuer. \
 \
See Issuer (106) field for description*/ \
X(EncodedLegIssuerLen,                                                   618) /*!< 618 (Length FIX.4.3) Multileg instrument's individual security's EncodedIssuerLen. \
 \
See EncodedIssuerLen (348) field for description*/ \
X(EncodedLegIssuer,                                                      619) /*!< 619 (data FIX.4.3) Multileg instrument's individual security's EncodedIssuer. \
 \
See EncodedIssuer (349) field for description*/ \
X(LegSecurityDesc,                                                       620) /*!< 620 (String FIX.4.3) Description of a multileg instrument. \
 \
Can be used by the venue or one of the trading parties to provide an optional non-normative textual description of the financial instrument. \
 \
*/ \
X(EncodedLegSecurityDescLen,                                             621) /*!< 621 (Length FIX.4.3) Multileg instrument's individual security's EncodedSecurityDescLen. \
 \
See EncodedSecurityDescLen (350) field for description*/ \
X(EncodedLegSecurityDesc,                                                622) /*!< 622 (data FIX.4.3) Multileg instrument's individual security's EncodedSecurityDesc. \
 \
See EncodedSecurityDesc (35) field for description*/ \
X(LegRatioQty,                                                           623) /*!< 623 (float FIX.4.3) The ratio of quantity for this individual leg relative to the entire multileg security.*/ \
X(LegSide,                                                               624) /*!< 624 (char FIX.4.3) The side of this individual leg (multileg security). \
 \
See Side (54) field for description and values*/ \
X(TradingSessionSubID,                                                   625) /*!< 625 (String FIX.4.3) Optional market assigned sub identifier for a trading phase within a trading session. Usage is determined by market or counterparties. Used by US based futures markets to identify exchange specific execution time bracket codes as required by US market regulations. Bilaterally agreed values of data type "String" that start with a character can be used for backward compatibility*/ \
X(AllocType,                                                             626) /*!< 626 (int FIX.4.3) Describes the specific type or purpose of an Allocation message (i.e. "Buyside Calculated") \
 \
(see Volume : "Glossary" for value definitions) \
 \
*** SOME VALUES HAVE BEEN REPLACED - See "Replaced Features and Supported Approach" ****/ \
X(NoHops,                                                                627) /*!< 627 (NumInGroup FIX.4.3) Number of HopCompID entries in repeating group.*/ \
X(HopCompID,                                                             628) /*!< 628 (String FIX.4.3) Assigned value used to identify the third party firm which delivered a specific message either from the firm which originated the message or from another third party (if multiple "hops" are performed). It is recommended that this value be the SenderCompID (49) of the third party. \
 \
Applicable when messages are communicated/re-distributed via third parties which function as service bureaus or "hubs". Only applicable if OnBehalfOfCompID (115) is being used.*/ \
X(HopSendingTime,                                                        629) /*!< 629 (UTCTimestamp FIX.4.3) Time that HopCompID (628) sent the message. It is recommended that this value be the SendingTime (52) of the message sent by the third party. \
 \
Applicable when messages are communicated/re-distributed via third parties which function as service bureaus or "hubs". Only applicable if OnBehalfOfCompID (115) is being used.*/ \
X(HopRefID,                                                              630) /*!< 630 (SeqNum FIX.4.3) Reference identifier assigned by HopCompID (628) associated with the message sent. It is recommended that this value be the MsgSeqNum (34) of the message sent by the third party. \
 \
Applicable when messages are communicated/re-distributed via third parties which function as service bureaus or "hubs". Only applicable if OnBehalfOfCompID (115) is being used.*/ \
X(MidPx,                                                                 631) /*!< 631 (Price FIX.4.3) Mid price/rate.  \
 \
For OTC swaps this is the mid-market mark (for example, as defined by CFTC). \
 \
For uncleared OTC swaps, LegMidPx(2346) and the MidPx(631) fields are mutually exclusive.*/ \
X(BidYield,                                                              632) /*!< 632 (Percentage FIX.4.3) Bid yield*/ \
X(MidYield,                                                              633) /*!< 633 (Percentage FIX.4.3) Mid yield*/ \
X(OfferYield,                                                            634) /*!< 634 (Percentage FIX.4.3) Offer yield*/ \
X(ClearingFeeIndicator,                                                  635) /*!< 635 (String FIX.4.3) Indicates type of fee being assessed of the customer for trade executions at an exchange. Applicable for futures markets only at this time. \
 \
(Values source CBOT, CME, NYBOT, and NYMEX):*/ \
X(WorkingIndicator,                                                      636) /*!< 636 (Boolean FIX.4.3) Indicates if the order is currently being worked. Applicable only for OrdStatus = "New". For open outcry markets this indicates that the order is being worked in the crowd. For electronic markets it indicates that the order has transitioned from a contingent order to a market order.*/ \
X(LegLastPx,                                                             637) /*!< 637 (Price FIX.4.3) Execution price assigned to a leg of a multileg instrument. \
 \
See LastPx (31) field for description and values*/ \
X(PriorityIndicator,                                                     638) /*!< 638 (int FIX.4.3) Indicates if a Cancel/Replace has caused an order to lose book priority.*/ \
X(PriceImprovement,                                                      639) /*!< 639 (PriceOffset FIX.4.3) Amount of price improvement.*/ \
X(Price2,                                                                640) /*!< 640 (Price FIX.4.3) Price of the future part of a F/X swap order. \
 \
See Price (44) for description.*/ \
X(LastForwardPoints2,                                                    641) /*!< 641 (PriceOffset FIX.4.3) F/X forward points of the future part of a F/X swap order added to LastSpotRate (94). May be a negative value.*/ \
X(BidForwardPoints2,                                                     642) /*!< 642 (PriceOffset FIX.4.3) Bid F/X forward points of the future portion of a F/X swap quote added to spot rate. May be a negative value.*/ \
X(OfferForwardPoints2,                                                   643) /*!< 643 (PriceOffset FIX.4.3) Offer F/X forward points of the future portion of a F/X swap quote added to spot rate. May be a negative value.*/ \
X(RFQReqID,                                                              644) /*!< 644 (String FIX.4.3) RFQ Request ID - used to identify an RFQ Request.*/ \
X(MktBidPx,                                                              645) /*!< 645 (Price FIX.4.3) Used to indicate the best bid in a market*/ \
X(MktOfferPx,                                                            646) /*!< 646 (Price FIX.4.3) Used to indicate the best offer in a market*/ \
X(MinBidSize,                                                            647) /*!< 647 (Qty FIX.4.3) Used to indicate a minimum quantity for a bid.*/ \
X(MinOfferSize,                                                          648) /*!< 648 (Qty FIX.4.3) Used to indicate a minimum quantity for an offer. If this field is used the OfferSize (135) field is interpreted as the maximum offer size.*/ \
X(QuoteStatusReqID,                                                      649) /*!< 649 (String FIX.4.3) Unique identifier for Quote Status Request.*/ \
X(LegalConfirm,                                                          650) /*!< 650 (Boolean FIX.4.3) Indicates that this message is to serve as the final and legal confirmation.*/ \
X(UnderlyingLastPx,                                                      651) /*!< 651 (Price FIX.4.3) The calculated or traded price for the underlying instrument that corresponds to a derivative. Used for transactions that include the cash instrument and the derivative.*/ \
X(UnderlyingLastQty,                                                     652) /*!< 652 (Qty FIX.4.3) The calculated or traded quantity for the underlying instrument that corresponds to a derivative. Used for transactions that include the cash instrument and the derivative.*/ \
X(LegRefID,                                                              654) /*!< 654 (String FIX.4.3) Unique identifier for a specific leg (uniqueness not defined as part of the FIX specification). LegRefID(654) be used to reference the value from LegID(1788).*/ \
X(ContraLegRefID,                                                        655) /*!< 655 (String FIX.4.3) Unique indicator for a specific leg for the ContraBroker (375).*/ \
X(SettlCurrBidFxRate,                                                    656) /*!< 656 (float FIX.4.3) Foreign exchange rate used to compute the bid "SettlCurrAmt" (119) from Currency (15) to SettlCurrency (120)*/ \
X(SettlCurrOfferFxRate,                                                  657) /*!< 657 (float FIX.4.3) Foreign exchange rate used to compute the offer "SettlCurrAmt" (119) from Currency (15) to SettlCurrency (120)*/ \
X(QuoteRequestRejectReason,                                              658) /*!< 658 (int FIX.4.3) Reason Quote was rejected:*/ \
X(SideComplianceID,                                                      659) /*!< 659 (String FIX.4.3) ID within repeating group of sides which is used to represent this transaction for compliance purposes (e.g. OATS reporting).*/ \
X(AcctIDSource,                                                          660) /*!< 660 (int FIX.4.4) Used to identify the source of the Account (1) code. This is especially useful if the account is a new account that the Respondent may not have setup yet in their system.*/ \
X(AllocAcctIDSource,                                                     661) /*!< 661 (int FIX.4.4) Used to identify the source of the AllocAccount (79) code. \
 \
See AcctIDSource (660) for valid values.*/ \
X(BenchmarkPrice,                                                        662) /*!< 662 (Price FIX.4.4) Specifies the price of the benchmark.*/ \
X(BenchmarkPriceType,                                                    663) /*!< 663 (int FIX.4.4) Identifies type of BenchmarkPrice (662). \
 \
See PriceType (423) for valid values.*/ \
X(ConfirmID,                                                             664) /*!< 664 (String FIX.4.4) Message reference for Confirmation*/ \
X(ConfirmStatus,                                                         665) /*!< 665 (int FIX.4.4) Identifies the status of the Confirmation.*/ \
X(ConfirmTransType,                                                      666) /*!< 666 (int FIX.4.4) Identifies the Confirmation transaction type.*/ \
X(ContractSettlMonth,                                                    667) /*!< 667 (MonthYear FIX.4.4) Specifies when the contract (i.e. MBS/TBA) will settle.*/ \
X(DeliveryForm,                                                          668) /*!< 668 (int FIX.4.4) Identifies the form of delivery.*/ \
X(LastParPx,                                                             669) /*!< 669 (Price FIX.4.4) Last price expressed in percent-of-par. Conditionally required for Fixed Income trades when LastPx (31) is expressed in Yield, Spread, Discount or any other type. \
 \
Usage: Execution Report and Allocation Report repeating executions block (from sellside).*/ \
X(NoLegAllocs,                                                           670) /*!< 670 (NumInGroup FIX.4.4) Number of Allocations for the leg*/ \
X(LegAllocAccount,                                                       671) /*!< 671 (String FIX.4.4) Allocation Account for the leg \
 \
See AllocAccount (79) for description and valid values.*/ \
X(LegIndividualAllocID,                                                  672) /*!< 672 (String FIX.4.4) Reference for the individual allocation ticket \
 \
See IndividualAllocID (467) for description and valid values.*/ \
X(LegAllocQty,                                                           673) /*!< 673 (Qty FIX.4.4) Leg allocation quantity. \
 \
See AllocQty (80) for description and valid values.*/ \
X(LegAllocAcctIDSource,                                                  674) /*!< 674 (String FIX.4.4) The source of the LegAllocAccount (671) \
 \
See AllocAcctIDSource (661) for description and valid values.*/ \
X(LegSettlCurrency,                                                      675) /*!< 675 (Currency FIX.4.4) Identifies settlement currency for the Leg. \
 \
See SettlCurrency (20) for description and valid values*/ \
X(LegBenchmarkCurveCurrency,                                             676) /*!< 676 (Currency FIX.4.4) LegBenchmarkPrice (679) currency \
 \
See BenchmarkCurveCurrency (220) for description and valid values.*/ \
X(LegBenchmarkCurveName,                                                 677) /*!< 677 (String FIX.4.4) Name of the Leg Benchmark Curve. \
 \
See BenchmarkCurveName (22) for description and valid values.*/ \
X(LegBenchmarkCurvePoint,                                                678) /*!< 678 (String FIX.4.4) Identifies the point on the Leg Benchmark Curve. \
 \
See BenchmarkCurvePoint (222) for description and valid values.*/ \
X(LegBenchmarkPrice,                                                     679) /*!< 679 (Price FIX.4.4) Used to identify the price of the benchmark security. \
 \
See BenchmarkPrice (662) for description and valid values.*/ \
X(LegBenchmarkPriceType,                                                 680) /*!< 680 (int FIX.4.4) The price type of the LegBenchmarkPrice(679).*/ \
X(LegBidPx,                                                              681) /*!< 681 (Price FIX.4.4) Bid price of this leg. \
 \
See BidPx (32) for description and valid values.*/ \
X(LegIOIQty,                                                             682) /*!< 682 (String FIX.4.4) Leg-specific IOI quantity. \
 \
See IOIQty (27) for description and valid values*/ \
X(NoLegStipulations,                                                     683) /*!< 683 (NumInGroup FIX.4.4) Number of leg stipulation entries*/ \
X(LegOfferPx,                                                            684) /*!< 684 (Price FIX.4.4) Offer price of this leg. \
 \
See OfferPx (133) for description and valid values*/ \
X(LegOrderQty,                                                           685) /*!< 685 (Qty FIX.4.4) Quantity ordered of this leg. \
 \
See OrderQty (38) for description and valid values*/ \
X(LegPriceType,                                                          686) /*!< 686 (int FIX.4.4) The price type of the LegBidPx (681) and/or LegOfferPx (684). \
 \
See PriceType (423) for description and valid values*/ \
X(LegQty,                                                                687) /*!< 687 (Qty FIX.4.4) This field is deprecated and has been replaced by LegOrderQty(865). This field will likely be removed from the FIX standard in a future version.*/ \
X(LegStipulationType,                                                    688) /*!< 688 (String FIX.4.4) For Fixed Income, type of Stipulation for this leg. \
 \
See StipulationType (233) for description and valid values*/ \
X(LegStipulationValue,                                                   689) /*!< 689 (String FIX.4.4) For Fixed Income, value of stipulation. \
 \
See StipulationValue (234) for description and valid values*/ \
X(LegSwapType,                                                           690) /*!< 690 (int FIX.4.4) For Fixed Income, used instead of LegOrderQty(685) to requests the respondent to calculate the quantity based on the quantity on the opposite side of the swap.*/ \
X(Pool,                                                                  691) /*!< 691 (String FIX.4.4) For Fixed Income, identifies MBS / ABS pool.*/ \
X(QuotePriceType,                                                        692) /*!< 692 (int FIX.4.4) Code to represent price type requested in Quote. \
 \
If the Quote Request is for a Swap, values 1-8 apply to all legs.*/ \
X(QuoteRespID,                                                           693) /*!< 693 (String FIX.4.4) Message reference for Quote Response*/ \
X(QuoteRespType,                                                         694) /*!< 694 (int FIX.4.4) Identifies the type of Quote Response.*/ \
X(QuoteQualifier,                                                        695) /*!< 695 (char FIX.4.4) Code to qualify Quote use and other aspects of price negotiation.*/ \
X(YieldRedemptionDate,                                                   696) /*!< 696 (LocalMktDate FIX.4.4) Date to which the yield has been calculated (i.e. maturity, par call or current call, pre-refunded date).*/ \
X(YieldRedemptionPrice,                                                  697) /*!< 697 (Price FIX.4.4) Price to which the yield has been calculated.*/ \
X(YieldRedemptionPriceType,                                              698) /*!< 698 (int FIX.4.4) The price type of the YieldRedemptionPrice (697) \
 \
See PriceType (423) for description and valid values.*/ \
X(BenchmarkSecurityID,                                                   699) /*!< 699 (String FIX.4.4) The identifier of the benchmark security, e.g. Treasury against Corporate bond. \
 \
See SecurityID (tag 48) for description and valid values.*/ \
X(ReversalIndicator,                                                     700) /*!< 700 (Boolean FIX.4.4) Indicates a trade that reverses a previous trade.*/ \
X(YieldCalcDate,                                                         701) /*!< 701 (LocalMktDate FIX.4.4) Include as needed to clarify yield irregularities associated with date, e.g. when it falls on a non-business day.*/ \
X(NoPositions,                                                           702) /*!< 702 (NumInGroup FIX.4.4) Number of position entries.*/ \
X(PosType,                                                               703) /*!< 703 (String FIX.4.4) Used to identify the type of quantity that is being returned.*/ \
X(LongQty,                                                               704) /*!< 704 (Qty FIX.4.4) Long quantity.*/ \
X(ShortQty,                                                              705) /*!< 705 (Qty FIX.4.4) Short quantity.*/ \
X(PosQtyStatus,                                                          706) /*!< 706 (int FIX.4.4) Status of this position.*/ \
X(PosAmtType,                                                            707) /*!< 707 (String FIX.4.4) Type of Position amount*/ \
X(PosAmt,                                                                708) /*!< 708 (Amt FIX.4.4) Position amount*/ \
X(PosTransType,                                                          709) /*!< 709 (int FIX.4.4) Identifies the type of position transaction.*/ \
X(PosReqID,                                                              710) /*!< 710 (String FIX.4.4) Unique identifier for the position maintenance request as assigned by the submitter*/ \
X(NoUnderlyings,                                                         711) /*!< 711 (NumInGroup FIX.4.4) Number of underlying legs that make up the security.*/ \
X(PosMaintAction,                                                        712) /*!< 712 (int FIX.4.4) Maintenance Action to be performed.*/ \
X(OrigPosReqRefID,                                                       713) /*!< 713 (String FIX.4.4) Reference to the PosReqID (710) of a previous maintenance request that is being replaced or canceled.*/ \
X(PosMaintRptRefID,                                                      714) /*!< 714 (String FIX.4.4) Reference to a PosMaintRptID (721) from a previous Position Maintenance Report that is being replaced or canceled.*/ \
X(ClearingBusinessDate,                                                  715) /*!< 715 (LocalMktDate FIX.4.4) The business date for which the trade is expected to be cleared.*/ \
X(SettlSessID,                                                           716) /*!< 716 (String FIX.4.4) Identifies a specific settlement session*/ \
X(SettlSessSubID,                                                        717) /*!< 717 (String FIX.4.4) SubID value associated with SettlSessID(716)*/ \
X(AdjustmentType,                                                        718) /*!< 718 (int FIX.4.4) Type of adjustment to be applied. Used for Position Change Submission (PCS), Position Adjustment (PAJ), and Customer Gross Margin (CGM).*/ \
X(ContraryInstructionIndicator,                                          719) /*!< 719 (Boolean FIX.4.4) Used to indicate when a contrary instruction for exercise or abandonment is being submitted*/ \
X(PriorSpreadIndicator,                                                  720) /*!< 720 (Boolean FIX.4.4) Indicates if requesting a rollover of prior day's spread submissions.*/ \
X(PosMaintRptID,                                                         721) /*!< 721 (String FIX.4.4) Unique identifier for this position report*/ \
X(PosMaintStatus,                                                        722) /*!< 722 (int FIX.4.4) Status of Position Maintenance Request*/ \
X(PosMaintResult,                                                        723) /*!< 723 (int FIX.4.4) Result of Position Maintenance Request.*/ \
X(PosReqType,                                                            724) /*!< 724 (int FIX.4.4) Used to specify the type of position request being made.*/ \
X(ResponseTransportType,                                                 725) /*!< 725 (int FIX.4.4) Identifies how the response to the request should be transmitted. \
 \
Details specified via ResponseDestination (726).*/ \
X(ResponseDestination,                                                   726) /*!< 726 (String FIX.4.4) URI (Uniform Resource Identifier) for details) or other pre-arranged value. Used in conjunction with ResponseTransportType (725) value of Out-of-Band to identify the out-of-band destination. \
 \
See "Appendix 6-B FIX Fields Based Upon Other Standards"*/ \
X(TotalNumPosReports,                                                    727) /*!< 727 (int FIX.4.4) Total number of Position Reports being returned.*/ \
X(PosReqResult,                                                          728) /*!< 728 (int FIX.4.4) Result of Request for Positions.*/ \
X(PosReqStatus,                                                          729) /*!< 729 (int FIX.4.4) Status of Request for Positions*/ \
X(SettlPrice,                                                            730) /*!< 730 (Price FIX.4.4) Settlement price*/ \
X(SettlPriceType,                                                        731) /*!< 731 (int FIX.4.4) Type of settlement price*/ \
X(UnderlyingSettlPrice,                                                  732) /*!< 732 (Price FIX.4.4) Underlying security's SettlPrice. \
 \
See SettlPrice (730) field for description*/ \
X(UnderlyingSettlPriceType,                                              733) /*!< 733 (int FIX.4.4) Underlying security's SettlPriceType. \
 \
See SettlPriceType (731) field for description*/ \
X(PriorSettlPrice,                                                       734) /*!< 734 (Price FIX.4.4) Previous settlement price*/ \
X(NoQuoteQualifiers,                                                     735) /*!< 735 (NumInGroup FIX.4.4) Number of repeating groups of QuoteQualifiers (695).*/ \
X(AllocSettlCurrency,                                                    736) /*!< 736 (Currency FIX.4.4) Currency code of settlement denomination for a specific AllocAccount (79).*/ \
X(AllocSettlCurrAmt,                                                     737) /*!< 737 (Amt FIX.4.4) Total amount due expressed in settlement currency (includes the effect of the forex transaction) for a specific AllocAccount (79).*/ \
X(InterestAtMaturity,                                                    738) /*!< 738 (Amt FIX.4.4) Amount of interest (i.e. lump-sum) at maturity.*/ \
X(LegDatedDate,                                                          739) /*!< 739 (LocalMktDate FIX.4.4) The effective date of a new securities issue determined by its underwriters. Often but not always the same as the Issue Date and the Interest Accrual Date*/ \
X(LegPool,                                                               740) /*!< 740 (String FIX.4.4) For Fixed Income, identifies MBS / ABS pool for a specific leg of a multi-leg instrument. \
 \
See Pool (691) for description and valid values.*/ \
X(AllocInterestAtMaturity,                                               741) /*!< 741 (Amt FIX.4.4) Amount of interest (i.e. lump-sum) at maturity at the account-level.*/ \
X(AllocAccruedInterestAmt,                                               742) /*!< 742 (Amt FIX.4.4) Amount of Accrued Interest for convertible bonds and fixed income at the allocation-level.*/ \
X(DeliveryDate,                                                          743) /*!< 743 (LocalMktDate FIX.4.4) Date of delivery.*/ \
X(AssignmentMethod,                                                      744) /*!< 744 (char FIX.4.4) Method by which short positions are assigned to an exercise notice during exercise and assignment processing*/ \
X(AssignmentUnit,                                                        745) /*!< 745 (Qty FIX.4.4) Quantity Increment used in performing assignment.*/ \
X(OpenInterest,                                                          746) /*!< 746 (Amt FIX.4.4) Open interest that was eligible for assignment.*/ \
X(ExerciseMethod,                                                        747) /*!< 747 (char FIX.4.4) Exercise Method used to in performing assignment.*/ \
X(TotNumTradeReports,                                                    748) /*!< 748 (int FIX.4.4) Total number of trade reports returned.*/ \
X(TradeRequestResult,                                                    749) /*!< 749 (int FIX.4.4) Result of Trade Request*/ \
X(TradeRequestStatus,                                                    750) /*!< 750 (int FIX.4.4) Status of Trade Request.*/ \
X(TradeReportRejectReason,                                               751) /*!< 751 (int FIX.4.4) Reason Trade Capture Request was rejected. \
 \
100+ Reserved and available for bi-laterally agreed upon user-defined values.*/ \
X(SideMultiLegReportingType,                                             752) /*!< 752 (int FIX.4.4) Used to indicate if the side being reported on Trade Capture Report represents a leg of a multileg instrument or a single security.*/ \
X(NoPosAmt,                                                              753) /*!< 753 (NumInGroup FIX.4.4) Number of position amount entries.*/ \
X(AutoAcceptIndicator,                                                   754) /*!< 754 (Boolean FIX.4.4) Identifies whether or not an allocation has been automatically accepted on behalf of the Carry Firm by the Clearing House.*/ \
X(AllocReportID,                                                         755) /*!< 755 (String FIX.4.4) Unique identifier for Allocation Report message.*/ \
X(NoNested2PartyIDs,                                                     756) /*!< 756 (NumInGroup FIX.4.4) Number of Nested2PartyID (757), Nested2PartyIDSource (758), and Nested2PartyRole (759) entries*/ \
X(Nested2PartyID,                                                        757) /*!< 757 (String FIX.4.4) PartyID value within a "second instance" Nested repeating group. \
 \
Same values as PartyID (448)*/ \
X(Nested2PartyIDSource,                                                  758) /*!< 758 (char FIX.4.4) PartyIDSource value within a "second instance" Nested repeating group. \
 \
Same values as PartyIDSource (447)*/ \
X(Nested2PartyRole,                                                      759) /*!< 759 (int FIX.4.4) PartyRole value within a "second instance" Nested repeating group. \
 \
Same values as PartyRole (452)*/ \
X(Nested2PartySubID,                                                     760) /*!< 760 (String FIX.4.4) PartySubID value within a "second instance" Nested repeating group. \
 \
Same values as PartySubID (523)*/ \
X(BenchmarkSecurityIDSource,                                             761) /*!< 761 (String FIX.4.4) Identifies class or source of the BenchmarkSecurityID (699) value. Required if BenchmarkSecurityID is specified. \
 \
Same values as the SecurityIDSource (22) field*/ \
X(SecuritySubType,                                                       762) /*!< 762 (String FIX.4.4) Sub-type qualification/identification of the SecurityType. As an example for SecurityType(167)="REPO", the SecuritySubType="General Collateral" can be used to further specify the type of REPO. \
 \
If SecuritySubType is used, then SecurityType is required. \
 \
For SecurityType="MLEG" a name of the option or futures strategy name can be specified, such as "Calendar", "Vertical", "Butterfly". \
 \
For SecurityType(167)="OPT" the subclassification can be specified, such as "Asian". \
 \
For SecurityType(167)="SWAPTION" a value of "Straddle" is used to identify a straddle swaption.*/ \
X(UnderlyingSecuritySubType,                                             763) /*!< 763 (String FIX.4.4) Underlying security's SecuritySubType. \
 \
See SecuritySubType (762) field for description*/ \
X(LegSecuritySubType,                                                    764) /*!< 764 (String FIX.4.4) SecuritySubType of the leg instrument. \
 \
See SecuritySubType (762) field for description*/ \
X(AllowableOneSidednessPct,                                              765) /*!< 765 (Percentage FIX.4.4) The maximum percentage that execution of one side of a program trade can exceed execution of the other.*/ \
X(AllowableOneSidednessValue,                                            766) /*!< 766 (Amt FIX.4.4) The maximum amount that execution of one side of a program trade can exceed execution of the other.*/ \
X(AllowableOneSidednessCurr,                                             767) /*!< 767 (Currency FIX.4.4) The currency that AllowableOneSidednessValue (766) is expressed in if AllowableOneSidednessValue is used.*/ \
X(NoTrdRegTimestamps,                                                    768) /*!< 768 (NumInGroup FIX.4.4) Number of TrdRegTimestamp (769) entries*/ \
X(TrdRegTimestamp,                                                       769) /*!< 769 (UTCTimestamp FIX.4.4) Traded / Regulatory timestamp value. Use to store time information required by government regulators or self regulatory organizations (such as an exchange or clearing house).*/ \
X(TrdRegTimestampType,                                                   770) /*!< 770 (int FIX.4.4) Trading / Regulatory timestamp type. \
 \
Note of applicability: Values are required in US futures markets by the CFTC to support computerized trade reconstruction, and required by MiFID II / MiFIR for transaction reporting and publication. \
 \
(see Volume : "Glossary" for value definitions) \
 \
*/ \
X(TrdRegTimestampOrigin,                                                 771) /*!< 771 (String FIX.4.4) Text which identifies the "origin" (i.e. system which was used to generate the time stamp) for the Traded / Regulatory timestamp value.*/ \
X(ConfirmRefID,                                                          772) /*!< 772 (String FIX.4.4) Reference identifier to be used with ConfirmTransType (666) = Replace or Cancel*/ \
X(ConfirmType,                                                           773) /*!< 773 (int FIX.4.4) Identifies the type of Confirmation message being sent.*/ \
X(ConfirmRejReason,                                                      774) /*!< 774 (int FIX.4.4) Identifies the reason for rejecting a Confirmation.*/ \
X(BookingType,                                                           775) /*!< 775 (int FIX.4.4) Method for booking out this order. Used when notifying a broker that an order to be settled by that broker is to be booked out as an OTC derivative (e.g. CFD or similar).*/ \
X(IndividualAllocRejCode,                                                776) /*!< 776 (int FIX.4.4) Identified reason for rejecting an individual AllocAccount (79) detail. \
 \
Same values as AllocRejCode (88)*/ \
X(SettlInstMsgID,                                                        777) /*!< 777 (String FIX.4.4) Unique identifier for Settlement Instruction message.*/ \
X(NoSettlInst,                                                           778) /*!< 778 (NumInGroup FIX.4.4) Number of settlement instructions within repeating group.*/ \
X(LastUpdateTime,                                                        779) /*!< 779 (UTCTimestamp FIX.4.4) Timestamp of last update to data item (or creation if no updates made since creation).*/ \
X(AllocSettlInstType,                                                    780) /*!< 780 (int FIX.4.4) Used to indicate whether settlement instructions are provided on an allocation instruction message, and if not, how they are to be derived.*/ \
X(NoSettlPartyIDs,                                                       781) /*!< 781 (NumInGroup FIX.4.4) Number of SettlPartyID (782), SettlPartyIDSource (783), and SettlPartyRole (784) entries*/ \
X(SettlPartyID,                                                          782) /*!< 782 (String FIX.4.4) PartyID value within a settlement parties component. Nested repeating group. \
 \
Same values as PartyID (448)*/ \
X(SettlPartyIDSource,                                                    783) /*!< 783 (char FIX.4.4) PartyIDSource value within a settlement parties component. \
 \
Same values as PartyIDSource (447)*/ \
X(SettlPartyRole,                                                        784) /*!< 784 (int FIX.4.4) PartyRole value within a settlement parties component. \
 \
Same values as PartyRole (452)*/ \
X(SettlPartySubID,                                                       785) /*!< 785 (String FIX.4.4) PartySubID value within a settlement parties component. \
 \
Same values as PartySubID (523)*/ \
X(SettlPartySubIDType,                                                   786) /*!< 786 (int FIX.4.4) Type of SettlPartySubID (785) value. \
 \
Same values as PartySubIDType (803)*/ \
X(DlvyInstType,                                                          787) /*!< 787 (char FIX.4.4) Used to indicate whether a delivery instruction is used for securities or cash settlement.*/ \
X(TerminationType,                                                       788) /*!< 788 (int FIX.4.4) Type of financing termination.*/ \
X(NextExpectedMsgSeqNum,                                                 789) /*!< 789 (SeqNum FIX.4.4) Next expected MsgSeqNum value to be received.*/ \
X(OrdStatusReqID,                                                        790) /*!< 790 (String FIX.4.4) Can be used to uniquely identify a specific Order Status Request message.*/ \
X(SettlInstReqID,                                                        791) /*!< 791 (String FIX.4.4) Unique ID of settlement instruction request message*/ \
X(SettlInstReqRejCode,                                                   792) /*!< 792 (int FIX.4.4) Identifies reason for rejection (of a settlement instruction request message).*/ \
X(SecondaryAllocID,                                                      793) /*!< 793 (String FIX.4.4) Secondary allocation identifier. Unlike the AllocID (70), this can be shared across a number of allocation instruction or allocation report messages, thereby making it possible to pass an identifier for an original allocation message on multiple messages (e.g. from one party to a second to a third, across cancel and replace messages etc.).*/ \
X(AllocReportType,                                                       794) /*!< 794 (int FIX.4.4) Describes the specific type or purpose of an Allocation Report message*/ \
X(AllocReportRefID,                                                      795) /*!< 795 (String FIX.4.4) Reference identifier to be used with AllocTransType (7) = Replace or Cancel*/ \
X(AllocCancReplaceReason,                                                796) /*!< 796 (int FIX.4.4) Reason for cancelling or replacing an Allocation Instruction or Allocation Report message*/ \
X(CopyMsgIndicator,                                                      797) /*!< 797 (Boolean FIX.4.4) Indicates whether or not this message is a drop copy of another message.*/ \
X(AllocAccountType,                                                      798) /*!< 798 (int FIX.4.4) Type of account associated with a confirmation or other trade-level message*/ \
X(OrderAvgPx,                                                            799) /*!< 799 (Price FIX.4.4) Average price for a specific order*/ \
X(OrderBookingQty,                                                       800) /*!< 800 (Qty FIX.4.4) Quantity of the order that is being booked out as part of an Allocation Instruction or Allocation Report message*/ \
X(NoSettlPartySubIDs,                                                    801) /*!< 801 (NumInGroup FIX.4.4) Number of SettlPartySubID (785) and SettlPartySubIDType (786) entries*/ \
X(NoPartySubIDs,                                                         802) /*!< 802 (NumInGroup FIX.4.4) Number of PartySubID (523)and PartySubIDType (803) entries*/ \
X(PartySubIDType,                                                        803) /*!< 803 (int FIX.4.4) Type of PartySubID(523) value.*/ \
X(NoNestedPartySubIDs,                                                   804) /*!< 804 (NumInGroup FIX.4.4) Number of NestedPartySubID (545) and NestedPartySubIDType (805) entries*/ \
X(NestedPartySubIDType,                                                  805) /*!< 805 (int FIX.4.4) Type of NestedPartySubID (545) value. \
 \
Same values as PartySubIDType (803)*/ \
X(NoNested2PartySubIDs,                                                  806) /*!< 806 (NumInGroup FIX.4.4) Number of Nested2PartySubID (760) and Nested2PartySubIDType (807) entries. Second instance of &lt;NestedParties&gt;.*/ \
X(Nested2PartySubIDType,                                                 807) /*!< 807 (int FIX.4.4) Type of Nested2PartySubID (760) value. Second instance of &lt;NestedParties&gt;. \
 \
Same values as PartySubIDType (803)*/ \
X(AllocIntermedReqType,                                                  808) /*!< 808 (int FIX.4.4) Response to allocation to be communicated to a counterparty through an intermediary, i.e. clearing house. Used in conjunction with AllocType = "Request to Intermediary" and AllocReportType = "Request to Intermediary"*/ \
X(NoUsernames,                                                           809) /*!< 809 (NumInGroup FIX.4.4) Number of Usernames to which this this response is directed*/ \
X(UnderlyingPx,                                                          810) /*!< 810 (Price FIX.4.4) Underlying price associate with a derivative instrument.*/ \
X(PriceDelta,                                                            811) /*!< 811 (float FIX.4.4) The rate of change in the price of a derivative with respect to the movement in the price of the underlying instrument(s) upon which the derivative instrument price is based. \
 \
This value is normally between -1.0 and 1.0.*/ \
X(ApplQueueMax,                                                          812) /*!< 812 (int FIX.4.4) Used to specify the maximum number of application messages that can be queued bedore a corrective action needs to take place to resolve the queuing issue.*/ \
X(ApplQueueDepth,                                                        813) /*!< 813 (int FIX.4.4) Current number of application messages that were queued at the time that the message was created by the counterparty.*/ \
X(ApplQueueResolution,                                                   814) /*!< 814 (int FIX.4.4) Resolution taken when ApplQueueDepth (813) exceeds ApplQueueMax (812) or system specified maximum queue size.*/ \
X(ApplQueueAction,                                                       815) /*!< 815 (int FIX.4.4) Action to take to resolve an application message queue (backlog).*/ \
X(NoAltMDSource,                                                         816) /*!< 816 (NumInGroup FIX.4.4) Number of alternative market data sources*/ \
X(AltMDSourceID,                                                         817) /*!< 817 (String FIX.4.4) Session layer source for market data \
 \
(For the standard FIX session layer, this would be the TargetCompID (56) where market data can be obtained).*/ \
X(SecondaryTradeReportID,                                                818) /*!< 818 (String FIX.4.4) Secondary trade report identifier - can be used to associate an additional identifier with a trade.*/ \
X(AvgPxIndicator,                                                        819) /*!< 819 (int FIX.4.4) Average pricing indicator.*/ \
X(TradeLinkID,                                                           820) /*!< 820 (String FIX.4.4) Used to link a group of trades together.*/ \
X(OrderInputDevice,                                                      821) /*!< 821 (String FIX.4.4) Specific device number, terminal number or station where order was entered*/ \
X(UnderlyingTradingSessionID,                                            822) /*!< 822 (String FIX.4.4) Trading Session in which the underlying instrument trades*/ \
X(UnderlyingTradingSessionSubID,                                         823) /*!< 823 (String FIX.4.4) Trading Session sub identifier in which the underlying instrument trades*/ \
X(TradeLegRefID,                                                         824) /*!< 824 (String FIX.4.4) Reference to the leg of a multileg instrument to which this trade refers*/ \
X(ExchangeRule,                                                          825) /*!< 825 (String FIX.4.4) Used to report any exchange rules that apply to this trade. \
 \
Primarily intended for US futures markets. Certain trading practices are permitted by the CFTC, such as large lot trading, block trading, all or none trades. If the rules are used, the exchanges are required to indicate these rules on the trade.*/ \
X(TradeAllocIndicator,                                                   826) /*!< 826 (int FIX.4.4) Identifies if, and how, the trade is to be allocated or split.*/ \
X(ExpirationCycle,                                                       827) /*!< 827 (int FIX.4.4) Part of trading cycle when an instrument expires. Field is applicable for derivatives.*/ \
X(TrdType,                                                               828) /*!< 828 (int FIX.4.4) Type of trade.*/ \
X(TrdSubType,                                                            829) /*!< 829 (int FIX.4.4) Further qualification to the trade type*/ \
X(TransferReason,                                                        830) /*!< 830 (String FIX.4.4) Reason trade is being transferred*/ \
X(TotNumAssignmentReports,                                               832) /*!< 832 (int FIX.4.4) Total Number of Assignment Reports being returned to a firm*/ \
X(AsgnRptID,                                                             833) /*!< 833 (String FIX.4.4) Unique identifier for the Assignment Report*/ \
X(ThresholdAmount,                                                       834) /*!< 834 (PriceOffset FIX.4.4) Amount that a position has to be in the money before it is exercised.*/ \
X(PegMoveType,                                                           835) /*!< 835 (int FIX.4.4) Describes whether peg is static or floats*/ \
X(PegOffsetType,                                                         836) /*!< 836 (int FIX.4.4) Type of Peg Offset value*/ \
X(PegLimitType,                                                          837) /*!< 837 (int FIX.4.4) Type of Peg Limit*/ \
X(PegRoundDirection,                                                     838) /*!< 838 (int FIX.4.4) If the calculated peg price is not a valid tick price, specifies whether to round the price to be more or less aggressive*/ \
X(PeggedPrice,                                                           839) /*!< 839 (Price FIX.4.4) The price the order is currently pegged at*/ \
X(PegScope,                                                              840) /*!< 840 (int FIX.4.4) The scope of the peg*/ \
X(DiscretionMoveType,                                                    841) /*!< 841 (int FIX.4.4) Describes whether discretionay price is static or floats*/ \
X(DiscretionOffsetType,                                                  842) /*!< 842 (int FIX.4.4) Type of Discretion Offset value*/ \
X(DiscretionLimitType,                                                   843) /*!< 843 (int FIX.4.4) Type of Discretion Limit*/ \
X(DiscretionRoundDirection,                                              844) /*!< 844 (int FIX.4.4) If the calculated discretionary price is not a valid tick price, specifies whether to round the price to be more or less aggressive*/ \
X(DiscretionPrice,                                                       845) /*!< 845 (Price FIX.4.4) The current discretionary price of the order*/ \
X(DiscretionScope,                                                       846) /*!< 846 (int FIX.4.4) The scope of the discretion*/ \
X(TargetStrategy,                                                        847) /*!< 847 (int FIX.4.4) The target strategy of the order \
 \
1000+ = Reserved and available for bi-laterally agreed upon user defined values*/ \
X(TargetStrategyParameters,                                              848) /*!< 848 (String FIX.4.4) Field to allow further specification of the TargetStrategy - usage to be agreed between counterparties*/ \
X(ParticipationRate,                                                     849) /*!< 849 (Percentage FIX.4.4) For a TargetStrategy=Participate order specifies the target particpation rate. For other order types this is a volume limit (i.e. do not be more than this percent of the market volume)*/ \
X(TargetStrategyPerformance,                                             850) /*!< 850 (float FIX.4.4) For communication of the performance of the order versus the target strategy*/ \
X(LastLiquidityInd,                                                      851) /*!< 851 (int FIX.4.4) Indicator to identify whether this fill was a result of a liquidity provider providing or liquidity taker taking the liquidity. */ \
X(PublishTrdIndicator,                                                   852) /*!< 852 (Boolean FIX.4.4) Indicates if a trade should be reported via a market reporting service.*/ \
X(ShortSaleReason,                                                       853) /*!< 853 (int FIX.4.4) Reason for short sale.*/ \
X(QtyType,                                                               854) /*!< 854 (int FIX.4.4) Type of quantity specified in quantity field. ContractMultiplier (tag 231) is required when QtyType = 1 (Contracts). UnitOfMeasure (tag 996) and TimeUnit (tag 997) are required when QtyType =  2 (Units of Measure per Time Unit).*/ \
X(SecondaryTrdType,                                                      855) /*!< 855 (int FIX.4.4) Additional TrdType(828) assigned to a trade by trade match system.*/ \
X(TradeReportType,                                                       856) /*!< 856 (int FIX.4.4) Type of Trade Report*/ \
X(AllocNoOrdersType,                                                     857) /*!< 857 (int FIX.4.4) Indicates how the orders being booked and allocated by an AllocationInstruction or AllocationReport message are identified, e.g. by explicit definition in the OrdAllocGrp or ExecAllocGrp components, or not identified explicitly.*/ \
X(SharedCommission,                                                      858) /*!< 858 (Amt FIX.4.4) Commission to be shared with a third party, e.g. as part of a directed brokerage commission sharing arrangement.*/ \
X(ConfirmReqID,                                                          859) /*!< 859 (String FIX.4.4) Unique identifier for a Confirmation Request message*/ \
X(AvgParPx,                                                              860) /*!< 860 (Price FIX.4.4) Used to express average price as percent of par (used where AvgPx field is expressed in some other way)*/ \
X(ReportedPx,                                                            861) /*!< 861 (Price FIX.4.4) Reported price (used to differentiate from AvgPx on a confirmation of a marked-up or marked-down principal trade)*/ \
X(NoCapacities,                                                          862) /*!< 862 (NumInGroup FIX.4.4) Number of repeating OrderCapacity entries.*/ \
X(OrderCapacityQty,                                                      863) /*!< 863 (Qty FIX.4.4) Quantity executed under a specific OrderCapacity (e.g. quantity executed as agent, quantity executed as principal)*/ \
X(NoEvents,                                                              864) /*!< 864 (NumInGroup FIX.4.4) Number of repeating EventType entries.*/ \
X(EventType,                                                             865) /*!< 865 (int FIX.4.4) Code to represent the type of event*/ \
X(EventDate,                                                             866) /*!< 866 (LocalMktDate FIX.4.4) Date of event*/ \
X(EventPx,                                                               867) /*!< 867 (Price FIX.4.4) Predetermined price of issue at event, if applicable*/ \
X(EventText,                                                             868) /*!< 868 (String FIX.4.4) Comments related to the event.*/ \
X(PctAtRisk,                                                             869) /*!< 869 (Percentage FIX.4.4) Percent at risk due to lowest possible call.*/ \
X(NoInstrAttrib,                                                         870) /*!< 870 (NumInGroup FIX.4.4) Number of repeating InstrAttribType entries.*/ \
X(InstrAttribType,                                                       871) /*!< 871 (int FIX.4.4) Code to represent the type of instrument attribute*/ \
X(InstrAttribValue,                                                      872) /*!< 872 (String FIX.4.4) Attribute value appropriate to the InstrAttribType (87) field.*/ \
X(DatedDate,                                                             873) /*!< 873 (LocalMktDate FIX.4.4) The effective date of a new securities issue determined by its underwriters. Often but not always the same as the Issue Date and the Interest Accrual Date*/ \
X(InterestAccrualDate,                                                   874) /*!< 874 (LocalMktDate FIX.4.4) The start date used for calculating accrued interest on debt instruments which are being sold between interest payment dates. Often but not always the same as the Issue Date and the Dated Date*/ \
X(CPProgram,                                                             875) /*!< 875 (int FIX.4.4) The program under which a commercial paper offering is exempt from SEC registration identified by the paragraph number(s) within the US Securities Act of 1933 or as identified below.*/ \
X(CPRegType,                                                             876) /*!< 876 (String FIX.4.4) The description of commercial paper registration or rule under which exempt commercial paper is offered. For example "144a", "Tax Exempt" or "REG. S".*/ \
X(UnderlyingCPProgram,                                                   877) /*!< 877 (int FIX.4.4) The program under which the underlying commercial paper is issued*/ \
X(UnderlyingCPRegType,                                                   878) /*!< 878 (String FIX.4.4) The registration type of the underlying commercial paper issuance*/ \
X(UnderlyingQty,                                                         879) /*!< 879 (Qty FIX.4.4) Unit amount of the underlying security (par, shares, currency, etc.)*/ \
X(TrdMatchID,                                                            880) /*!< 880 (String FIX.4.4) Identifier assigned to a trade by a matching system.*/ \
X(SecondaryTradeReportRefID,                                             881) /*!< 881 (String FIX.4.4) Used to refer to a previous SecondaryTradeReportRefID when amending the transaction (cancel, replace, release, or reversal).*/ \
X(UnderlyingDirtyPrice,                                                  882) /*!< 882 (Price FIX.4.4) Price (percent-of-par or per unit) of the underlying security or basket. "Dirty" means it includes accrued interest*/ \
X(UnderlyingEndPrice,                                                    883) /*!< 883 (Price FIX.4.4) Price (percent-of-par or per unit) of the underlying security or basket at the end of the agreement.*/ \
X(UnderlyingStartValue,                                                  884) /*!< 884 (Amt FIX.4.4) Currency value attributed to this collateral at the start of the agreement*/ \
X(UnderlyingCurrentValue,                                                885) /*!< 885 (Amt FIX.4.4) Currency value currently attributed to this collateral*/ \
X(UnderlyingEndValue,                                                    886) /*!< 886 (Amt FIX.4.4) Currency value attributed to this collateral at the end of the agreement*/ \
X(NoUnderlyingStips,                                                     887) /*!< 887 (NumInGroup FIX.4.4) Number of underlying stipulation entries*/ \
X(UnderlyingStipType,                                                    888) /*!< 888 (String FIX.4.4) Type of stipulation. \
 \
Same values as StipulationType (233)*/ \
X(UnderlyingStipValue,                                                   889) /*!< 889 (String FIX.4.4) Value of stipulation. \
 \
Same values as StipulationValue (234)*/ \
X(MaturityNetMoney,                                                      890) /*!< 890 (Amt FIX.4.4) Net Money at maturity if Zero Coupon and maturity value is different from par value*/ \
X(MiscFeeBasis,                                                          891) /*!< 891 (int FIX.4.4) Defines the unit for a miscellaneous fee.*/ \
X(TotNoAllocs,                                                           892) /*!< 892 (int FIX.4.4) Total number of NoAlloc entries across all messages. Should be the sum of all NoAllocs in each message that has repeating NoAlloc entries related to the same AllocID or AllocReportID. Used to support fragmentation.*/ \
X(LastFragment,                                                          893) /*!< 893 (Boolean FIX.4.4) Indicates whether this message is the last in a sequence of messages for those messages that support fragmentation, such as Allocation Instruction, Mass Quote, Security List, Derivative Security List*/ \
X(CollReqID,                                                             894) /*!< 894 (String FIX.4.4) Collateral Request Identifier*/ \
X(CollAsgnReason,                                                        895) /*!< 895 (int FIX.4.4) Reason for Collateral Assignment*/ \
X(CollInquiryQualifier,                                                  896) /*!< 896 (int FIX.4.4) Collateral inquiry qualifiers:*/ \
X(NoTrades,                                                              897) /*!< 897 (NumInGroup FIX.4.4) Number of trades in repeating group.*/ \
X(MarginRatio,                                                           898) /*!< 898 (Percentage FIX.4.4) The fraction of the cash consideration that must be collateralized, expressed as a percent. A MarginRatio of 02% indicates that the value of the collateral (after deducting for "haircut") must exceed the cash consideration by 2%.*/ \
X(MarginExcess,                                                          899) /*!< 899 (Amt FIX.4.4) Excess margin amount (deficit if value is negative)*/ \
X(TotalNetValue,                                                         900) /*!< 900 (Amt FIX.4.4) TotalNetValue is determined as follows: \
 \
At the initial collateral assignment TotalNetValue is the sum of (UnderlyingStartValue * (1-haircut)). \
 \
In a collateral substitution TotalNetValue is the sum of (UnderlyingCurrentValue * (1-haircut)). \
 \
For listed derivatives clearing margin management, this is the collateral value which equals (Market value * haircut)*/ \
X(CashOutstanding,                                                       901) /*!< 901 (Amt FIX.4.4) Starting consideration less repayments*/ \
X(CollAsgnID,                                                            902) /*!< 902 (String FIX.4.4) Collateral Assignment Identifier*/ \
X(CollAsgnTransType,                                                     903) /*!< 903 (int FIX.4.4) Collateral Assignment Transaction Type*/ \
X(CollRespID,                                                            904) /*!< 904 (String FIX.4.4) Collateral Response Identifier*/ \
X(CollAsgnRespType,                                                      905) /*!< 905 (int FIX.4.4) Type of collateral assignment response.*/ \
X(CollAsgnRejectReason,                                                  906) /*!< 906 (int FIX.4.4) Collateral Assignment Reject Reason*/ \
X(CollAsgnRefID,                                                         907) /*!< 907 (String FIX.4.4) Collateral Assignment Identifier to which a transaction refers*/ \
X(CollRptID,                                                             908) /*!< 908 (String FIX.4.4) Collateral Report Identifier*/ \
X(CollInquiryID,                                                         909) /*!< 909 (String FIX.4.4) Collateral Inquiry Identifier*/ \
X(CollStatus,                                                            910) /*!< 910 (int FIX.4.4) Collateral Status*/ \
X(TotNumReports,                                                         911) /*!< 911 (int FIX.4.4) Total number of reports returned in response to a request.*/ \
X(LastRptRequested,                                                      912) /*!< 912 (Boolean FIX.4.4) Indicates whether this message is the last report message in response to a request message, e.g. OrderMassStatusRequest(35=AF), TradeCaptureReportRequest(35=AD).*/ \
X(AgreementDesc,                                                         913) /*!< 913 (String FIX.4.4) The full name of the base standard agreement, annexes and amendments in place between the principals applicable to a financing transaction.  See http://www.fpml.org/coding-scheme/master-agreement-type for derivative values.*/ \
X(AgreementID,                                                           914) /*!< 914 (String FIX.4.4) A common reference to the applicable standing agreement between the counterparties to a financing transaction.*/ \
X(AgreementDate,                                                         915) /*!< 915 (LocalMktDate FIX.4.4) A reference to the date the underlying agreement specified by AgreementID and AgreementDesc was executed.*/ \
X(StartDate,                                                             916) /*!< 916 (LocalMktDate FIX.4.4) Start date of a financing deal, i.e. the date the buyer pays the seller cash and takes control of the collateral*/ \
X(EndDate,                                                               917) /*!< 917 (LocalMktDate FIX.4.4) End date of a financing deal, i.e. the date the seller reimburses the buyer and takes back control of the collateral*/ \
X(AgreementCurrency,                                                     918) /*!< 918 (Currency FIX.4.4) Contractual currency forming the basis of a financing agreement and associated transactions. Usually, but not always, the same as the trade currency.*/ \
X(DeliveryType,                                                          919) /*!< 919 (int FIX.4.4) Identifies type of settlement*/ \
X(EndAccruedInterestAmt,                                                 920) /*!< 920 (Amt FIX.4.4) Accrued Interest Amount applicable to a financing transaction on the End Date.*/ \
X(StartCash,                                                             921) /*!< 921 (Amt FIX.4.4) Starting dirty cash consideration of a financing deal, i.e. paid to the seller on the Start Date.*/ \
X(EndCash,                                                               922) /*!< 922 (Amt FIX.4.4) Ending dirty cash consideration of a financing deal. i.e. reimbursed to the buyer on the End Date.*/ \
X(UserRequestID,                                                         923) /*!< 923 (String FIX.4.4) Unique identifier for a User Request.*/ \
X(UserRequestType,                                                       924) /*!< 924 (int FIX.4.4) Indicates the action required by a User Request Message*/ \
X(NewPassword,                                                           925) /*!< 925 (String FIX.4.4) New Password or passphrase*/ \
X(UserStatus,                                                            926) /*!< 926 (int FIX.4.4) Indicates the status of a user*/ \
X(UserStatusText,                                                        927) /*!< 927 (String FIX.4.4) A text description associated with a user status.*/ \
X(StatusValue,                                                           928) /*!< 928 (int FIX.4.4) Indicates the status of a network connection*/ \
X(StatusText,                                                            929) /*!< 929 (String FIX.4.4) A text description associated with a network status.*/ \
X(RefCompID,                                                             930) /*!< 930 (String FIX.4.4) Assigned value used to identify a firm.*/ \
X(RefSubID,                                                              931) /*!< 931 (String FIX.4.4) Assigned value used to identify specific elements within a firm.*/ \
X(NetworkResponseID,                                                     932) /*!< 932 (String FIX.4.4) Unique identifier for a network response.*/ \
X(NetworkRequestID,                                                      933) /*!< 933 (String FIX.4.4) Unique identifier for a network resquest.*/ \
X(LastNetworkResponseID,                                                 934) /*!< 934 (String FIX.4.4) Identifier of the previous Network Response message sent to a counterparty, used to allow incremental updates.*/ \
X(NetworkRequestType,                                                    935) /*!< 935 (int FIX.4.4) Indicates the type and level of details required for a Network Status Request Message \
 \
Boolean logic applies EG If you want to subscribe for changes to certain id's then UserRequestType =0 (8+2), Snapshot for certain ID's = 9 (8+1)*/ \
X(NoCompIDs,                                                             936) /*!< 936 (NumInGroup FIX.4.4) Number of CompID entries in a repeating group.*/ \
X(NetworkStatusResponseType,                                             937) /*!< 937 (int FIX.4.4) Indicates the type of Network Response Message.*/ \
X(NoCollInquiryQualifier,                                                938) /*!< 938 (NumInGroup FIX.4.4) Number of CollInquiryQualifier entries in a repeating group.*/ \
X(TrdRptStatus,                                                          939) /*!< 939 (int FIX.4.4) Trade Report Status*/ \
X(AffirmStatus,                                                          940) /*!< 940 (int FIX.4.4) Specifies the affirmation status of the confirmation.*/ \
X(UnderlyingStrikeCurrency,                                              941) /*!< 941 (Currency FIX.4.4) Currency in which the strike price of an underlying instrument is denominated*/ \
X(LegStrikeCurrency,                                                     942) /*!< 942 (Currency FIX.4.4) Currency in which the strike price of a instrument leg of a multileg instrument is denominated*/ \
X(TimeBracket,                                                           943) /*!< 943 (String FIX.4.4) A code that represents a time interval in which a fill or trade occurred. \
 \
Required for US futures markets.*/ \
X(CollAction,                                                            944) /*!< 944 (int FIX.4.4) Action proposed for an Underlying Instrument instance.*/ \
X(CollInquiryStatus,                                                     945) /*!< 945 (int FIX.4.4) Status of Collateral Inquiry*/ \
X(CollInquiryResult,                                                     946) /*!< 946 (int FIX.4.4) Result returned in response to Collateral Inquiry \
 \
4000+ Reserved and available for bi-laterally agreed upon user-defined values*/ \
X(StrikeCurrency,                                                        947) /*!< 947 (Currency FIX.4.4) Currency in which the StrikePrice is denominated.*/ \
X(NoNested3PartyIDs,                                                     948) /*!< 948 (NumInGroup FIX.4.4) Number of Nested3PartyID (949), Nested3PartyIDSource (950), and Nested3PartyRole (95) entries*/ \
X(Nested3PartyID,                                                        949) /*!< 949 (String FIX.4.4) PartyID value within a "third instance" Nested repeating group. \
 \
Same values as PartyID (448)*/ \
X(Nested3PartyIDSource,                                                  950) /*!< 950 (char FIX.4.4) PartyIDSource value within a "third instance" Nested repeating group. \
 \
Same values as PartyIDSource (447)*/ \
X(Nested3PartyRole,                                                      951) /*!< 951 (int FIX.4.4) PartyRole value within a "third instance" Nested repeating group. \
 \
Same values as PartyRole (452)*/ \
X(NoNested3PartySubIDs,                                                  952) /*!< 952 (NumInGroup FIX.4.4) Number of Nested3PartySubIDs (953) entries*/ \
X(Nested3PartySubID,                                                     953) /*!< 953 (String FIX.4.4) PartySubID value within a "third instance" Nested repeating group. \
 \
Same values as PartySubID (523)*/ \
X(Nested3PartySubIDType,                                                 954) /*!< 954 (int FIX.4.4) PartySubIDType value within a "third instance" Nested repeating group. \
 \
Same values as PartySubIDType (803)*/ \
X(LegContractSettlMonth,                                                 955) /*!< 955 (MonthYear FIX.4.4) Specifies when the contract (i.e. MBS/TBA) will settle.*/ \
X(LegInterestAccrualDate,                                                956) /*!< 956 (LocalMktDate FIX.4.4) The start date used for calculating accrued interest on debt instruments which are being sold between interest payment dates. Often but not always the same as the Issue Date and the Dated Date*/ \
X(NoStrategyParameters,                                                  957) /*!< 957 (NumInGroup FIX.4.4) Indicates number of strategy parameters*/ \
X(StrategyParameterName,                                                 958) /*!< 958 (String FIX.4.4) Name of parameter*/ \
X(StrategyParameterType,                                                 959) /*!< 959 (int FIX.4.4) Datatype of the parameter*/ \
X(StrategyParameterValue,                                                960) /*!< 960 (String FIX.4.4) Value of the parameter*/ \
X(HostCrossID,                                                           961) /*!< 961 (String FIX.4.4) Host assigned entity ID that can be used to reference all components of a cross; sides + strategy + legs. Used as the primary key with which to refer to the Cross Order for cancellation and replace. The HostCrossID will also be used to link together components of the Cross Order. For example, each individual Execution Report associated with the order will carry HostCrossID in order to tie back to the original cross order.*/ \
X(SideTimeInForce,                                                       962) /*!< 962 (UTCTimestamp FIX.4.4) Indicates how long the order as specified in the side stays in effect. SideTimeInForce allows a two-sided cross order to specify order behavior separately for each side. Absence of this field indicates that TimeInForce should be referenced. SideTimeInForce will override TimeInForce if both are provided.*/ \
X(MDReportID,                                                            963) /*!< 963 (int FIX.4.4) Unique identifier for the Market Data Report.*/ \
X(SecurityReportID,                                                      964) /*!< 964 (int FIX.4.4) Identifies a Security List message.*/ \
X(SecurityStatus,                                                        965) /*!< 965 (String FIX.4.4) Used for derivatives. Denotes the current state of the Instrument.*/ \
X(SettleOnOpenFlag,                                                      966) /*!< 966 (String FIX.4.4) Indicator to determine if instrument is settle on open*/ \
X(StrikeMultiplier,                                                      967) /*!< 967 (float FIX.4.4) Used for derivatives. Multiplier applied to the strike price for the purpose of calculating the settlement value.*/ \
X(StrikeValue,                                                           968) /*!< 968 (float FIX.4.4) Used for derivatives. The number of shares/units for the financial instrument involved in the option trade.*/ \
X(MinPriceIncrement,                                                     969) /*!< 969 (float FIX.4.4) Minimum price increase for a given exchange-traded Instrument*/ \
X(PositionLimit,                                                         970) /*!< 970 (int FIX.4.4) Position Limit for a given exchange-traded product.*/ \
X(NTPositionLimit,                                                       971) /*!< 971 (int FIX.4.4) Position Limit in the near-term contract for a given exchange-traded product.*/ \
X(UnderlyingAllocationPercent,                                           972) /*!< 972 (Percentage FIX.4.4) Percent of the Strike Price that this underlying represents.*/ \
X(UnderlyingCashAmount,                                                  973) /*!< 973 (Amt FIX.4.4) Cash amount associated with the underlying component.*/ \
X(UnderlyingCashType,                                                    974) /*!< 974 (String FIX.4.4) Used for derivatives that deliver into cash underlying.*/ \
X(UnderlyingSettlementType,                                              975) /*!< 975 (int FIX.4.4) Indicates order settlement period for the underlying instrument.*/ \
X(QuantityDate,                                                          976) /*!< 976 (LocalMktDate FIX.4.4) Date associated to the quantity that is being reported for the position.*/ \
X(ContIntRptID,                                                          977) /*!< 977 (String FIX.4.4) Unique identifier for the Contrary Intention report*/ \
X(LateIndicator,                                                         978) /*!< 978 (Boolean FIX.4.4) Indicates if the contrary intention was received after the exchange imposed cutoff time*/ \
X(InputSource,                                                           979) /*!< 979 (String FIX.4.4) Originating source of the request.*/ \
X(NoExpiration,                                                          981) /*!< 981 (NumInGroup FIX.4.4) Number of Expiration Qty entries*/ \
X(ExpirationQtyType,                                                     982) /*!< 982 (int FIX.4.4) Expiration Quantity type*/ \
X(ExpQty,                                                                983) /*!< 983 (Qty FIX.4.4) Expiration Quantity associated with the Expiration Type*/ \
X(NoUnderlyingAmounts,                                                   984) /*!< 984 (NumInGroup FIX.4.4) Total number of occurrences of Amount to pay in order to receive the underlying instrument*/ \
X(UnderlyingPayAmount,                                                   985) /*!< 985 (Amt FIX.4.4) Amount to pay in order to receive the underlying instrument*/ \
X(UnderlyingCollectAmount,                                               986) /*!< 986 (Amt FIX.4.4) Amount to collect in order to deliver the underlying instrument*/ \
X(UnderlyingSettlementDate,                                              987) /*!< 987 (LocalMktDate FIX.4.4) Date the underlying instrument will settle. Used for derivatives that deliver into more than one underlying instrument. Settlement dates can vary across underlying instruments.*/ \
X(UnderlyingSettlementStatus,                                            988) /*!< 988 (String FIX.4.4) Settlement status of the underlying instrument. Used for derivatives that deliver into more than one underlying instrument. Settlement can be delayed for an underlying instrument.*/ \
X(SecondaryIndividualAllocID,                                            989) /*!< 989 (String FIX.4.4) Will allow the intermediary to specify an allocation ID generated by their system.*/ \
X(LegReportID,                                                           990) /*!< 990 (String FIX.4.4) Additional attribute to store the Trade ID of the Leg.*/ \
X(RndPx,                                                                 991) /*!< 991 (Price FIX.4.4) Specifies average price rounded to quoted precision.*/ \
X(IndividualAllocType,                                                   992) /*!< 992 (int FIX.4.4) Identifies whether the allocation is to be sub-allocated or allocated to a third party*/ \
X(AllocCustomerCapacity,                                                 993) /*!< 993 (String FIX.4.4) Capacity of customer in the allocation block.*/ \
X(TierCode,                                                              994) /*!< 994 (String FIX.4.4) The Tier the trade was matched by the clearing system.*/ \
X(UnitOfMeasure,                                                         996) /*!< 996 (String FIX.4.4) The unit of measure of the underlying commodity upon which the contract is based. Two groups of units of measure enumerations are supported. \
 \
Fixed Magnitude UOMs are primarily used in energy derivatives and specify a magnitude (such as, MM, Kilo, M, etc.) and the dimension (such as, watt hours, BTU's) to produce standard fixed measures (such as MWh - Megawatt-hours, MMBtu - One million BTUs). \
 \
The second group, Variable Quantity UOMs, specifies the dimension as a single unit without a magnitude (or more accurately a magnitude of one) and uses the UnitOfMeasureQty(1147) field to define the quantity of units per contract. Variable Quantity UOMs are used for both commodities (such as lbs of lean cattle, bushels of corn, ounces of gold) and financial futures. \
 \
Examples: \
 \
For lean cattle futures contracts, a UnitOfMeasure of 'lbs' with a UnitOfMeasureQty(1147) of 40,000, means each lean cattle futures contract represents 40,000 lbs of lean cattle. \
 \
For Eurodollars futures contracts, a UnitOfMeasure of Ccy with a UnitOfMeasureCurrency(1716)  of USD and a UnitOfMeasureQty(1147) of 1,000,000, means a Eurodollar futures contract represents 1,000,000 USD. \
 \
For gold futures contracts, a UnitOfMeasure is oz_tr (Troy ounce) with a UnitOfMeasureQty(1147) of 1,000, means each gold futures contract represents 1,000 troy ounces of gold.*/ \
X(TimeUnit,                                                              997) /*!< 997 (String FIX.4.4) Unit of time associated with the contract. \
 \
NOTE: Additional values may be used by mutual agreement of the counterparties*/ \
X(UnderlyingUnitOfMeasure,                                               998) /*!< 998 (String FIX.4.4) Refer to defintion of UnitOfMeasure(996)*/ \
X(LegUnitOfMeasure,                                                      999) /*!< 999 (String FIX.4.4) Refer to defintion of UnitOfMeasure(996)*/ \
X(UnderlyingTimeUnit,                                                    1000) /*!< 1000 (String FIX.4.4) Same as TimeUnit.*/ \
X(LegTimeUnit,                                                           1001) /*!< 1001 (String FIX.4.4) Same as TimeUnit.*/ \
X(AllocMethod,                                                           1002) /*!< 1002 (int FIX.4.4) Specifies the method under which a trade quantity was allocated.*/ \
X(TradeID,                                                               1003) /*!< 1003 (String FIX.4.4) The unique ID assigned to the trade entity once it is received or matched by the exchange or central counterparty.*/ \
X(SideTradeReportID,                                                     1005) /*!< 1005 (String FIX.4.4) Used on a multi-sided trade to designate the ReportID*/ \
X(SideFillStationCd,                                                     1006) /*!< 1006 (String FIX.4.4) Used on a multi-sided trade to convey order routing information*/ \
X(SideReasonCd,                                                          1007) /*!< 1007 (String FIX.4.4) Used on a multi-sided trade to convey reason for execution*/ \
X(SideTrdSubTyp,                                                         1008) /*!< 1008 (int FIX.4.4) Used on a multi-sided trade to specify the type of trade for a given side. Same values as TrdSubType (829).*/ \
X(SideLastQty,                                                           1009) /*!< 1009 (Qty FIX.4.4) Used to indicate the quantity on one side of a multi-sided trade.*/ \
X(MessageEventSource,                                                    1011) /*!< 1011 (String FIX.4.4) Used to identify the event or source which gave rise to a message. \
 \
Valid values will be based on an exchange's implementation. \
 \
Example values are: \
 \
"MQM" (originated at Firm Back Office) \
 \
"Clear" (originated in Clearing System) \
 \
"Reg" (static data generated via Register request)*/ \
X(SideTrdRegTimestamp,                                                   1012) /*!< 1012 (UTCTimestamp FIX.4.4) Will be used in a multi-sided message. \
 \
Traded Regulatory timestamp value Use to store time information required by government regulators or self regulatory organizations such as an exchange or clearing house*/ \
X(SideTrdRegTimestampType,                                               1013) /*!< 1013 (int FIX.4.4) Same as TrdRegTimeStampType*/ \
X(SideTrdRegTimestampSrc,                                                1014) /*!< 1014 (String FIX.4.4) Same as TrdRegTimestampOrigin \
 \
Text which identifies the origin i.e. system which was used to generate the time stamp for the Traded Regulatory timestamp value*/ \
X(AsOfIndicator,                                                         1015) /*!< 1015 (char FIX.4.4) A trade that is being submitted for a trade date prior to the current trade or clearing date, e.g. in an open outcry market an out trade being submitted for the previous trading session or trading day.*/ \
X(NoSideTrdRegTS,                                                        1016) /*!< 1016 (NumInGroup FIX.4.4) Indicates number of SideTimestamps contained in group*/ \
X(LegOptionRatio,                                                        1017) /*!< 1017 (float FIX.4.4) Expresses the risk of an option leg \
 \
Value must be between -1 and 1. \
 \
A Call Option will require a ratio value between 0 and 1 \
 \
A Put Option will require a ratio value between -1 and 0*/ \
X(NoInstrumentParties,                                                   1018) /*!< 1018 (NumInGroup FIX.4.4) Identifies the number of parties identified with an instrument*/ \
X(InstrumentPartyID,                                                     1019) /*!< 1019 (String FIX.4.4) PartyID value within an instrument party repeating group. Same values as PartyID (448)*/ \
X(TradeVolume,                                                           1020) /*!< 1020 (Qty FIX.4.4) Used to report volume with a trade*/ \
X(MDBookType,                                                            1021) /*!< 1021 (int FIX.4.4) Describes the type of book for which the feed is intended. Used when multiple feeds are provided over the same connection*/ \
X(MDFeedType,                                                            1022) /*!< 1022 (String FIX.4.4) Describes a class of service for a given data feed, ie Regular and Market Maker, Bandwidth Intensive or Bandwidth Conservative*/ \
X(MDPriceLevel,                                                          1023) /*!< 1023 (int FIX.4.4) Integer to convey the level of a bid or offer at a given price level. This is in contrast to MDEntryPositionNo which is used to convey the position of an order within a Price level*/ \
X(MDOriginType,                                                          1024) /*!< 1024 (int FIX.4.4) Used to describe the origin of the market data entry.*/ \
X(FirstPx,                                                               1025) /*!< 1025 (Price FIX.4.4) Indicates the first trade price of the day/session*/ \
X(MDEntrySpotRate,                                                       1026) /*!< 1026 (float FIX.4.4) The spot rate for an FX entry*/ \
X(MDEntryForwardPoints,                                                  1027) /*!< 1027 (PriceOffset FIX.4.4) Used for an F/X entry. The forward points to be added to or subtracted from the spot rate to get the "all-in" rate in MDEntryPx. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(ManualOrderIndicator,                                                  1028) /*!< 1028 (Boolean FIX.4.4) Indicates if the order was initially received manually (as opposed to electronically) or if it was entered manually (as opposed to entered by automated trading software).*/ \
X(CustDirectedOrder,                                                     1029) /*!< 1029 (Boolean FIX.4.4) Indicates if the customer directed this order to a specific execution venue "Y" or not "N". \
 \
A default of "N" customer did not direct this order should be used in the case where the information is both missing and essential.*/ \
X(ReceivedDeptID,                                                        1030) /*!< 1030 (String FIX.4.4) Identifies the broker-dealer department that first took the order.*/ \
X(CustOrderHandlingInst,                                                 1031) /*!< 1031 (MultipleStringValue FIX.4.4) Codes that apply special information that the Broker / Dealer needs to report, as specified by the customer. \
 \
NOTE: This field and its values have no bearing on the ExecInst and TimeInForce fields. These values should not be used instead of ExecInst or TimeInForce. This field and its values are intended for compliance reporting and/or billing purposes only. \
 \
 \
 \
For OrderHandlingInstSrc(1032) = 1 (FINRA OATS), valid values are (as of OATS Phase 3 as provided by FINRA. See also http://www.finra.org/Industry/Compliance/MarketTransparency/OATS/PhaseIII/index.htm for a complete list. \
 \
 \
 \
For OrderHandlingInstSrc(1032) = 2 (FIA Execution Source Code), only one enumeration value may be specified.*/ \
X(OrderHandlingInstSource,                                               1032) /*!< 1032 (int FIX.4.4) Identifies the class or source of the order handling instruction values.  Scope of this will apply to both CustOrderHandlingInst(1031) and DeskOrderHandlingInst(1035). \
 \
Conditionally required when CustOrderHandlingInst(1031) or DeskOrderHandlingInst(1035) is specified.*/ \
X(DeskType,                                                              1033) /*!< 1033 (String FIX.4.4) Identifies the type of Trading Desk. \
 \
Conditionally required when InformationBarrierID(1727) is specified for OATS.*/ \
X(DeskTypeSource,                                                        1034) /*!< 1034 (int FIX.4.4) Identifies the class or source of DeskType(1033) values. Conditionally required when DeskType(1033) is specified.*/ \
X(DeskOrderHandlingInst,                                                 1035) /*!< 1035 (MultipleStringValue FIX.4.4) Codes that apply special information that the broker-dealer needs to report.*/ \
X(ExecAckStatus,                                                         1036) /*!< 1036 (char FIX.4.4) The status of this execution acknowledgement message.*/ \
X(UnderlyingDeliveryAmount,                                              1037) /*!< 1037 (Amt FIX.4.4) Indicates the underlying position amount to be delivered*/ \
X(UnderlyingCapValue,                                                    1038) /*!< 1038 (Amt FIX.4.4) Maximum notional value for a capped financial instrument*/ \
X(UnderlyingSettlMethod,                                                 1039) /*!< 1039 (String FIX.4.4) Settlement method for a contract or instrument. Additional values may be used with bilateral agreement.*/ \
X(SecondaryTradeID,                                                      1040) /*!< 1040 (String FIX.4.4) Used to carry an internal trade entity ID which may or may not be reported to the firm*/ \
X(FirmTradeID,                                                           1041) /*!< 1041 (String FIX.4.4) The ID assigned to a trade by the Firm to track a trade within the Firm system. This ID can be assigned either before or after submission to the exchange or central counterpary*/ \
X(SecondaryFirmTradeID,                                                  1042) /*!< 1042 (String FIX.4.4) Used to carry an internal firm assigned ID which may or may not be reported to the exchange or central counterpary*/ \
X(CollApplType,                                                          1043) /*!< 1043 (int FIX.4.4) conveys how the collateral should be/has been applied*/ \
X(UnderlyingAdjustedQuantity,                                            1044) /*!< 1044 (Qty FIX.4.4) Unit amount of the underlying security (shares) adjusted for pending corporate action not yet allocated.*/ \
X(UnderlyingFXRate,                                                      1045) /*!< 1045 (float FIX.4.4) Foreign exchange rate used to compute UnderlyingCurrentValue(885) (or market value) from UnderlyingCurrency(318) to Currency(15).*/ \
X(UnderlyingFXRateCalc,                                                  1046) /*!< 1046 (char FIX.4.4) Specifies whether the UnderlyingFxRate(1045) should be multiplied or divided.*/ \
X(AllocPositionEffect,                                                   1047) /*!< 1047 (char FIX.4.4) Indicates whether the resulting position after a trade should be an opening position or closing position. Used for omnibus accounting - where accounts are held on a gross basis instead of being netted together.*/ \
X(DealingCapacity,                                                       1048) /*!< 1048 (char FIX.4.4) Identifies role of dealer; Agent, Principal, RisklessPrincipal*/ \
X(InstrmtAssignmentMethod,                                               1049) /*!< 1049 (char FIX.4.4) Method under which assignment was conducted*/ \
X(InstrumentPartyIDSource,                                               1050) /*!< 1050 (char FIX.4.4) PartyIDSource value within an instrument partyrepeating group. \
 \
Same values as PartyIDSource (447)*/ \
X(InstrumentPartyRole,                                                   1051) /*!< 1051 (int FIX.4.4) PartyRole value within an instrument partyepeating group. \
 \
Same values as PartyRole (452)*/ \
X(NoInstrumentPartySubIDs,                                               1052) /*!< 1052 (NumInGroup FIX.4.4) Number of InstrumentPartySubID (1053) and InstrumentPartySubIDType (1054) entries*/ \
X(InstrumentPartySubID,                                                  1053) /*!< 1053 (String FIX.4.4) PartySubID value within an instrument party repeating group. \
 \
Same values as PartySubID (523)*/ \
X(InstrumentPartySubIDType,                                              1054) /*!< 1054 (int FIX.4.4) Type of InstrumentPartySubID (1053) value. \
 \
Same values as PartySubIDType (803)*/ \
X(PositionCurrency,                                                      1055) /*!< 1055 (String FIX.4.4) The Currency in which the position Amount is denominated*/ \
X(CalculatedCcyLastQty,                                                  1056) /*!< 1056 (Qty FIX.4.4) Used for the calculated quantity of the other side of the currency trade. Can be derived from LastQty and LastPx.*/ \
X(AggressorIndicator,                                                    1057) /*!< 1057 (Boolean FIX.4.4) Used to identify whether the order initiator is an aggressor or not in the trade.*/ \
X(NoUndlyInstrumentParties,                                              1058) /*!< 1058 (NumInGroup FIX.4.4) Identifies the number of parties identified with an underlying instrument*/ \
X(UnderlyingInstrumentPartyID,                                           1059) /*!< 1059 (String FIX.4.4) PartyID value within an underlying instrument party repeating group. \
 \
Same values as PartyID (448)*/ \
X(UnderlyingInstrumentPartyIDSource,                                     1060) /*!< 1060 (char FIX.4.4) PartyIDSource value within an underlying instrument partyrepeating group. \
 \
Same values as PartyIDSource (447)*/ \
X(UnderlyingInstrumentPartyRole,                                         1061) /*!< 1061 (int FIX.4.4) PartyRole value within an underlying instrument partyepeating group. \
 \
Same values as PartyRole (452)*/ \
X(NoUndlyInstrumentPartySubIDs,                                          1062) /*!< 1062 (NumInGroup FIX.4.4) Number of Underlying InstrumentPartySubID (1053) and InstrumentPartySubIDType (1054) entries*/ \
X(UnderlyingInstrumentPartySubID,                                        1063) /*!< 1063 (String FIX.4.4) PartySubID value within an underlying instrument party repeating group. \
 \
Same values as PartySubID (523)*/ \
X(UnderlyingInstrumentPartySubIDType,                                    1064) /*!< 1064 (int FIX.4.4) Type of underlying InstrumentPartySubID (1053) value. \
 \
Same values as PartySubIDType (803)*/ \
X(BidSwapPoints,                                                         1065) /*!< 1065 (PriceOffset FIX.4.4) The bid FX Swap points for an FX Swap. It is the "far bid forward points - near offer forward point". Value can be negative. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(OfferSwapPoints,                                                       1066) /*!< 1066 (PriceOffset FIX.4.4) The offer FX Swap points for an FX Swap. It is the "far offer forward points - near bid forward points". Value can be negative. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(LegBidForwardPoints,                                                   1067) /*!< 1067 (PriceOffset FIX.4.4) The bid FX forward points for the leg of an FX Swap. Value can be negative. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(LegOfferForwardPoints,                                                 1068) /*!< 1068 (PriceOffset FIX.4.4) The offer FX forward points for the leg of an FX Swap. Value can be negative. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(SwapPoints,                                                            1069) /*!< 1069 (PriceOffset FIX.4.4) For FX Swap, this is used to express the differential between the far leg's bid/offer and the near leg's bid/offer. Value can be negative. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(MDQuoteType,                                                           1070) /*!< 1070 (int FIX.4.4) Identifies market data quote type.*/ \
X(LastSwapPoints,                                                        1071) /*!< 1071 (PriceOffset FIX.4.4) For FX Swap, this is used to express the last market event for the differential between the far leg's bid/offer and the near leg's bid/offer in a fill or partial fill. Value can be negative. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(SideGrossTradeAmt,                                                     1072) /*!< 1072 (Amt FIX.4.4) The gross trade amount for this side of the trade. See also GrossTradeAmt (381) for additional definition.*/ \
X(LegLastForwardPoints,                                                  1073) /*!< 1073 (PriceOffset FIX.4.4) The forward points for this leg's fill event. Value can be negative. Expressed in decimal form. For example, 61.99 points is expressed and sent as 0.006199*/ \
X(LegCalculatedCcyLastQty,                                               1074) /*!< 1074 (Qty FIX.4.4) Used for the calculated quantity of the other side of the currency for this leg. Can be derived from LegQty and LegLastPx.*/ \
X(LegGrossTradeAmt,                                                      1075) /*!< 1075 (Amt FIX.4.4) The gross trade amount of the leg. For FX Futures this is used to express the notional value of a fill when LegLastQty and other quantity fields are express in terms of contract size.*/ \
X(MaturityTime,                                                          1079) /*!< 1079 (TZTimeOnly FIX.4.4) Time of security's maturity expressed in local time with offset to UTC specified*/ \
X(RefOrderID,                                                            1080) /*!< 1080 (String FIX.4.4) The ID reference to the order being hit or taken. \
 \
 \
 \
For pre-trade credit/risk limit check process, this is the reference to the placed order, quote request or quote for the credit/risk limit check.*/ \
X(RefOrderIDSource,                                                      1081) /*!< 1081 (char FIX.4.4) Used to specify what identifier, provided in order depth market data, to use when hitting (taking) a specific order or to identify what type of order or quote reference is being provided when seeking credit limit check.*/ \
X(SecondaryDisplayQty,                                                   1082) /*!< 1082 (Qty FIX.4.4) Used for reserve orders when DisplayQty applies to the primary execution market (e.g.an ECN) and another quantity is to be shown at other markets (e.g. the exchange). On orders specifies the qty to be displayed, on execution reports the currently displayed quantity.*/ \
X(DisplayWhen,                                                           1083) /*!< 1083 (char FIX.4.4) Instructs when to refresh DisplayQty (1138).*/ \
X(DisplayMethod,                                                         1084) /*!< 1084 (char FIX.4.4) Defines what value to use in DisplayQty (1138). If not specified the default DisplayMethod is "1"*/ \
X(DisplayLowQty,                                                         1085) /*!< 1085 (Qty FIX.4.4) Defines the lower quantity limit to a randomized refresh of DisplayQty.*/ \
X(DisplayHighQty,                                                        1086) /*!< 1086 (Qty FIX.4.4) Defines the upper quantity limit to a randomized refresh of DisplayQty.*/ \
X(DisplayMinIncr,                                                        1087) /*!< 1087 (Qty FIX.4.4) Defines the minimum increment to be used when calculating a random refresh of DisplayQty. A user specifies this when he wants a larger increment than the standard provided by the market (e.g. the round lot size).*/ \
X(RefreshQty,                                                            1088) /*!< 1088 (Qty FIX.4.4) Defines the quantity used to refresh DisplayQty.*/ \
X(MatchIncrement,                                                        1089) /*!< 1089 (Qty FIX.4.4) Allows orders to specify a minimum quantity that applies to every execution (one execution could be for multiple counter-orders). The order may still fill against smaller orders, but the cumulative quantity of the execution must be in multiples of the MatchIncrement.*/ \
X(MaxPriceLevels,                                                        1090) /*!< 1090 (int FIX.4.4) Allows an order to specify a maximum number of price levels to trade through. Only valid for aggressive orders and during continuous (autoexecution) trading sessions. Property lost when order is put on book. A partially filled order is assigned last trade price as limit price. Non-filled order behaves as ordinary Market or Limit.*/ \
X(PreTradeAnonymity,                                                     1091) /*!< 1091 (Boolean FIX.4.4) Allows trader to explicitly request anonymity or disclosure in pre-trade market data feeds. Anonymity is relevant in markets where counterparties are regularly disclosed in order depth feeds. Disclosure is relevant when counterparties are not normally visible.*/ \
X(PriceProtectionScope,                                                  1092) /*!< 1092 (char FIX.4.4) Defines the type of price protection the customer requires on their order.*/ \
X(LotType,                                                               1093) /*!< 1093 (char FIX.4.4) Defines the lot type assigned to the order.*/ \
X(PegPriceType,                                                          1094) /*!< 1094 (int FIX.4.4) Defines the type of peg.*/ \
X(PeggedRefPrice,                                                        1095) /*!< 1095 (Price FIX.4.4) The value of the reference price that the order is pegged to. PeggedRefPrice + PegOffsetValue (211) = PeggedPrice (839) unless the limit price (44, Price) is breached. The values may not be exact due to rounding.*/ \
X(PegSecurityIDSource,                                                   1096) /*!< 1096 (String FIX.4.4) Defines the identity of the security off whose prices the order will peg. Same values as SecurityIDSource (22)*/ \
X(PegSecurityID,                                                         1097) /*!< 1097 (String FIX.4.4) Defines the identity of the security off whose prices the order will peg.*/ \
X(PegSymbol,                                                             1098) /*!< 1098 (String FIX.4.4) Defines the common, 'human understood' representation of the security off whose prices the order will Peg.*/ \
X(PegSecurityDesc,                                                       1099) /*!< 1099 (String FIX.4.4) Security description of the security off whose prices the order will Peg.*/ \
X(TriggerType,                                                           1100) /*!< 1100 (char FIX.5.0) Defines when the trigger will hit, i.e. the action specified by the trigger instructions will come into effect.*/ \
X(TriggerAction,                                                         1101) /*!< 1101 (char FIX.5.0) Defines the type of action to take when the trigger hits.*/ \
X(TriggerPrice,                                                          1102) /*!< 1102 (Price FIX.5.0) The price at which the trigger should hit.*/ \
X(TriggerSymbol,                                                         1103) /*!< 1103 (String FIX.5.0) Defines the common, 'human understood' representation of the security whose prices will be tracked by the trigger logic.*/ \
X(TriggerSecurityID,                                                     1104) /*!< 1104 (String FIX.5.0) Defines the identity of the security whose prices will be tracked by the trigger logic.*/ \
X(TriggerSecurityIDSource,                                               1105) /*!< 1105 (String FIX.5.0) Defines the identity of the security whose prices will be tracked by the trigger logic. Same values as SecurityIDSource (22).*/ \
X(TriggerSecurityDesc,                                                   1106) /*!< 1106 (String FIX.5.0) Defines the security description of the security whose prices will be tracked by the trigger logic.*/ \
X(TriggerPriceType,                                                      1107) /*!< 1107 (char FIX.5.0) The type of price that the trigger is compared to.*/ \
X(TriggerPriceTypeScope,                                                 1108) /*!< 1108 (char FIX.5.0) Defines the type of price protection the customer requires on their order.*/ \
X(TriggerPriceDirection,                                                 1109) /*!< 1109 (char FIX.5.0) The side from which the trigger price is reached.*/ \
X(TriggerNewPrice,                                                       1110) /*!< 1110 (Price FIX.5.0) The Price that the order should have after the trigger has hit. Could be applicable for any trigger type, but must be specified for Trigger Type 1.*/ \
X(TriggerOrderType,                                                      1111) /*!< 1111 (char FIX.5.0) The OrdType the order should have after the trigger has hit. Required to express orders that change from Limit to Market. Other values from OrdType (40) may be used if appropriate and bilaterally agreed upon.*/ \
X(TriggerNewQty,                                                         1112) /*!< 1112 (Qty FIX.5.0) The Quantity the order should have after the trigger has hit.*/ \
X(TriggerTradingSessionID,                                               1113) /*!< 1113 (String FIX.5.0) Defines the trading session at which the order will be activated.*/ \
X(TriggerTradingSessionSubID,                                            1114) /*!< 1114 (String FIX.5.0) Defines the subordinate trading session at which the order will be activated.*/ \
X(OrderCategory,                                                         1115) /*!< 1115 (char FIX.4.4) Defines the type of interest behind a trade (fill or partial fill).*/ \
X(NoRootPartyIDs,                                                        1116) /*!< 1116 (NumInGroup FIX.4.4) Number of RootPartyID (1117), RootPartyIDSource (1118), and RootPartyRole (1119) entries*/ \
X(RootPartyID,                                                           1117) /*!< 1117 (String FIX.4.4) PartyID value within a root parties component. Same values as PartyID (448)*/ \
X(RootPartyIDSource,                                                     1118) /*!< 1118 (char FIX.4.4) PartyIDSource value within a root parties component. Same values as PartyIDSource (447)*/ \
X(RootPartyRole,                                                         1119) /*!< 1119 (int FIX.4.4) PartyRole value within a root parties component. Same values as PartyRole (452)*/ \
X(NoRootPartySubIDs,                                                     1120) /*!< 1120 (NumInGroup FIX.4.4) Number of RootPartySubID (1121) and RootPartySubIDType (1122) entries*/ \
X(RootPartySubID,                                                        1121) /*!< 1121 (String FIX.4.4) PartySubID value within a root parties component. Same values as PartySubID (523)*/ \
X(RootPartySubIDType,                                                    1122) /*!< 1122 (int FIX.4.4) Type of RootPartySubID (1121) value. Same values as PartySubIDType (803)*/ \
X(TradeHandlingInstr,                                                    1123) /*!< 1123 (char FIX.4.4) Specified how the TradeCaptureReport(35=AE) should be handled by the respondent.*/ \
X(OrigTradeHandlingInstr,                                                1124) /*!< 1124 (char FIX.4.4) Optionally used with TradeHandlingInstr = 0 to relay the trade handling instruction used when reporting the trade to the marketplace. Same values as TradeHandlingInstr (1123)*/ \
X(OrigTradeDate,                                                         1125) /*!< 1125 (LocalMktDate FIX.4.4) Used to preserve original trade date when original trade is being referenced in a subsequent trade transaction such as a transfer*/ \
X(OrigTradeID,                                                           1126) /*!< 1126 (String FIX.4.4) Used to preserve original trade id when original trade is being referenced in a subsequent trade transaction such as a transfer*/ \
X(OrigSecondaryTradeID,                                                  1127) /*!< 1127 (String FIX.4.4) Used to preserve original secondary trade id when original trade is being referenced in a subsequent trade transaction such as a transfer*/ \
X(ApplVerID,                                                             1128) /*!< 1128 (String FIX.4.4) Specifies the service pack release being applied at message level. Enumerated field with values assigned at time of service pack release*/ \
X(CstmApplVerID,                                                         1129) /*!< 1129 (String FIX.4.4) Specifies a custom extension to a message being applied at the message level. Enumerated field*/ \
X(RefApplVerID,                                                          1130) /*!< 1130 (String FIX.4.4) Specifies the service pack release being applied to a message at the session level. Enumerated field with values assigned at time of service pack release. Uses same values as ApplVerID*/ \
X(RefCstmApplVerID,                                                      1131) /*!< 1131 (String FIX.4.4) Specifies a custom extension to a message being applied at the session level.*/ \
X(TZTransactTime,                                                        1132) /*!< 1132 (TZTimestamp FIX.4.4) Transact time in the local date-time stamp with a TZ offset to UTC identified*/ \
X(ExDestinationIDSource,                                                 1133) /*!< 1133 (char FIX.4.4) The ID source of ExDestination*/ \
X(ReportedPxDiff,                                                        1134) /*!< 1134 (Boolean FIX.4.4) Indicates that the reported price that is different from the market price. The price difference should be stated by using field 828 TrdType and, if required, field 829 TrdSubType*/ \
X(RptSys,                                                                1135) /*!< 1135 (String FIX.4.4) Indicates the system or medium on which the report has been published*/ \
X(AllocClearingFeeIndicator,                                             1136) /*!< 1136 (String FIX.4.4) ClearingFeeIndicator(635) for Allocation, see ClearingFeeIndicator(635) for permitted values.*/ \
X(DefaultApplVerID,                                                      1137) /*!< 1137 (String FIX.4.4) Specifies the service pack release being applied, by default, to message at the session level. Enumerated field with values assigned at time of service pack release. Uses same values as ApplVerID*/ \
X(DisplayQty,                                                            1138) /*!< 1138 (Qty FIX.4.4) The quantity to be displayed . Required for reserve orders. On orders specifies the qty to be displayed, on execution reports the currently displayed quantity.*/ \
X(ExchangeSpecialInstructions,                                           1139) /*!< 1139 (String FIX.4.4) Free format text string related to exchange.*/ \
X(MaxTradeVol,                                                           1140) /*!< 1140 (Qty FIX.5.0) The maximum order quantity (as expressed by TradeVolType(1786)) that can be submitted for a security.*/ \
X(NoMDFeedTypes,                                                         1141) /*!< 1141 (NumInGroup FIX.5.0) The number of feed types and corresponding book depths associated with a security*/ \
X(MatchAlgorithm,                                                        1142) /*!< 1142 (String FIX.5.0) The types of algorithm used to match orders in a specific security. Possilbe value types are FIFO, Allocation, Pro-rata, Lead Market Maker, Currency Calender.*/ \
X(MaxPriceVariation,                                                     1143) /*!< 1143 (float FIX.5.0) The maximum price variation of an execution from one event to the next for a given security. Expressed in absolute price terms.*/ \
X(ImpliedMarketIndicator,                                                1144) /*!< 1144 (int FIX.5.0) Indicates that an implied market should be created for either the legs of a multi-leg instrument (Implied-in) or for the multi-leg instrument based on the existence of the legs (Implied-out). Determination as to whether implied markets should be created is generally done at the level of the multi-leg instrument. Commonly used in listed derivatives.*/ \
X(EventTime,                                                             1145) /*!< 1145 (UTCTimestamp FIX.5.0) Specific time of event. To be used in combination with EventDate [866]*/ \
X(MinPriceIncrementAmount,                                               1146) /*!< 1146 (Amt FIX.5.0) Minimum price increment amount associated with the MinPriceIncrement ( tag 969). For listed derivatives, the value can be calculated by multiplying MinPriceIncrement by ContractValueFactor(231).*/ \
X(UnitOfMeasureQty,                                                      1147) /*!< 1147 (Qty FIX.5.0) Used to indicate the quantity of the underlying commodity unit of measure on which the contract is based, such as, 2500 lbs of lean cattle, 1000 barrels of crude oil, 1000 bushels of corn, etc. UnitOfMeasureQty is required for UnitOfMeasure(996) Variable Quantity UOMs enumerations. Refer to the definition of UnitOfMeasure(996) for more information on the use of UnitOfMeasureQty.*/ \
X(LowLimitPrice,                                                         1148) /*!< 1148 (Price FIX.5.0) Allowable low limit price for the trading day. A key parameter in validating order price. Used as the lower band for validating order prices. Orders submitted with prices below the lower limit will be rejected*/ \
X(HighLimitPrice,                                                        1149) /*!< 1149 (Price FIX.5.0) Allowable high limit price for the trading day. A key parameter in validating order price. Used as the upper band for validating order prices. Orders submitted with prices above the upper limit will be rejected*/ \
X(TradingReferencePrice,                                                 1150) /*!< 1150 (Price FIX.5.0) Reference price for the current trading price range usually representing the mid price between the HighLimitPrice and LowLimitPrice. The value may be the settlement price or closing price of the prior trading day.*/ \
X(SecurityGroup,                                                         1151) /*!< 1151 (String FIX.5.0) An exchange specific name assigned to a group of related securities which may be concurrently affected by market events and actions.*/ \
X(LegNumber,                                                             1152) /*!< 1152 (int FIX.5.0) Allow sequencing of Legs for a Strategy to be captured*/ \
X(SettlementCycleNo,                                                     1153) /*!< 1153 (int FIX.5.0) Settlement cycle in which the settlement obligation was generated*/ \
X(SideCurrency,                                                          1154) /*!< 1154 (Currency FIX.5.0) Used to identify the trading currency on the Trade Capture Report Side*/ \
X(SideSettlCurrency,                                                     1155) /*!< 1155 (Currency FIX.5.0) Used to identify the settlement currency on the Trade Capture Report Side*/ \
X(ApplExtID,                                                             1156) /*!< 1156 (int FIX.5.0) The extension pack number associated with an application message.*/ \
X(CcyAmt,                                                                1157) /*!< 1157 (Amt FIX.5.0) Net flow of Currency 1*/ \
X(NoSettlDetails,                                                        1158) /*!< 1158 (NumInGroup FIX.5.0) Used to group Each Settlement Party*/ \
X(SettlObligMode,                                                        1159) /*!< 1159 (int FIX.5.0) Used to identify the reporting mode of the settlement obligation which is either preliminary or final*/ \
X(SettlObligMsgID,                                                       1160) /*!< 1160 (String FIX.5.0) Message identifier for Settlement Obligation Report*/ \
X(SettlObligID,                                                          1161) /*!< 1161 (String FIX.5.0) Unique ID for this settlement instruction.*/ \
X(SettlObligTransType,                                                   1162) /*!< 1162 (char FIX.5.0) Transaction Type - required except where SettlInstMode is 5=Reject SSI request*/ \
X(SettlObligRefID,                                                       1163) /*!< 1163 (String FIX.5.0) Required where SettlInstTransType is Cancel or Replace*/ \
X(SettlObligSource,                                                      1164) /*!< 1164 (char FIX.5.0) Used to identify whether these delivery instructions are for the buyside or the sellside.*/ \
X(NoSettlOblig,                                                          1165) /*!< 1165 (NumInGroup FIX.5.0) Number of settlement obligations*/ \
X(QuoteMsgID,                                                            1166) /*!< 1166 (String FIX.5.0) Unique identifier for a quote message.*/ \
X(QuoteEntryStatus,                                                      1167) /*!< 1167 (int FIX.5.0) Identifies the status of an individual quote. See also QuoteStatus(297) which is used for single Quotes.*/ \
X(TotNoCxldQuotes,                                                       1168) /*!< 1168 (int FIX.5.0) Specifies the number of canceled quotes*/ \
X(TotNoAccQuotes,                                                        1169) /*!< 1169 (int FIX.5.0) Specifies the number of accepted quotes*/ \
X(TotNoRejQuotes,                                                        1170) /*!< 1170 (int FIX.5.0) Specifies the number of rejected quotes*/ \
X(PrivateQuote,                                                          1171) /*!< 1171 (Boolean FIX.5.0) Specifies whether a quote is public, i.e. available to the market, or private, i.e. available to a specified counterparty only.*/ \
X(RespondentType,                                                        1172) /*!< 1172 (int FIX.5.0) Specifies the type of respondents requested.*/ \
X(MDSubBookType,                                                         1173) /*!< 1173 (int FIX.5.0) Describes a class of sub book, e.g. for the separation of various lot types. The Sub Book Type indicates that the following Market Data Entries belong to a non-integrated Sub Book. Whenever provided the Sub Book must be used together with MDPriceLevel and MDEntryPositionNo in order to sort the order properly. \
 \
Values are bilaterally agreed.*/ \
X(SecurityTradingEvent,                                                  1174) /*!< 1174 (int FIX.5.0) Identifies an event related to a SecurityTradingStatus(326). An event occurs and is gone, it is not a state that applies for a period of time.*/ \
X(NoStatsIndicators,                                                     1175) /*!< 1175 (NumInGroup FIX.5.0) Number of statistics indicator repeating group entries*/ \
X(StatsType,                                                             1176) /*!< 1176 (int FIX.5.0) Type of statistics*/ \
X(NoOfSecSizes,                                                          1177) /*!< 1177 (NumInGroup FIX.5.0) The number of secondary sizes specifies in this entry*/ \
X(MDSecSizeType,                                                         1178) /*!< 1178 (int FIX.5.0) Specifies the type of secondary size.*/ \
X(MDSecSize,                                                             1179) /*!< 1179 (Qty FIX.5.0) A part of the MDEntrySize(271) that represents secondary interest as specified by MDSecSizeType(1178).*/ \
X(ApplID,                                                                1180) /*!< 1180 (String FIX.5.0) Identifies the application with which a message is associated. Used only if application sequencing is in effect.*/ \
X(ApplSeqNum,                                                            1181) /*!< 1181 (SeqNum FIX.5.0) Data sequence number to be used when FIX session is not in effect*/ \
X(ApplBegSeqNum,                                                         1182) /*!< 1182 (SeqNum FIX.5.0) Beginning range of application sequence numbers*/ \
X(ApplEndSeqNum,                                                         1183) /*!< 1183 (SeqNum FIX.5.0) Ending range of application sequence numbers*/ \
X(SecurityXMLLen,                                                        1184) /*!< 1184 (Length FIX.5.0) The length of the SecurityXML(1185) data block.*/ \
X(SecurityXML,                                                           1185) /*!< 1185 (XMLData FIX.5.0) XML definition for the security.*/ \
X(SecurityXMLSchema,                                                     1186) /*!< 1186 (String FIX.5.0) The schema used to validate the contents of SecurityXML(1185).*/ \
X(RefreshIndicator,                                                      1187) /*!< 1187 (Boolean FIX.5.0) Set by the sender to tell the receiver to perform an immediate refresh of the book due to disruptions in the accompanying real-time feed \
 \
'Y' - Mandatory refresh by all participants \
 \
'N' - Process as required*/ \
X(Volatility,                                                            1188) /*!< 1188 (float FIX.5.0) Annualized volatility for option model calculations*/ \
X(TimeToExpiration,                                                      1189) /*!< 1189 (float FIX.5.0) Time to expiration in years calculated as the number of days remaining to expiration divided by 365 days per year.*/ \
X(RiskFreeRate,                                                          1190) /*!< 1190 (float FIX.5.0) Interest rate. Usually some form of short term rate.*/ \
X(PriceUnitOfMeasure,                                                    1191) /*!< 1191 (String FIX.5.0) Used to express the UOM of the price if different from the contract. In futures, this can be different for cross-rate products in which the price is quoted in units differently from the contract*/ \
X(PriceUnitOfMeasureQty,                                                 1192) /*!< 1192 (Qty FIX.5.0) Used to express the UOM Quantity of the price if different from the contract. In futures, this can be different for physically delivered products in which price is quoted in a unit size different from the contract, i.e. a Cattle Future contract has a UOMQty of 40,000 and a PriceUOMQty of 100.*/ \
X(SettlMethod,                                                           1193) /*!< 1193 (String FIX.5.0) Settlement method for a contract or instrument. Additional values may be used with bilateral agreement.*/ \
X(ExerciseStyle,                                                         1194) /*!< 1194 (int FIX.5.0) Type of exercise of a derivatives security*/ \
X(OptPayoutAmount,                                                       1195) /*!< 1195 (Amt FIX.5.0) Cash amount indicating the pay out associated with an option. For binary options this is a fixed amount. */ \
X(PriceQuoteMethod,                                                      1196) /*!< 1196 (String FIX.5.0) Method for price quotation*/ \
X(ValuationMethod,                                                       1197) /*!< 1197 (String FIX.5.0) Specifies the type of valuation method applied.*/ \
X(ListMethod,                                                            1198) /*!< 1198 (int FIX.5.0) Indicates whether instruments are pre-listed only or can also be defined via user request*/ \
X(CapPrice,                                                              1199) /*!< 1199 (Price FIX.5.0) Used to express the ceiling price of a capped call*/ \
X(FloorPrice,                                                            1200) /*!< 1200 (Price FIX.5.0) Used to express the floor price of a capped put*/ \
X(NoStrikeRules,                                                         1201) /*!< 1201 (NumInGroup FIX.5.0) Number of strike rule entries. This block specifies the rules for determining how new strikes should be listed within the stated price range of the underlying instrument*/ \
X(StartStrikePxRange,                                                    1202) /*!< 1202 (Price FIX.5.0) Starting price for the range to which the StrikeIncrement applies. Price refers to the price of the underlying*/ \
X(EndStrikePxRange,                                                      1203) /*!< 1203 (Price FIX.5.0) Ending price of the range to which the StrikeIncrement applies. Price refers to the price of the underlying*/ \
X(StrikeIncrement,                                                       1204) /*!< 1204 (float FIX.5.0) Value by which strike price should be incremented within the specified price range.*/ \
X(NoTickRules,                                                           1205) /*!< 1205 (NumInGroup FIX.5.0) Number of tick rules. This block specifies the rules for determining how a security ticks, i.e. the price increments at which it can be quoted and traded, depending on the current price of the security*/ \
X(StartTickPriceRange,                                                   1206) /*!< 1206 (Price FIX.5.0) Starting price range for specified tick increment*/ \
X(EndTickPriceRange,                                                     1207) /*!< 1207 (Price FIX.5.0) Ending price range for the specified tick increment*/ \
X(TickIncrement,                                                         1208) /*!< 1208 (Price FIX.5.0) Tick increment for stated price range. Specifies the valid price increments at which a security can be quoted and traded*/ \
X(TickRuleType,                                                          1209) /*!< 1209 (int FIX.5.0) Specifies the type of tick rule which is being described*/ \
X(NestedInstrAttribType,                                                 1210) /*!< 1210 (int FIX.5.0) Code to represent the type of instrument attribute*/ \
X(NestedInstrAttribValue,                                                1211) /*!< 1211 (String FIX.5.0) Attribute value appropriate to the NestedInstrAttribType field*/ \
X(LegMaturityTime,                                                       1212) /*!< 1212 (TZTimeOnly FIX.5.0) Time of security's maturity expressed in local time with offset to UTC specified*/ \
X(UnderlyingMaturityTime,                                                1213) /*!< 1213 (TZTimeOnly FIX.5.0) Time of security's maturity expressed in local time with offset to UTC specified*/ \
X(DerivativeSymbol,                                                      1214) /*!< 1214 (String FIX.5.0) Refer to definition for Symbol(55)*/ \
X(DerivativeSymbolSfx,                                                   1215) /*!< 1215 (String FIX.5.0) Refer to definition for SymbolSfx(65)*/ \
X(DerivativeSecurityID,                                                  1216) /*!< 1216 (String FIX.5.0) Refer to definition for SecurityID(48)*/ \
X(DerivativeSecurityIDSource,                                            1217) /*!< 1217 (String FIX.5.0) Refer to definition for SecurityIDSoruce(22)*/ \
X(NoDerivativeSecurityAltID,                                             1218) /*!< 1218 (NumInGroup FIX.5.0) Refer to definition for NoSecurityAltID(454)*/ \
X(DerivativeSecurityAltID,                                               1219) /*!< 1219 (String FIX.5.0) Refer to definition for SecurityAltID(455)*/ \
X(DerivativeSecurityAltIDSource,                                         1220) /*!< 1220 (String FIX.5.0) Refer to definition for SecurityAltIDSource(456)*/ \
X(SecondaryLowLimitPrice,                                                1221) /*!< 1221 (Price FIX.5.0) Refer to definition of LowLimitPrice(1148)*/ \
X(MaturityRuleID,                                                        1222) /*!< 1222 (String FIX.5.0) Allows maturity rule to be referenced via an identifier so that rules do not need to be explicitly enumerated*/ \
X(StrikeRuleID,                                                          1223) /*!< 1223 (String FIX.5.0) Allows strike rule to be referenced via an identifier so that rules do not need to be explicitly enumerated*/ \
X(LegUnitOfMeasureQty,                                                   1224) /*!< 1224 (Qty FIX.5.0) Refer to definition of UnitOfMeasureQty(1147)*/ \
X(DerivativeOptPayAmount,                                                1225) /*!< 1225 (Amt FIX.5.0) Cash amount indicating the pay out associated with an option. For binary options this is a fixed amount*/ \
X(EndMaturityMonthYear,                                                  1226) /*!< 1226 (MonthYear FIX.5.0) Ending maturity month year for an option class*/ \
X(ProductComplex,                                                        1227) /*!< 1227 (String FIX.5.0) Identifies an entire suite of products for a given market. In Futures this may be "interest rates", "agricultural", "equity indexes", etc.*/ \
X(DerivativeProductComplex,                                              1228) /*!< 1228 (String FIX.5.0) Refer to ProductComplex(1227)*/ \
X(MaturityMonthYearIncrement,                                            1229) /*!< 1229 (int FIX.5.0) Increment between successive maturities for an option class*/ \
X(SecondaryHighLimitPrice,                                               1230) /*!< 1230 (Price FIX.5.0) Refer to definition of HighLimitPrice(1149)*/ \
X(MinLotSize,                                                            1231) /*!< 1231 (Qty FIX.5.0) Minimum lot size allowed based on lot type specified in LotType(1093)*/ \
X(NoExecInstRules,                                                       1232) /*!< 1232 (NumInGroup FIX.5.0) Number of execution instructions*/ \
X(CommRate,                                                              1233) /*!< 1233 (float FIX.5.0SP2) The commission rate when Commission(12) is based on a percentage of quantity, amount per unit or a factor of "unit of measure". If the rate is a percentage, use the decimalized form, e.g. "0.05" for a 5% commission or "0.005" for 50 basis points.*/ \
X(NoLotTypeRules,                                                        1234) /*!< 1234 (NumInGroup FIX.5.0) Number of Lot Type Rules*/ \
X(NoMatchRules,                                                          1235) /*!< 1235 (NumInGroup FIX.5.0) Number of Match Rules*/ \
X(NoMaturityRules,                                                       1236) /*!< 1236 (NumInGroup FIX.5.0) Number of maturity rules in MarurityRules component block*/ \
X(NoOrdTypeRules,                                                        1237) /*!< 1237 (NumInGroup FIX.5.0) Number of order types*/ \
X(CommUnitOfMeasure,                                                     1238) /*!< 1238 (String FIX.5.0SP2) The commission rate unit of measure.*/ \
X(NoTimeInForceRules,                                                    1239) /*!< 1239 (NumInGroup FIX.5.0) Number of time in force techniques*/ \
X(SecondaryTradingReferencePrice,                                        1240) /*!< 1240 (Price FIX.5.0) Refer to definition for TradingReferencePrice(1150)*/ \
X(StartMaturityMonthYear,                                                1241) /*!< 1241 (MonthYear FIX.5.0) Starting maturity month year for an option class*/ \
X(FlexProductEligibilityIndicator,                                       1242) /*!< 1242 (Boolean FIX.5.0) Used to indicate if a product or group of product supports the creation of flexible securities*/ \
X(DerivFlexProductEligibilityIndicator,                                  1243) /*!< 1243 (Boolean FIX.5.0) Refer to FlexProductEligibilityIndicator(1242)*/ \
X(FlexibleIndicator,                                                     1244) /*!< 1244 (Boolean FIX.5.0) Used to indicate a derivatives security that can be defined using flexible terms. The terms commonly permitted to be defined by market participants are expiration date and strike price. FlexibleIndicator is an alternative CFICode(461) Standard/Non-standard attribute.*/ \
X(TradingCurrency,                                                       1245) /*!< 1245 (Currency FIX.5.0) Used when the trading currency can differ from the price currency*/ \
X(DerivativeSecurityXMLLen,                                              1282) /*!< 1282 (Length FIX.5.0) Refer to definition SecurityXMLLen(1184)*/ \
X(DerivativeSecurityXML,                                                 1283) /*!< 1283 (data FIX.5.0) Refer to definition of SecurityXML(1185)*/ \
X(DerivativeSecurityXMLSchema,                                           1284) /*!< 1284 (String FIX.5.0) Refer to definition of SecurityXMLSchema(1186)*/ \
X(NoDerivativeInstrumentParties,                                         1292) /*!< 1292 (NumInGroup FIX.5.0) Refer to definition of NoParties(453)*/ \
X(DerivativeInstrumentPartyID,                                           1293) /*!< 1293 (String FIX.5.0) Refer to definition of PartyID(448)*/ \
X(DerivativeInstrumentPartyIDSource,                                     1294) /*!< 1294 (char FIX.5.0) Refer to definition of PartyIDSource(447)*/ \
X(DerivativeInstrumentPartyRole,                                         1295) /*!< 1295 (int FIX.5.0) REfer to definition of PartyRole(452)*/ \
X(NoDerivativeInstrumentPartySubIDs,                                     1296) /*!< 1296 (NumInGroup FIX.5.0) Refer to definition for NoPartySubIDs(802)*/ \
X(DerivativeInstrumentPartySubID,                                        1297) /*!< 1297 (String FIX.5.0) Refer to definition for PartySubID(523)*/ \
X(DerivativeInstrumentPartySubIDType,                                    1298) /*!< 1298 (int FIX.5.0) Refer to definition for PartySubIDType(803)*/ \
X(DerivativeExerciseStyle,                                               1299) /*!< 1299 (int FIX.5.0) Type of exercise of a derivatives security*/ \
X(MarketSegmentID,                                                       1300) /*!< 1300 (String FIX.5.0) Identifies the market segment*/ \
X(MarketID,                                                              1301) /*!< 1301 (Exchange FIX.5.0) Identifies the market*/ \
X(MaturityMonthYearIncrementUnits,                                       1302) /*!< 1302 (int FIX.5.0) Unit of measure for the Maturity Month Year Increment*/ \
X(MaturityMonthYearFormat,                                               1303) /*!< 1303 (int FIX.5.0) Format used to generate the MaturityMonthYear for each option*/ \
X(StrikeExerciseStyle,                                                   1304) /*!< 1304 (int FIX.5.0) Expiration Style for an option class:*/ \
X(SecondaryPriceLimitType,                                               1305) /*!< 1305 (int FIX.5.0) Describes the how the price limits are expressed*/ \
X(PriceLimitType,                                                        1306) /*!< 1306 (int FIX.5.0) Describes the how the price limits are expressed.*/ \
X(ExecInstValue,                                                         1308) /*!< 1308 (MultipleCharValue FIX.5.0) Indicates execution instructions that are valid for the specified market segment*/ \
X(NoTradingSessionRules,                                                 1309) /*!< 1309 (NumInGroup FIX.5.0) Allows trading rules to be expressed by trading session*/ \
X(NoMarketSegments,                                                      1310) /*!< 1310 (NumInGroup FIX.5.0) Number of Market Segments on which a security may trade.*/ \
X(DerivativeInstrAttribType,                                             1313) /*!< 1313 (int FIX.5.0) Refer to definition of InstrAttribType(871)*/ \
X(DerivativeInstrAttribValue,                                            1314) /*!< 1314 (String FIX.5.0) Refer to definition of InstrAttribValue(872)*/ \
X(DerivativePriceUnitOfMeasure,                                          1315) /*!< 1315 (String FIX.5.0) Refer to definition for PriceUnitOfMeasure(1191)*/ \
X(DerivativePriceUnitOfMeasureQty,                                       1316) /*!< 1316 (Qty FIX.5.0) Refer to definition of PriceUnitOfMeasureQty(1192)*/ \
X(DerivativeSettlMethod,                                                 1317) /*!< 1317 (String FIX.5.0) Settlement method for a contract or instrument. Additional values may be used with bilateral agreement.*/ \
X(DerivativePriceQuoteMethod,                                            1318) /*!< 1318 (String FIX.5.0) Refer to definition of PriceQuoteMethod(1196)*/ \
X(DerivativeValuationMethod,                                             1319) /*!< 1319 (String FIX.5.0) Refer to definition of ValuationMethod(1197).*/ \
X(DerivativeListMethod,                                                  1320) /*!< 1320 (int FIX.5.0) Indicates whether instruments are pre-listed only or can also be defined via user request*/ \
X(DerivativeCapPrice,                                                    1321) /*!< 1321 (Price FIX.5.0) Refer to definition of CapPrice(1199)*/ \
X(DerivativeFloorPrice,                                                  1322) /*!< 1322 (Price FIX.5.0) Refer to definition of FloorPrice(1200)*/ \
X(DerivativePutOrCall,                                                   1323) /*!< 1323 (int FIX.5.0) Indicates whether an option contract is a put, call, chooser or undetermined.*/ \
X(ListUpdateAction,                                                      1324) /*!< 1324 (char FIX.5.0) If provided, then Instrument occurrence has explicitly changed*/ \
X(ParentMktSegmID,                                                       1325) /*!< 1325 (String FIX.5.0) Reference to a parent Market Segment. See MarketSegmentID(1300)*/ \
X(TradingSessionDesc,                                                    1326) /*!< 1326 (String FIX.5.0) Trading Session description*/ \
X(TradSesUpdateAction,                                                   1327) /*!< 1327 (char FIX.5.0) Specifies the action taken for the specified trading sessions.*/ \
X(RejectText,                                                            1328) /*!< 1328 (String FIX.5.0) Identifies the reason for rejection.*/ \
X(FeeMultiplier,                                                         1329) /*!< 1329 (float FIX.5.0) This is a multiplier that Clearing (Fee system) will use to calculate fees and will be sent to the firms on their confirms.*/ \
X(UnderlyingLegSymbol,                                                   1330) /*!< 1330 (String FIX.5.0) Refer to definition for Symbol(55)*/ \
X(UnderlyingLegSymbolSfx,                                                1331) /*!< 1331 (String FIX.5.0) Refer to definition for SymbolSfx(65)*/ \
X(UnderlyingLegSecurityID,                                               1332) /*!< 1332 (String FIX.5.0) Refer to definition for SecurityID(48)*/ \
X(UnderlyingLegSecurityIDSource,                                         1333) /*!< 1333 (String FIX.5.0) Refer to definition for SecurityIDSource(22)*/ \
X(NoUnderlyingLegSecurityAltID,                                          1334) /*!< 1334 (NumInGroup FIX.5.0) Refer to definition for NoSecurityAltID(454)*/ \
X(UnderlyingLegSecurityAltID,                                            1335) /*!< 1335 (String FIX.5.0) Refer to definition for SecurityAltID(455)*/ \
X(UnderlyingLegSecurityAltIDSource,                                      1336) /*!< 1336 (String FIX.5.0) Refer to definition for SecurityAltIDSource(456)*/ \
X(UnderlyingLegSecurityType,                                             1337) /*!< 1337 (String FIX.5.0) Refer to definition for SecurityType(167)*/ \
X(UnderlyingLegSecuritySubType,                                          1338) /*!< 1338 (String FIX.5.0) Refer to definition for SecuritySubType(762)*/ \
X(UnderlyingLegMaturityMonthYear,                                        1339) /*!< 1339 (MonthYear FIX.5.0) Refer to definition for MaturityMonthYear(200)*/ \
X(UnderlyingLegStrikePrice,                                              1340) /*!< 1340 (Price FIX.5.0) Refer to definition for StrikePrice(202)*/ \
X(UnderlyingLegSecurityExchange,                                         1341) /*!< 1341 (String FIX.5.0) Refer to definition for SecurityExchange(207)*/ \
X(NoOfLegUnderlyings,                                                    1342) /*!< 1342 (NumInGroup FIX.5.0) Number of Underlyings, Identifies the Underlying of the Leg*/ \
X(UnderlyingLegPutOrCall,                                                1343) /*!< 1343 (int FIX.5.0) Refer to definition for PutOrCall(201)*/ \
X(UnderlyingLegCFICode,                                                  1344) /*!< 1344 (String FIX.5.0) Refer to definition for CFICode(461)*/ \
X(UnderlyingLegMaturityDate,                                             1345) /*!< 1345 (LocalMktDate FIX.5.0) Date of maturity.*/ \
X(ApplReqID,                                                             1346) /*!< 1346 (String FIX.5.0) Unique identifier for request*/ \
X(ApplReqType,                                                           1347) /*!< 1347 (int FIX.5.0) Type of Application Message Request being made.*/ \
X(ApplResponseType,                                                      1348) /*!< 1348 (int FIX.5.0) Used to indicate the type of acknowledgement being sent.*/ \
X(ApplTotalMessageCount,                                                 1349) /*!< 1349 (int FIX.5.0) Total number of messages included in transmission.*/ \
X(ApplLastSeqNum,                                                        1350) /*!< 1350 (SeqNum FIX.5.0) Application sequence number of last message in transmission*/ \
X(NoApplIDs,                                                             1351) /*!< 1351 (NumInGroup FIX.5.0) Specifies number of application id occurrences*/ \
X(ApplResendFlag,                                                        1352) /*!< 1352 (Boolean FIX.5.0) Used to indicate that a message is being sent in response to an Application Message Request. It is possible for both ApplResendFlag and PossDupFlag to be set on the same message if the Sender's cache size is greater than zero and the message is being resent due to a session level resend request*/ \
X(ApplResponseID,                                                        1353) /*!< 1353 (String FIX.5.0) Identifier for the Applicaton Message Request Ack*/ \
X(ApplResponseError,                                                     1354) /*!< 1354 (int FIX.5.0) Used to return an error code or text associated with a response to an Application Request.*/ \
X(RefApplID,                                                             1355) /*!< 1355 (String FIX.5.0) Reference to the unique application identifier which corresponds to ApplID(1180) from the Application Sequence Group component*/ \
X(ApplReportID,                                                          1356) /*!< 1356 (String FIX.5.0) Identifier for the Application Sequence Reset*/ \
X(RefApplLastSeqNum,                                                     1357) /*!< 1357 (SeqNum FIX.5.0) Application sequence number of last message in transmission.*/ \
X(LegPutOrCall,                                                          1358) /*!< 1358 (int FIX.5.0) Indicates whether a leg option contract is a put, call, chooser or undetermined.*/ \
X(TotNoFills,                                                            1361) /*!< 1361 (int FIX.5.0) Total number of fill entries across all messages. Should be the sum of all NoFills(1362) in each message that has repeating list of fill entries related to the same ExecID(17). Used to support fragmentation.*/ \
X(FillExecID,                                                            1363) /*!< 1363 (String FIX.5.0) Refer to ExecID(17). Used when multiple partial fills are reported in single Execution Report. ExecID and FillExecID should not overlap,*/ \
X(FillPx,                                                                1364) /*!< 1364 (Price FIX.5.0) Price of Fill. Refer to LastPx(31).*/ \
X(FillQty,                                                               1365) /*!< 1365 (Qty FIX.5.0) Quantity of Fill. Refer to LastQty(32).*/ \
X(LegAllocID,                                                            1366) /*!< 1366 (String FIX.5.0) The AllocID(70) of an individual leg of a multileg order.*/ \
X(LegAllocSettlCurrency,                                                 1367) /*!< 1367 (Currency FIX.5.0) Identifies settlement currency for the leg level allocation.*/ \
X(TradSesEvent,                                                          1368) /*!< 1368 (int FIX.5.0) Identifies an event related to a TradSesStatus(340). An event occurs and is gone, it is not a state that applies for a period of time.*/ \
X(MassActionReportID,                                                    1369) /*!< 1369 (String FIX.5.0) Unique identifier of Order Mass Cancel Report or Order Mass Action Report message as assigned by sell-side (broker, exchange, ECN)*/ \
X(NoNotAffectedOrders,                                                   1370) /*!< 1370 (NumInGroup FIX.5.0) Number of not affected orders in the repeating group of order ids.*/ \
X(NotAffectedOrderID,                                                    1371) /*!< 1371 (String FIX.5.0) OrderID(37) of an order not affected by a mass cancel or mass action request.*/ \
X(NotAffOrigClOrdID,                                                     1372) /*!< 1372 (String FIX.5.0) ClOrdID(11) of an order not affected by a mass cancel or mass action request.*/ \
X(MassActionType,                                                        1373) /*!< 1373 (int FIX.5.0) Specifies the type of action requested*/ \
X(MassActionScope,                                                       1374) /*!< 1374 (int FIX.5.0) Specifies scope of Order Mass Action Request.*/ \
X(MassActionResponse,                                                    1375) /*!< 1375 (int FIX.5.0) Specifies the action taken by counterparty order handling system as a result of the action type indicated in MassActionType of the Order Mass Action Request.*/ \
X(MassActionRejectReason,                                                1376) /*!< 1376 (int FIX.5.0) Reason Order Mass Action Request was rejected*/ \
X(MultilegModel,                                                         1377) /*!< 1377 (int FIX.5.0) Specifies the type of multileg order. Defines whether the security is pre-defined or user-defined. Note that MultilegModel(1377)=2(User-defined, Non-Securitized, Multileg) does not apply for Securities.*/ \
X(MultilegPriceMethod,                                                   1378) /*!< 1378 (int FIX.5.0) Code to represent how the multileg price is to be interpreted when applied to the legs. \
 \
(See Volume : "Glossary" for further value definitions)*/ \
X(LegVolatility,                                                         1379) /*!< 1379 (float FIX.5.0) Specifies the volatility of an instrument leg.*/ \
X(DividendYield,                                                         1380) /*!< 1380 (Percentage FIX.5.0) The continuously-compounded annualized dividend yield of the underlying(s) of an option. Used as a parameter to theoretical option pricing models.*/ \
X(LegDividendYield,                                                      1381) /*!< 1381 (Percentage FIX.5.0) Refer to definition for DividendYield(1380).*/ \
X(CurrencyRatio,                                                         1382) /*!< 1382 (float FIX.5.0) Specifies the currency ratio between the currency used for a multileg price and the currency used by the outright book defined by the leg. Example: Multileg quoted in EUR, outright leg in USD and 1 EUR = 0,7 USD then CurrencyRatio = 0.7*/ \
X(LegCurrencyRatio,                                                      1383) /*!< 1383 (float FIX.5.0) Specifies the currency ratio between the currency used for a multileg price and the currency used by the outright book defined by the leg. Example: Multileg quoted in EUR, outright leg in USD and 1 EUR = 0,7 USD then LegCurrencyRatio = 0.7*/ \
X(LegExecInst,                                                           1384) /*!< 1384 (MultipleCharValue FIX.5.0) Refer to ExecInst(18) \
 \
Same values as ExecInst(18)*/ \
X(ContingencyType,                                                       1385) /*!< 1385 (int FIX.5.0) Defines the type of contingency.*/ \
X(ListRejectReason,                                                      1386) /*!< 1386 (int FIX.5.0) Identifies the reason for rejection of a New Order List message. Note that OrdRejReason(103) is used if the rejection is based on properties of an individual order part of the List.*/ \
X(NoTrdRepIndicators,                                                    1387) /*!< 1387 (NumInGroup FIX.5.0) Number of trade reporting indicators*/ \
X(TrdRepPartyRole,                                                       1388) /*!< 1388 (int FIX.5.0) Identifies the type of party for trade reporting. Same values as PartyRole(452).*/ \
X(TrdRepIndicator,                                                       1389) /*!< 1389 (Boolean FIX.5.0) Specifies whether the trade should be reported (or not) to parties of the provided TrdRepPartyRole(1388). Used to override standard reporting behavior by the receiver of the trade report and thereby complements the PublTrdIndicator( tag1390).*/ \
X(TradePublishIndicator,                                                 1390) /*!< 1390 (int FIX.5.0) Indicates if a trade should be or has been published via a market publication service. The indicator governs all publication services of the recipient. Replaces PublishTrdIndicator(852).*/ \
X(UnderlyingLegOptAttribute,                                             1391) /*!< 1391 (char FIX.5.0) Refer to definition of OptAttribute(206)*/ \
X(UnderlyingLegSecurityDesc,                                             1392) /*!< 1392 (String FIX.5.0) Refer to definition of SecurityDesc(107)*/ \
X(MarketReqID,                                                           1393) /*!< 1393 (String FIX.5.0) Unique ID of a Market Definition Request message.*/ \
X(MarketReportID,                                                        1394) /*!< 1394 (String FIX.5.0) Market Definition message identifier.*/ \
X(MarketUpdateAction,                                                    1395) /*!< 1395 (char FIX.5.0) Specifies the action taken for the specified MarketID(1301) + MarketSegmentID(1300).*/ \
X(MarketSegmentDesc,                                                     1396) /*!< 1396 (String FIX.5.0) Description or name of Market Segment*/ \
X(EncodedMktSegmDescLen,                                                 1397) /*!< 1397 (Length FIX.5.0) Byte length of encoded (non-ASCII characters) EncodedMktSegmDesc(1324) field.*/ \
X(EncodedMktSegmDesc,                                                    1398) /*!< 1398 (data FIX.5.0) Encoded (non-ASCII characters) representation of the MarketSegmDesc(1396) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the MarketSegmDesc field.*/ \
X(ApplNewSeqNum,                                                         1399) /*!< 1399 (SeqNum FIX.5.0) Used to specify a new application sequence number.*/ \
X(EncryptedPasswordMethod,                                               1400) /*!< 1400 (int FIX.5.0) Enumeration defining the encryption method used to encrypt password fields. \
 \
At this time there are no encryption methods defined by FPL.*/ \
X(EncryptedPasswordLen,                                                  1401) /*!< 1401 (Length FIX.5.0) Length of the EncryptedPassword(1402) field*/ \
X(EncryptedPassword,                                                     1402) /*!< 1402 (data FIX.5.0) Encrypted password - encrypted via the method specified in the field EncryptedPasswordMethod(1400)*/ \
X(EncryptedNewPasswordLen,                                               1403) /*!< 1403 (Length FIX.5.0) Length of the EncryptedNewPassword(1404) field*/ \
X(EncryptedNewPassword,                                                  1404) /*!< 1404 (data FIX.5.0) Encrypted new password - encrypted via the method specified in the field EncryptedPasswordMethod(1400)*/ \
X(UnderlyingLegMaturityTime,                                             1405) /*!< 1405 (TZTimeOnly FIX.5.0) Time of security's maturity expressed in local time with offset to UTC specified*/ \
X(RefApplExtID,                                                          1406) /*!< 1406 (int FIX.5.0) The extension pack number associated with an application message.*/ \
X(DefaultApplExtID,                                                      1407) /*!< 1407 (int FIX.5.0) The extension pack number that is the default for a FIX session.*/ \
X(DefaultCstmApplVerID,                                                  1408) /*!< 1408 (String FIX.5.0) The default custom application version ID that is the default for a session.*/ \
X(SessionStatus,                                                         1409) /*!< 1409 (int FIX.5.0) Status of a FIX session*/ \
X(Nested4PartySubIDType,                                                 1411) /*!< 1411 (int FIX.5.0) Refer to definition of PartySubIDType(803)*/ \
X(Nested4PartySubID,                                                     1412) /*!< 1412 (String FIX.5.0) Refer to definition of PartySubID(523)*/ \
X(NoNested4PartySubIDs,                                                  1413) /*!< 1413 (NumInGroup FIX.5.0) Refer to definition of NoPartySubIDs(802)*/ \
X(NoNested4PartyIDs,                                                     1414) /*!< 1414 (NumInGroup FIX.5.0) Refer to definition of NoPartyIDs(453)*/ \
X(Nested4PartyID,                                                        1415) /*!< 1415 (String FIX.5.0) Refer to definition of PartyID(448)*/ \
X(Nested4PartyIDSource,                                                  1416) /*!< 1416 (char FIX.5.0) Refer to definition of PartyIDSource(447)*/ \
X(Nested4PartyRole,                                                      1417) /*!< 1417 (int FIX.5.0) Refer to definition of PartyRole(452)*/ \
X(LegLastQty,                                                            1418) /*!< 1418 (Qty FIX.5.0) Fill quantity for the leg instrument*/ \
X(UnderlyingExerciseStyle,                                               1419) /*!< 1419 (int FIX.5.0) Type of exercise of a derivatives security*/ \
X(LegExerciseStyle,                                                      1420) /*!< 1420 (int FIX.5.0) Type of exercise of a derivatives security*/ \
X(LegPriceUnitOfMeasure,                                                 1421) /*!< 1421 (String FIX.5.0) Refer to definition for PriceUnitOfMeasure(1191)*/ \
X(LegPriceUnitOfMeasureQty,                                              1422) /*!< 1422 (Qty FIX.5.0) Refer to definition of PriceUnitOfMeasureQty(1192)*/ \
X(UnderlyingUnitOfMeasureQty,                                            1423) /*!< 1423 (Qty FIX.5.0) Refer to definition of UnitOfMeasureQty(1147)*/ \
X(UnderlyingPriceUnitOfMeasure,                                          1424) /*!< 1424 (String FIX.5.0) Refer to definition for PriceUnitOfMeasure(1191)*/ \
X(UnderlyingPriceUnitOfMeasureQty,                                       1425) /*!< 1425 (Qty FIX.5.0) Refer to definition of PriceUnitOfMeasureQty(1192)*/ \
X(ApplReportType,                                                        1426) /*!< 1426 (int FIX.5.0SP2) Type of report*/ \
X(SideExecID,                                                            1427) /*!< 1427 (String FIX.5.0SP1) When reporting trades, used to reference the identifier of the execution (ExecID) being reported if different ExecIDs were assigned to each side of the trade.*/ \
X(OrderDelay,                                                            1428) /*!< 1428 (int FIX.5.0SP1) Time lapsed from order entry until match, based on the unit of time specified in OrderDelayUnit.  Default is seconds if OrderDelayUnit is not specified. Value = 0, indicates the aggressor (the initiating side of the trade).*/ \
X(OrderDelayUnit,                                                        1429) /*!< 1429 (int FIX.5.0SP1) Time unit in which the OrderDelay(1428) is expressed*/ \
X(VenueType,                                                             1430) /*!< 1430 (char FIX.5.0SP1) Identifies the type of venue where a trade was executed*/ \
X(RefOrdIDReason,                                                        1431) /*!< 1431 (int FIX.5.0SP1) The reason for updating the RefOrdID*/ \
X(OrigCustOrderCapacity,                                                 1432) /*!< 1432 (int FIX.5.0SP1) The customer capacity for this trade at the time of the order/execution. \
 \
Primarily used by futures exchanges to indicate the CTICode (customer type indicator) as required by the US CFTC (Commodity Futures Trading Commission).*/ \
X(RefApplReqID,                                                          1433) /*!< 1433 (String FIX.5.0SP1) Used to reference a previously submitted ApplReqID (1346) from within a subsequent ApplicationMessageRequest(MsgType=BW)*/ \
X(ModelType,                                                             1434) /*!< 1434 (int FIX.5.0SP1) Type of pricing model used*/ \
X(ContractMultiplierUnit,                                                1435) /*!< 1435 (int FIX.5.0SP1) Indicates the type of multiplier being applied to the contract. Can be optionally used to further define what unit ContractMultiplier(tag 231) is expressed in.*/ \
X(LegContractMultiplierUnit,                                             1436) /*!< 1436 (int FIX.5.0SP1) "Indicates the type of multiplier being applied to the contract. Can be optionally used to further define what unit LegContractMultiplier(tag 614) is expressed in. \
 \
*/ \
X(UnderlyingContractMultiplierUnit,                                      1437) /*!< 1437 (int FIX.5.0SP1) Indicates the type of multiplier being applied to the contract. */ \
X(DerivativeContractMultiplierUnit,                                      1438) /*!< 1438 (int FIX.5.0SP1) Indicates the type of multiplier being applied to the contract. Can be optionally used to further define what unit DerivativeContractMultiplier(tag 1266)is expressed in.*/ \
X(FlowScheduleType,                                                      1439) /*!< 1439 (int FIX.5.0SP1) The industry standard flow schedule by which electricity or natural gas is traded. Schedules may exist by regions and on-peak and off-peak status, such as "Western Peak".*/ \
X(LegFlowScheduleType,                                                   1440) /*!< 1440 (int FIX.5.0SP1) The industry standard flow schedule by which electricity or natural gas is traded. Schedules exist by regions and on-peak and off-peak status, such as "Western Peak".*/ \
X(UnderlyingFlowScheduleType,                                            1441) /*!< 1441 (int FIX.5.0SP1) The industry standard flow schedule by which electricity or natural gas is traded. Schedules exist by regions and on-peak and off-peak status, such as "Western Peak".*/ \
X(DerivativeFlowScheduleType,                                            1442) /*!< 1442 (int FIX.5.0SP1) The industry standard flow schedule by which electricity or natural gas is traded. Schedules exist by regions and on-peak and off-peak status, such as "Western Peak".*/ \
X(FillLiquidityInd,                                                      1443) /*!< 1443 (int FIX.5.0SP1) Indicator to identify whether this fill was a result of a liquidity provider providing or liquidity taker taking the liquidity. Applicable only for OrdStatus of Partial or Filled*/ \
X(SideLiquidityInd,                                                      1444) /*!< 1444 (int FIX.5.0SP1) Indicator to identify whether this fill was a result of a liquidity provider providing or liquidity taker taking the liquidity. Applicable only for OrdStatus of Partial or Filled.*/ \
X(NoRateSources,                                                         1445) /*!< 1445 (NumInGroup FIX.5.0SP1) Number of rate sources being specified.*/ \
X(RateSource,                                                            1446) /*!< 1446 (int FIX.5.0SP1) Identifies the source of rate information. \
 \
For FX, the reference source to be used for the FX spot rate.*/ \
X(RateSourceType,                                                        1447) /*!< 1447 (int FIX.5.0SP1) Indicates whether the rate source specified is a primary or secondary source.*/ \
X(ReferencePage,                                                         1448) /*!< 1448 (String FIX.5.0SP1) Identifies the reference "page" from the rate source. \
 \
For FX, the reference page to the spot rate to be used for the reference FX spot rate. \
 \
 \
 \
When RateSource(1446) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(RestructuringType,                                                     1449) /*!< 1449 (String FIX.5.0SP1) A category of CDS credit event in which the underlying bond experiences a restructuring. \
 \
Used to define a CDS instrument.*/ \
X(Seniority,                                                             1450) /*!< 1450 (String FIX.5.0SP1) Specifies which issue (underlying bond) will receive payment priority in the event of a default. \
 \
Used to define a CDS instrument. */ \
X(NotionalPercentageOutstanding,                                         1451) /*!< 1451 (Percentage FIX.5.0SP1) Indicates the notional percentage of the deal that is still outstanding based on the remaining components of the index. \
 \
Used to calculate the true value of a CDS trade or position.*/ \
X(OriginalNotionalPercentageOutstanding,                                 1452) /*!< 1452 (Percentage FIX.5.0SP1) Used to reflect the Original value prior to the application of a credit event. See NotionalPercentageOutstanding(1451).*/ \
X(UnderlyingRestructuringType,                                           1453) /*!< 1453 (String FIX.5.0SP1) See RestructuringType(1449)*/ \
X(UnderlyingSeniority,                                                   1454) /*!< 1454 (String FIX.5.0SP1) See Seniority(1450)*/ \
X(UnderlyingNotionalPercentageOutstanding,                               1455) /*!< 1455 (Percentage FIX.5.0SP1) See NotionalPercentageOutstanding(1451)*/ \
X(UnderlyingOriginalNotionalPercentageOutstanding,                       1456) /*!< 1456 (Percentage FIX.5.0SP1) See OriginalNotionalPercentageOutstanding(1452)*/ \
X(AttachmentPoint,                                                       1457) /*!< 1457 (Percentage FIX.5.0SP1) Lower bound percentage of the loss that the tranche can endure.*/ \
X(DetachmentPoint,                                                       1458) /*!< 1458 (Percentage FIX.5.0SP1) Upper bound percentage of the loss the tranche can endure.*/ \
X(UnderlyingAttachmentPoint,                                             1459) /*!< 1459 (Percentage FIX.5.0SP1) See AttachmentPoint(1457).*/ \
X(UnderlyingDetachmentPoint,                                             1460) /*!< 1460 (Percentage FIX.5.0SP1) See DetachmentPoint(1458).*/ \
X(NoTargetPartyIDs,                                                      1461) /*!< 1461 (NumInGroup FIX.5.0SP1) Identifies the number of target parties identified in a mass action.*/ \
X(TargetPartyID,                                                         1462) /*!< 1462 (String FIX.5.0SP1) PartyID value within an target party repeating group.*/ \
X(TargetPartyIDSource,                                                   1463) /*!< 1463 (char FIX.5.0SP1) PartyIDSource value within an target party repeating group. \
 \
Same values as PartyIDSource (447)*/ \
X(TargetPartyRole,                                                       1464) /*!< 1464 (int FIX.5.0SP1) PartyRole value within an target party repeating group. \
 \
Same values as PartyRole (452)*/ \
X(SecurityListID,                                                        1465) /*!< 1465 (String FIX.5.0SP1) Specifies an identifier for a Security List*/ \
X(SecurityListRefID,                                                     1466) /*!< 1466 (String FIX.5.0SP1) Specifies a reference from one Security List to another. Used to support a hierarchy of Security Lists.*/ \
X(SecurityListDesc,                                                      1467) /*!< 1467 (String FIX.5.0SP1) Specifies a description or name of a Security List.*/ \
X(EncodedSecurityListDescLen,                                            1468) /*!< 1468 (Length FIX.5.0SP1) Byte length of encoded (non-ASCII characters) EncodedSecurityListDesc (tbd) field.*/ \
X(EncodedSecurityListDesc,                                               1469) /*!< 1469 (data FIX.5.0SP1) Encoded (non-ASCII characters) representation of the SecurityListDesc (1467) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the SecurityListDesc field.*/ \
X(SecurityListType,                                                      1470) /*!< 1470 (int FIX.5.0SP1) Specifies a type of Security List.*/ \
X(SecurityListTypeSource,                                                1471) /*!< 1471 (int FIX.5.0SP1) Specifies a specific source for a SecurityListType. Relevant when a certain type can be provided from various sources.*/ \
X(NewsID,                                                                1472) /*!< 1472 (String FIX.5.0SP1) Unique identifier for a News message*/ \
X(NewsCategory,                                                          1473) /*!< 1473 (int FIX.5.0SP1) Category of news mesage.*/ \
X(LanguageCode,                                                          1474) /*!< 1474 (Language FIX.5.0SP1) The national language in which the news item is provided.*/ \
X(NoNewsRefIDs,                                                          1475) /*!< 1475 (NumInGroup FIX.5.0SP1) Number of News reference items*/ \
X(NewsRefID,                                                             1476) /*!< 1476 (String FIX.5.0SP1) Reference to another News message identified by NewsID(1474).*/ \
X(NewsRefType,                                                           1477) /*!< 1477 (int FIX.5.0SP1) Type of reference to another News(35=B) message item.*/ \
X(StrikePriceDeterminationMethod,                                        1478) /*!< 1478 (int FIX.5.0SP1) Specifies how the strike price is determined at the point of option exercise. The strike may be fixed throughout the life of the option, set at expiration to the value of the underlying, set to the average value of the underlying , or set to the optimal value of the underlying. */ \
X(StrikePriceBoundaryMethod,                                             1479) /*!< 1479 (int FIX.5.0SP1) Specifies the boundary condition to be used for the strike price relative to the underlying price at the point of option exercise.*/ \
X(StrikePriceBoundaryPrecision,                                          1480) /*!< 1480 (Percentage FIX.5.0SP1) Used in combination with StrikePriceBoundaryMethod to specify the percentage of the strike price in relation to the  underlying price. The percentage is generally 100 or greater for puts and 100 or less for calls.*/ \
X(UnderlyingPriceDeterminationMethod,                                    1481) /*!< 1481 (int FIX.5.0SP1) Specifies how the underlying price is determined at the point of option exercise. The underlying price may be set to the current settlement price, set to a special reference, set to the optimal value of the underlying during the defined period ("Look-back") or set to the average value of the underlying during the defined period ("Asian option").*/ \
X(OptPayoutType,                                                         1482) /*!< 1482 (int FIX.5.0SP1) Indicates the type of valuation method or payout trigger for an in-the-money option.*/ \
X(NoComplexEvents,                                                       1483) /*!< 1483 (NumInGroup FIX.5.0SP1) Number of complex event occurrences.*/ \
X(ComplexEventType,                                                      1484) /*!< 1484 (int FIX.5.0SP1) Identifies the type of complex event.*/ \
X(ComplexOptPayoutAmount,                                                1485) /*!< 1485 (Amt FIX.5.0SP1) Cash amount indicating the pay out associated with an event. For binary options this is a fixed amount.*/ \
X(ComplexEventPrice,                                                     1486) /*!< 1486 (Price FIX.5.0SP1) Specifies the price at which the complex event takes effect. Impact of the event price is determined by the ComplexEventType(1484).*/ \
X(ComplexEventPriceBoundaryMethod,                                       1487) /*!< 1487 (int FIX.5.0SP1) Specifies the boundary condition to be used for the event price relative to the underlying price at the point the complex event outcome takes effect as determined by the ComplexEventPriceTimeType.*/ \
X(ComplexEventPriceBoundaryPrecision,                                    1488) /*!< 1488 (Percentage FIX.5.0SP1) Used in combination with ComplexEventPriceBoundaryMethod to specify the percentage of the strike price in relation to the  underlying price. The percentage is generally 100 or greater for puts and 100 or less for calls.*/ \
X(ComplexEventPriceTimeType,                                             1489) /*!< 1489 (int FIX.5.0SP1) Specifies when the complex event outcome takes effect. The outcome of a complex event is a payout or barrier action as specified by the ComplexEventType(1484).*/ \
X(ComplexEventCondition,                                                 1490) /*!< 1490 (int FIX.5.0SP1) Specifies the condition between complex events when more than one event is specified.   \
 \
Multiple barrier events would use an "or" condition since only one can be effective at a given time. A set of digital range events would use an "and" condition since both conditions must be in effect for a payout to result.*/ \
X(NoComplexEventDates,                                                   1491) /*!< 1491 (NumInGroup FIX.5.0SP1) Number of complex event date occurrences for a given complex event.*/ \
X(ComplexEventStartDate,                                                 1492) /*!< 1492 (UTCDateOnly FIX.5.0SP1) Specifies the start date of the date range on which a complex event is effective. The start date will be set equal to the end date for single day events such as Bermuda options \
 \
ComplexEventStartDate must always be less than or equal to ComplexEventEndDate.*/ \
X(ComplexEventEndDate,                                                   1493) /*!< 1493 (UTCDateOnly FIX.5.0SP1) Specifies the end date of the date range on which a complex event is effective. The start date will be set equal to the end date for single day events such as Bermuda options \
 \
ComplexEventEndDate must always be greater than or equal to ComplexEventStartDate.*/ \
X(NoComplexEventTimes,                                                   1494) /*!< 1494 (NumInGroup FIX.5.0SP1) Number of complex event time occurrences for a given complex event date \
 \
The default in case of an absence of time fields is 00:00:00-23:59:59.*/ \
X(ComplexEventStartTime,                                                 1495) /*!< 1495 (UTCTimeOnly FIX.5.0SP1) Specifies the start time of the time range on which a complex event date is effective.  \
 \
ComplexEventStartTime must always be less than or equal to ComplexEventEndTime.*/ \
X(ComplexEventEndTime,                                                   1496) /*!< 1496 (UTCTimeOnly FIX.5.0SP1) Specifies the end time of the time range on which a complex event date is effective. \
 \
ComplexEventEndTime must always be greater than or equal to ComplexEventStartTime.*/ \
X(StreamAsgnReqID,                                                       1497) /*!< 1497 (String FIX.5.0SP1) Unique identifier for the stream assignment request provided by the requester.*/ \
X(StreamAsgnReqType,                                                     1498) /*!< 1498 (int FIX.5.0SP1) Type of stream assignment request.*/ \
X(NoAsgnReqs,                                                            1499) /*!< 1499 (NumInGroup FIX.5.0SP1) Number of assignment requests.*/ \
X(MDStreamID,                                                            1500) /*!< 1500 (String FIX.5.0SP1) The identifier or name of the price stream.*/ \
X(StreamAsgnRptID,                                                       1501) /*!< 1501 (String FIX.5.0SP1) Unique identifier of the stream assignment report provided by the respondent.*/ \
X(StreamAsgnRejReason,                                                   1502) /*!< 1502 (int FIX.5.0SP1) Reason code for stream assignment request reject.*/ \
X(StreamAsgnAckType,                                                     1503) /*!< 1503 (int FIX.5.0SP1) Type of acknowledgement.*/ \
X(RelSymTransactTime,                                                    1504) /*!< 1504 (UTCTimestamp FIX.5.0SP1) See TransactTime(60)*/ \
X(PartyDetailsListRequestID,                                             1505) /*!< 1505 (String FIX.5.0SP2) Unique identifier for PartyDetailsListRequest.*/ \
X(SideTradeID,                                                           1506) /*!< 1506 (String FIX.5.0SP2) Used to represent the trade ID for each side of the trade assigned by an intermediary.*/ \
X(SideOrigTradeID,                                                       1507) /*!< 1507 (String FIX.5.0SP2) Used to capture the original trade id for each side of a trade undergoing novation to a standardized model.*/ \
X(NoRequestedPartyRoles,                                                 1508) /*!< 1508 (NumInGroup FIX.5.0SP2) Number of requested party roles.*/ \
X(RequestedPartyRole,                                                    1509) /*!< 1509 (int FIX.5.0SP2) Identifies the type or role of party that has been requested.*/ \
X(PartyDetailsListReportID,                                              1510) /*!< 1510 (String FIX.5.0SP2) Identifier for the PartyDetailsListReport and the PartyDetailsListUpdateReport.*/ \
X(RequestResult,                                                         1511) /*!< 1511 (int FIX.5.0SP2) Result of a request as identified by the appropriate request ID field*/ \
X(TotNoParties,                                                          1512) /*!< 1512 (int FIX.5.0SP2) Total number of PartyListGrp returned.*/ \
X(DocumentationText,                                                     1513) /*!< 1513 (String FIX.5.0SP2) A sentence or phrase pertenant to the trade, not a reference to an external document. E.g. "To be registered with the U.S. Environmental Protection Agency, Acid Rain Division, SO2 Allowance Tracking System"*/ \
X(NoPartyRelationships,                                                  1514) /*!< 1514 (NumInGroup FIX.5.0SP2) Number of party relationships.*/ \
X(PartyRelationship,                                                     1515) /*!< 1515 (int FIX.5.0SP2) Used to specify the type of the party relationship.*/ \
X(NoPartyDetailAltID,                                                    1516) /*!< 1516 (NumInGroup FIX.5.0SP2) Number of party alternative identifiers.*/ \
X(PartyDetailAltID,                                                      1517) /*!< 1517 (String FIX.5.0SP2) An alternate party identifier for the party specified in PartyDetailID(1691)*/ \
X(PartyDetailAltIDSource,                                                1518) /*!< 1518 (char FIX.5.0SP2) Identifies the source of the PartyDetailAltID(1517) value.*/ \
X(NoPartyDetailAltSubIDs,                                                1519) /*!< 1519 (NumInGroup FIX.5.0SP2) Number of party detail alternate sub-identifiers.*/ \
X(PartyDetailAltSubID,                                                   1520) /*!< 1520 (String FIX.5.0SP2) Sub-identifier for the party specified in PartyDetailAltID(1517).*/ \
X(PartyDetailAltSubIDType,                                               1521) /*!< 1521 (int FIX.5.0SP2) Type of PartyDetailAltSubID(1520) value.*/ \
X(DifferentialPrice,                                                     1522) /*!< 1522 (PriceOffset FIX.5.0SP2) Used to specify the differential price when reporting the individual leg of a spread trade. Both leg price and differential price may be provided on such a report. Note that MultiLegReportingType(442) will be set to 2 (Individual leg of a multi-leg security) in this case. \
 \
Also used in pricing Trade at Settlement (TAS) and Trade At Marker (TAM) contracts for which the value is the negotiated currency offset either at settlement (TAS) or at time specified in the product definition (TAM). The final contract price is specified in LastPx(31).*/ \
X(TrdAckStatus,                                                          1523) /*!< 1523 (int FIX.5.0SP2) Used to indicate the status of the trade submission (not the trade report)*/ \
X(PriceQuoteCurrency,                                                    1524) /*!< 1524 (Currency FIX.5.0SP2) Default currency in which the price is quoted. Defined at the instrument level. Used in place of Currency (tag 15) to express the currency of a product when the former is implemented as the FX dealt currency.*/ \
X(EncodedDocumentationTextLen,                                           1525) /*!< 1525 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedDocumentationText(1527) field.*/ \
X(UnderlyingPriceQuoteCurrency,                                          1526) /*!< 1526 (Currency FIX.5.0SP2) Default currency in which the price is quoted. Defined at the instrument level. Used in place of Currency (tag 15) to express the currency of a product when the former is implemented as the FX dealt currency.*/ \
X(EncodedDocumentationText,                                              1527) /*!< 1527 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the DocumentationText(1513) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the DocumentationText(1513) field.*/ \
X(LegPriceQuoteCurrency,                                                 1528) /*!< 1528 (Currency FIX.5.0SP2) Default currency in which the price is quoted. Defined at the instrument level. Used in place of Currency (tag 15) to express the currency of a product when the former is implemented as the FX dealt currency.*/ \
X(NoRiskLimitTypes,                                                      1529) /*!< 1529 (NumInGroup FIX.5.0SP2) Number of risk limits with associated warning levels.*/ \
X(RiskLimitType,                                                         1530) /*!< 1530 (int FIX.5.0SP2) Used to specify the type of risk limit amount or position limit quantity or margin requirement amounts.*/ \
X(RiskLimitAmount,                                                       1531) /*!< 1531 (Amt FIX.5.0SP2) Specifies the risk limit amount.*/ \
X(RiskLimitCurrency,                                                     1532) /*!< 1532 (Currency FIX.5.0SP2) Used to specify the currency of the risk limit amount.*/ \
X(RiskLimitPlatform,                                                     1533) /*!< 1533 (String FIX.5.0SP2) The area to which risk limit is applicable. This can be a trading platform or an offering.*/ \
X(NoRiskInstrumentScopes,                                                1534) /*!< 1534 (NumInGroup FIX.5.0SP2) Number of risk instrument scopes.*/ \
X(InstrumentScopeOperator,                                               1535) /*!< 1535 (int FIX.5.0SP2) Operator to perform on the instrument(s) specified*/ \
X(InstrumentScopeSymbol,                                                 1536) /*!< 1536 (String FIX.5.0SP2) Used to limit instrument scope to specified symbol. \
 \
See Symbol(55) field for description.*/ \
X(InstrumentScopeSymbolSfx,                                              1537) /*!< 1537 (String FIX.5.0SP2) Used to limit instrument scope to specified symbol suffix. \
 \
See SymbolSfx(65) field for description.*/ \
X(InstrumentScopeSecurityID,                                             1538) /*!< 1538 (String FIX.5.0SP2) Used to limit instrument scope to specified security identifier. \
 \
See SecurityID(48) field for description.*/ \
X(InstrumentScopeSecurityIDSource,                                       1539) /*!< 1539 (String FIX.5.0SP2) Used to limit instrument scope to specified security identifier source. \
 \
See SecurityIDSource(22) field for description.*/ \
X(NoInstrumentScopeSecurityAltID,                                        1540) /*!< 1540 (NumInGroup FIX.5.0SP2) Number of alternate security identifier for the specified InstrumentScopeSecurityID(1538).*/ \
X(InstrumentScopeSecurityAltID,                                          1541) /*!< 1541 (String FIX.5.0SP2) Used to limit instrument scope to specified security alternate identifier. \
 \
See SecurityAltID(455) field for description.*/ \
X(InstrumentScopeSecurityAltIDSource,                                    1542) /*!< 1542 (String FIX.5.0SP2) Used to limit instrument scope to specified security alternate identifier source. \
 \
See SecurityAltIDSource(456) field for description.*/ \
X(InstrumentScopeProduct,                                                1543) /*!< 1543 (int FIX.5.0SP2) Used to limit instrument scope to specified instrument product category. \
 \
See Product (460) field for description.*/ \
X(InstrumentScopeProductComplex,                                         1544) /*!< 1544 (String FIX.5.0SP2) Used to limit instrument scope to specified product complex. \
 \
See ProductComplex(1227) field for description.*/ \
X(InstrumentScopeSecurityGroup,                                          1545) /*!< 1545 (String FIX.5.0SP2) Used to limit instrument scope to specified security group. \
 \
See SecurityGroup(1151) field for description.*/ \
X(InstrumentScopeCFICode,                                                1546) /*!< 1546 (String FIX.5.0SP2) Used to limit instrument scope to specified CFICode. \
 \
See CFICode(461) field for description.*/ \
X(InstrumentScopeSecurityType,                                           1547) /*!< 1547 (String FIX.5.0SP2) Used to limit instrument scope to specified security type. \
 \
See SecurityType(167) field for description).*/ \
X(InstrumentScopeSecuritySubType,                                        1548) /*!< 1548 (String FIX.5.0SP2) Used to limit instrument scope to specified security sub-type. \
 \
See SecuritySubType(762) field for description.*/ \
X(InstrumentScopeMaturityMonthYear,                                      1549) /*!< 1549 (MonthYear FIX.5.0SP2) Used to limit instrument scope to specified maturity month and year. \
 \
See MaturityMonthYear(200) field for description.*/ \
X(InstrumentScopeMaturityTime,                                           1550) /*!< 1550 (TZTimeOnly FIX.5.0SP2) Used to limit instrument scope to specified maturity time. \
 \
See MaturityTime(1079) field for description.*/ \
X(InstrumentScopeRestructuringType,                                      1551) /*!< 1551 (String FIX.5.0SP2) Used to limit instrument scope to specified restructuring type. \
 \
See RestructuringType(1449) field for description.*/ \
X(InstrumentScopeSeniority,                                              1552) /*!< 1552 (String FIX.5.0SP2) Used to limit instrument scope to specified seniority type. \
 \
See Seniority(1450) field for description.*/ \
X(InstrumentScopePutOrCall,                                              1553) /*!< 1553 (int FIX.5.0SP2) Used to limit instrument scope to puts or calls. \
 \
See PutOrCall(201) field for description.*/ \
X(InstrumentScopeFlexibleIndicator,                                      1554) /*!< 1554 (Boolean FIX.5.0SP2) Used to limit instrument scope to securities that can be defined using flexible terms or not. \
 \
See FlexibleIndicator(1244) field for description.*/ \
X(InstrumentScopeCouponRate,                                             1555) /*!< 1555 (Percentage FIX.5.0SP2) Used to limit instrument scope to specified coupon rate. \
 \
See CouponRate(223) field for description.*/ \
X(InstrumentScopeSecurityDesc,                                           1556) /*!< 1556 (String FIX.5.0SP2) Used to limit instrument scope to specified security description. \
 \
See SecurityDesc(107) field for description.*/ \
X(InstrumentScopeSettlType,                                              1557) /*!< 1557 (String FIX.5.0SP2) Used to limit instrument scope to specified settlement type. \
 \
See SettlType(63) field for description.*/ \
X(RiskInstrumentMultiplier,                                              1558) /*!< 1558 (float FIX.5.0SP2) Multiplier applied to the transaction amount for comparison with risk limits. Default if not specified is 1.0.*/ \
X(NoRiskWarningLevels,                                                   1559) /*!< 1559 (NumInGroup FIX.5.0SP2) Number of risk warning levels.*/ \
X(RiskWarningLevelPercent,                                               1560) /*!< 1560 (Percentage FIX.5.0SP2) Percent of risk limit at which a warning is issued.*/ \
X(RiskWarningLevelName,                                                  1561) /*!< 1561 (String FIX.5.0SP2) Name or error message associated with the risk warning level.*/ \
X(NoRelatedPartyDetailID,                                                1562) /*!< 1562 (NumInGroup FIX.5.0SP2) Number of related party detail identifiers.*/ \
X(RelatedPartyDetailID,                                                  1563) /*!< 1563 (String FIX.5.0SP2) Party identifier for the party related to the party specified in PartyDetailID(1691).*/ \
X(RelatedPartyDetailIDSource,                                            1564) /*!< 1564 (char FIX.5.0SP2) Identifies the source of the RelatedPartyDetailID(1563).*/ \
X(RelatedPartyDetailRole,                                                1565) /*!< 1565 (int FIX.5.0SP2) Identifies the type or role of the RelatedPartyDetailID(1563) specified.*/ \
X(NoRelatedPartyDetailSubIDs,                                            1566) /*!< 1566 (NumInGroup FIX.5.0SP2) Number of related party detail sub-identifiers.*/ \
X(RelatedPartyDetailSubID,                                               1567) /*!< 1567 (String FIX.5.0SP2) Sub-identifier for the party specified in RelatedPartyID(1563).*/ \
X(RelatedPartyDetailSubIDType,                                           1568) /*!< 1568 (int FIX.5.0SP2) Type of RelatedPartyDetailSubID(1567) value.*/ \
X(NoRelatedPartyDetailAltID,                                             1569) /*!< 1569 (NumInGroup FIX.5.0SP2) Number of related party detail alternate identifiers.*/ \
X(RelatedPartyDetailAltID,                                               1570) /*!< 1570 (String FIX.5.0SP2) An alternate party identifier for the party specified in RelatedPartyID(1563).*/ \
X(RelatedPartyDetailAltIDSource,                                         1571) /*!< 1571 (char FIX.5.0SP2) Identifies the source of the RelatedPartyDetailAltID(1570) value.*/ \
X(NoRelatedPartyDetailAltSubIDs,                                         1572) /*!< 1572 (NumInGroup FIX.5.0SP2) Number of related party detail alternate sub-identifiers.*/ \
X(RelatedPartyDetailAltSubID,                                            1573) /*!< 1573 (String FIX.5.0SP2) Sub-identifier for the party specified in RelatedPartyDetailAltID(1570).*/ \
X(RelatedPartyDetailAltSubIDType,                                        1574) /*!< 1574 (int FIX.5.0SP2) Type of RelatedPartyDetailAltSubID(1573) value.*/ \
X(SwapSubClass,                                                          1575) /*!< 1575 (String FIX.5.0SP2) The sub-classification or notional schedule type of the swap.*/ \
X(DerivativePriceQuoteCurrency,                                          1576) /*!< 1576 (Currency FIX.5.0SP2) Default currency in which the price is quoted. Defined at the instrument level. Used in place of Currency (tag 15) to express the currency of a product when the former is implemented as the FX dealt currency.*/ \
X(SettlRateIndex,                                                        1577) /*!< 1577 (String FIX.5.0SP2) In an outright or forward commodity trade that is cash settled this is the index used to determine the cash payment.*/ \
X(EncodedEventTextLen,                                                   1578) /*!< 1578 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedEventText(868) fied.*/ \
X(EncodedEventText,                                                      1579) /*!< 1579 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the EventText(868) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the EventText(868) field.*/ \
X(SettlRateIndexLocation,                                                1580) /*!< 1580 (String FIX.5.0SP2) This is an optional qualifying attribute of SettlRateIndex(1577) such as the delivery zone for an electricity contract.*/ \
X(OptionExpirationDesc,                                                  1581) /*!< 1581 (String FIX.5.0SP2) Description of the option expiration.*/ \
X(NoSecurityClassifications,                                             1582) /*!< 1582 (NumInGroup FIX.5.0SP2) Number of Security Classifications.*/ \
X(SecurityClassificationReason,                                          1583) /*!< 1583 (int FIX.5.0SP2) Allows classification of instruments according to a set of high level reasons. Classification reasons describe the classes in which the instrument participates.*/ \
X(SecurityClassificationValue,                                           1584) /*!< 1584 (String FIX.5.0SP2) Specifies the product classification value which further details the manner in which the instrument participates in the class.*/ \
X(PosAmtReason,                                                          1585) /*!< 1585 (int FIX.5.0SP2) Specifies the reason for an amount type when reported on a position. Useful when multiple instances of the same amount type are reported.*/ \
X(NoLegPosAmt,                                                           1586) /*!< 1586 (NumInGroup FIX.5.0SP2) Number of TrdInstrmtLegPosAmt values.*/ \
X(LegPosAmt,                                                             1587) /*!< 1587 (Amt FIX.5.0SP2) Leg position amount.*/ \
X(LegPosAmtType,                                                         1588) /*!< 1588 (String FIX.5.0SP2) Type of leg position amount.*/ \
X(LegPosCurrency,                                                        1589) /*!< 1589 (Currency FIX.5.0SP2) Leg position currency.*/ \
X(LegPosAmtReason,                                                       1590) /*!< 1590 (int FIX.5.0SP2) Specifies the reason for an amount type when reported on a position. Useful when multiple instances of the same amount type are reported.*/ \
X(LegQtyType,                                                            1591) /*!< 1591 (int FIX.5.0SP2) Type of quantity specified in LegQty field. LegContractMultiplier (614) is required when LegQtyType = 1 (Contracts). LegUnitOfMeasure (tag 999) and LegTimeUnit (tag 1001) are required when LegQtyType = 2 (Units of Measure per Time Unit). LegQtyType can be different for each leg. */ \
X(DiscountFactor,                                                        1592) /*!< 1592 (float FIX.5.0SP2) Used to calculate the present value of an amount to be paid in the future.*/ \
X(ParentAllocID,                                                         1593) /*!< 1593 (String FIX.5.0SP2) Contains the IndividualAllocId (tag 467) value of the allocation that is being offset as a result of a new allocation. This would be an optional field that would only be populated in the case of an allocation of an allocation (as well as any subsequent allocations). This wouldn’t be populated for an initial allocation since an allocation id is not supplied on default (initial) allocations.*/ \
X(LegSecurityGroup,                                                      1594) /*!< 1594 (String FIX.5.0SP2) Represents the product group of a leg.This is useful in conveying multi-leg instruments where the legs may participate in separate security groups.*/ \
X(PositionContingentPrice,                                               1595) /*!< 1595 (Price FIX.5.0SP2) Risk adjusted price used to calculate variation margin on a position.*/ \
X(ClearingTradePrice,                                                    1596) /*!< 1596 (Price FIX.5.0SP2) Alternate clearing price*/ \
X(SideClearingTradePrice,                                                1597) /*!< 1597 (Price FIX.5.0SP2) Alternate clearing price for the side being reported.*/ \
X(SideClearingTradePriceType,                                            1598) /*!< 1598 (int FIX.5.0SP2) Indicates to recipient whether trade is clearing at execution prices LastPx(tag 31) or alternate clearing prices SideClearingTradePrice(tag 1597).*/ \
X(SidePriceDifferential,                                                 1599) /*!< 1599 (Price FIX.5.0SP2) Price Differential between the front and back leg of a spread or complex instrument.*/ \
X(FIXEngineName,                                                         1600) /*!< 1600 (String FIX.5.0SP2) Provides the name of the infrastructure component being used for session level communication. Normally this would be the FIX Engine or FIX Gateway product name.*/ \
X(FIXEngineVersion,                                                      1601) /*!< 1601 (String FIX.5.0SP2) Provides the version of the infrastructure component.*/ \
X(FIXEngineVendor,                                                       1602) /*!< 1602 (String FIX.5.0SP2) Provides the name of the vendor providing the infrastructure component.*/ \
X(ApplicationSystemName,                                                 1603) /*!< 1603 (String FIX.5.0SP2) Provides the name of the application system being used to generate FIX application messages. This will normally be a trading system, OMS, or EMS.*/ \
X(ApplicationSystemVersion,                                              1604) /*!< 1604 (String FIX.5.0SP2) Provides the version of the application system being used to initiate FIX application messages.*/ \
X(ApplicationSystemVendor,                                               1605) /*!< 1605 (String FIX.5.0SP2) Provides the vendor of the application system.*/ \
X(NumOfSimpleInstruments,                                                1606) /*!< 1606 (int FIX.5.0SP2) Represents the total number of simple instruments that make up a multi-legged security. Complex spread instruments may be constructed of legs which themselves are multi-leg instruments.*/ \
X(SecurityRejectReason,                                                  1607) /*!< 1607 (int FIX.5.0SP2) Identifies the reason  a security definition request is being rejected.*/ \
X(InitialDisplayQty,                                                     1608) /*!< 1608 (Qty FIX.5.0SP2) Used to convey the initially requested display quantity specified in DisplayQty(1138) on order entry and modification messages in ExecutionReport message. Applicable only in ExecutionReport message where DisplayQty(1138) is the currently displayed quantity and the requested display quantity of the order also needs to be conveyed. The values of the two fields are different as soon as the order is partially filled and also after a refresh of the order whenever DisplayMethod(1084) is not 1=Initial.*/ \
X(ThrottleStatus,                                                        1609) /*!< 1609 (int FIX.5.0SP2) Indicates whether a message was queued as a result of throttling.*/ \
X(NoThrottles,                                                           1610) /*!< 1610 (NumInGroup FIX.5.0SP2) Indicates number of repeating groups to follow.*/ \
X(ThrottleAction,                                                        1611) /*!< 1611 (int FIX.5.0SP2) Action to take should throttle limit be exceeded.*/ \
X(ThrottleType,                                                          1612) /*!< 1612 (int FIX.5.0SP2) Type of throttle.*/ \
X(ThrottleNoMsgs,                                                        1613) /*!< 1613 (int FIX.5.0SP2) Maximum number of messages allowed by the throttle. May be a rate limit or a limit on the number of outstanding requests.*/ \
X(ThrottleTimeInterval,                                                  1614) /*!< 1614 (int FIX.5.0SP2) Value of the time interval in which the rate throttle is applied.*/ \
X(ThrottleTimeUnit,                                                      1615) /*!< 1615 (int FIX.5.0SP2) Units in which ThrottleTimeInterval is expressed. Uses same enumerations as OrderDelayUnit(1429).*/ \
X(InstrumentScopeSecurityExchange,                                       1616) /*!< 1616 (Exchange FIX.5.0SP2) Used to limit instrument scope to specified security exchange. \
 \
See SecurityExchange(207) field for description.*/ \
X(StreamAsgnType,                                                        1617) /*!< 1617 (int FIX.5.0SP1) The type of assignment being affected in the Stream Assignment Report.*/ \
X(NoThrottleMsgType,                                                     1618) /*!< 1618 (NumInGroup FIX.5.0SP2) Number of ThrottleMsgType fields.*/ \
X(ThrottleMsgType,                                                       1619) /*!< 1619 (String FIX.5.0SP2) The MsgType (35) of the FIX message being referenced.*/ \
X(InstrumentScopeEncodedSecurityDescLen,                                 1620) /*!< 1620 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) InstrumentScopeEncodedSecurityDesc (1621) field*/ \
X(InstrumentScopeEncodedSecurityDesc,                                    1621) /*!< 1621 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the InstrumentScopeSecurityDesc (1556) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the InstrumentScopeSecurityDesc field.*/ \
X(FillYieldType,                                                         1622) /*!< 1622 (String FIX.5.0SP2) Yield Type, using same values as YieldType (235)*/ \
X(FillYield,                                                             1623) /*!< 1623 (Percentage FIX.5.0SP2) Yield Percentage, using same values as Yield (236)*/ \
X(NoMatchInst,                                                           1624) /*!< 1624 (NumInGroup FIX.5.0SP2) Number of Instructions in the &lt;MatchingInstructions&gt; repeating group.*/ \
X(MatchInst,                                                             1625) /*!< 1625 (int FIX.5.0SP2) Matching Instruction for the order.*/ \
X(MatchAttribTagID,                                                      1626) /*!< 1626 (TagNum FIX.5.0SP2) Existing FIX field to be applied as a matching criteria to the instruction, bilaterally agreed between parties.*/ \
X(MatchAttribValue,                                                      1627) /*!< 1627 (String FIX.5.0SP2) Value of MatchAttribTagID(1626) on which to apply the matching instruction.*/ \
X(TriggerScope,                                                          1628) /*!< 1628 (int FIX.5.0SP2) Defines the scope of TriggerAction(1101) when it is set to "cancel" (3).*/ \
X(ExposureDuration,                                                      1629) /*!< 1629 (int FIX.5.0SP2) This is the time in seconds of a "Good for Time" (GFT) TimeInForce. \
 \
Positive integer value which represents the time is seconds in which the new order remains active in the market before it is automatically cancelled (e.g. expired). \
 \
Bi-lateral agreements will dictate the maximum value of this field. It is assumed that most systems will impose a max limit of 86,400 seconds (i.e. 24 hours). \
 \
For Quotes: The period of time a quoted price is tradable(i.e. on-the-wire) before it becomes indicative (i.e. off-the-wire).*/ \
X(NoLimitAmts,                                                           1630) /*!< 1630 (NumInGroup FIX.5.0SP2) The number of limit amount entries.*/ \
X(LimitAmtType,                                                          1631) /*!< 1631 (int FIX.5.0SP2) Identifies the type of limit amount expressed in LastLimitAmt(1632) and LimitAmtRemaining(1633).*/ \
X(LastLimitAmt,                                                          1632) /*!< 1632 (Amt FIX.5.0SP2) The amount that has been drawn down against the counterparty for a given trade.  The type of limit is specified in LimitAmtType(1631). \
 \
						Bilateral agreements dictate the units and maximum value of this field.*/ \
X(LimitAmtRemaining,                                                     1633) /*!< 1633 (Amt FIX.5.0SP2) The remaining limit amount available between the counterparties.  The type of limit is specified in LimitAmtType(1631). \
 \
						Bilateral agreements dictate the units and maximum value of this field.*/ \
X(LimitAmtCurrency,                                                      1634) /*!< 1634 (Currency FIX.5.0SP2) Indicates the currency that the limit amount is specified in.  See Currency(15) for additional description and valid values.*/ \
X(MarginReqmtInqID,                                                      1635) /*!< 1635 (String FIX.5.0SP2) Unique identifier of the MarginRequirementInquiry.*/ \
X(NoMarginReqmtInqQualifier,                                             1636) /*!< 1636 (NumInGroup FIX.5.0SP2) Number of margin requirement inquiry qualifiers.*/ \
X(MarginReqmtInqQualifier,                                               1637) /*!< 1637 (int FIX.5.0SP2) Qualifier for MarginRequirementInquiry to identify a specific report.*/ \
X(MarginReqmtRptType,                                                    1638) /*!< 1638 (int FIX.5.0SP2) Type of MarginRequirementReport.*/ \
X(MarginClass,                                                           1639) /*!< 1639 (String FIX.5.0SP2) Identifier for group of instruments with similar risk profile.*/ \
X(MarginReqmtInqStatus,                                                  1640) /*!< 1640 (int FIX.5.0SP2) Status of MarginRequirementInquiry.*/ \
X(MarginReqmtInqResult,                                                  1641) /*!< 1641 (int FIX.5.0SP2) Result returned in response to MarginRequirementInquiry.*/ \
X(MarginReqmtRptID,                                                      1642) /*!< 1642 (String FIX.5.0SP2) Identifier for the MarginRequirementReport message.*/ \
X(NoMarginAmt,                                                           1643) /*!< 1643 (NumInGroup FIX.5.0SP2) Number of margin requirement amounts.*/ \
X(MarginAmtType,                                                         1644) /*!< 1644 (int FIX.5.0SP2) Type of margin requirement amount being specified.*/ \
X(MarginAmt,                                                             1645) /*!< 1645 (Amt FIX.5.0SP2) Amount of margin requirement.*/ \
X(MarginAmtCcy,                                                          1646) /*!< 1646 (Currency FIX.5.0SP2) Currency of the MarginAmt(1645).*/ \
X(NoRelatedInstruments,                                                  1647) /*!< 1647 (NumInGroup FIX.5.0SP2) Number of related instruments*/ \
X(RelatedInstrumentType,                                                 1648) /*!< 1648 (int FIX.5.0SP2) The type of instrument relationship*/ \
X(RelatedSymbol,                                                         1649) /*!< 1649 (String FIX.5.0SP2) Ticker symbol of the related security. Common "human understood" representation of the security. */ \
X(RelatedSecurityID,                                                     1650) /*!< 1650 (String FIX.5.0SP2) Related security identifier value of RelatedSecurityIDSource(1651) type.*/ \
X(RelatedSecurityIDSource,                                               1651) /*!< 1651 (String FIX.5.0SP2) Identifies class or source of the RelatedSecurityID (1650) value. */ \
X(RelatedSecurityType,                                                   1652) /*!< 1652 (String FIX.5.0SP2) Security type of the related instrument. */ \
X(RelatedMaturityMonthYear,                                              1653) /*!< 1653 (MonthYear FIX.5.0SP2) Expiration date for the related instrument contract.*/ \
X(CoveredQty,                                                            1654) /*!< 1654 (Qty FIX.5.0SP2) Used to specify the portion of the short contract quantity that is considered covered (e.g. used for short option position).*/ \
X(MarketMakerActivity,                                                   1655) /*!< 1655 (int FIX.5.0SP2) Indicates market maker participation in security.*/ \
X(NoInstrumentScopes,                                                    1656) /*!< 1656 (NumInGroup FIX.5.0SP2) Number of instrument scopes.*/ \
X(NoRequestingPartyIDs,                                                  1657) /*!< 1657 (NumInGroup FIX.5.0SP2) Number of requesting party identifiers.*/ \
X(RequestingPartyID,                                                     1658) /*!< 1658 (String FIX.5.0SP2) Party identifier for the requesting party.*/ \
X(RequestingPartyIDSource,                                               1659) /*!< 1659 (char FIX.5.0SP2) Identifies the source of the RequestingPartyID(1658) value.*/ \
X(RequestingPartyRole,                                                   1660) /*!< 1660 (int FIX.5.0SP2) Identifies the type or role of the RequestingPartyID(1658) specified.*/ \
X(NoRequestingPartySubIDs,                                               1661) /*!< 1661 (NumInGroup FIX.5.0SP2) Number of requesting party sub-identifiers.*/ \
X(RequestingPartySubID,                                                  1662) /*!< 1662 (String FIX.5.0SP2) Sub-identifier for the party specified in RequestingPartyID(1658).*/ \
X(RequestingPartySubIDType,                                              1663) /*!< 1663 (int FIX.5.0SP2) Type of RequestingPartySubID(1662) value.*/ \
X(EncodedRejectTextLen,                                                  1664) /*!< 1664 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedRejectText(1665) field.*/ \
X(EncodedRejectText,                                                     1665) /*!< 1665 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the RejectText(1328) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the RejectText(1328) field.*/ \
X(RiskLimitRequestID,                                                    1666) /*!< 1666 (String FIX.5.0SP2) Unique identifier for the PartyRiskLimitsRequest*/ \
X(RiskLimitReportID,                                                     1667) /*!< 1667 (String FIX.5.0SP2) Identifier for the PartyRiskLimitsReport*/ \
X(NoRequestedRiskLimitType,                                              1668) /*!< 1668 (NumInGroup FIX.5.0SP2) Number of  risk limit types requested.*/ \
X(NoRiskLimits,                                                          1669) /*!< 1669 (NumInGroup FIX.5.0SP2) Number of risk limits for different instrument scopes.*/ \
X(RiskLimitID,                                                           1670) /*!< 1670 (String FIX.5.0SP2) Unique reference identifier for a specific risk limit defined for the specified party.*/ \
X(NoPartyDetails,                                                        1671) /*!< 1671 (NumInGroup FIX.5.0SP2) Number of party details.*/ \
X(PartyDetailStatus,                                                     1672) /*!< 1672 (int FIX.5.0SP2) Indicates the status of the party identified with PartyDetailID(1691).*/ \
X(MatchInstMarketID,                                                     1673) /*!< 1673 (Exchange FIX.5.0SP2) Identifies the market to which the matching instruction applies.*/ \
X(PartyDetailRoleQualifier,                                              1674) /*!< 1674 (int FIX.5.0SP2) Qualifies the value of PartyDetailRole(1693).*/ \
X(RelatedPartyDetailRoleQualifier,                                       1675) /*!< 1675 (int FIX.5.0SP2) Qualifies the value of RelatedPartyRole(1565)*/ \
X(NoPartyUpdates,                                                        1676) /*!< 1676 (NumInGroup FIX.5.0SP2) Number of party updates.*/ \
X(NoPartyRiskLimits,                                                     1677) /*!< 1677 (NumInGroup FIX.5.0SP2) Number of party risk limits.*/ \
X(EncodedOptionExpirationDescLen,                                        1678) /*!< 1678 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedOptionExpirationDesc(1697) field.*/ \
X(SecurityMassTradingStatus,                                             1679) /*!< 1679 (int FIX.5.0SP2) Identifies the trading status applicable to a group of instruments.*/ \
X(SecurityMassTradingEvent,                                              1680) /*!< 1680 (int FIX.5.0SP2) Identifies an event related to the mass trading status.*/ \
X(MassHaltReason,                                                        1681) /*!< 1681 (int FIX.5.0SP2) Denotes the reason for the Opening Delay or Trading halt of a group of securities.*/ \
X(MDSecurityTradingStatus,                                               1682) /*!< 1682 (int FIX.5.0SP2) Identifies the trading status applicable to the instrument in the market data message.*/ \
X(MDSubFeedType,                                                         1683) /*!< 1683 (String FIX.5.0SP2) Describes a sub-class for a given class of service defined by MDFeedType (1022)*/ \
X(MDHaltReason,                                                          1684) /*!< 1684 (int FIX.5.0SP2) Denotes the reason for the Opening Delay or Trading Halt.*/ \
X(ThrottleInst,                                                          1685) /*!< 1685 (int FIX.5.0SP2) Describes action recipient should take if a throttle limit were exceeded.*/ \
X(ThrottleCountIndicator,                                                1686) /*!< 1686 (int FIX.5.0SP2) Indicates whether a message decrements the number of outstanding requests, e.g. one where ThrottleType = Outstanding Requests.*/ \
X(ShortSaleRestriction,                                                  1687) /*!< 1687 (int FIX.5.0SP2) Indicates whether a restriction applies to short selling a security.*/ \
X(ShortSaleExemptionReason,                                              1688) /*!< 1688 (int FIX.5.0SP2) Indicates the reason a short sale order is exempted from applicable regulation (e.g. Reg SHO addendum (b)(1) in the U.S.).*/ \
X(LegShortSaleExemptionReason,                                           1689) /*!< 1689 (int FIX.5.0SP2) Indicates the reason a short sale is exempted from applicable regulation (e.g. Reg SHO addendum (b)(1) in the U.S.)*/ \
X(SideShortSaleExemptionReason,                                          1690) /*!< 1690 (int FIX.5.0SP2) Indicates the reason a short sale is exempted from applicable regulation (e.g. Reg SHO addendum (b)(1) in the U.S.)*/ \
X(PartyDetailID,                                                         1691) /*!< 1691 (String FIX.5.0SP2) Party identifier within Parties Reference Data messages.*/ \
X(PartyDetailIDSource,                                                   1692) /*!< 1692 (char FIX.5.0SP2) Source of the identifier of the PartyDetailID(1691) specified.*/ \
X(PartyDetailRole,                                                       1693) /*!< 1693 (int FIX.5.0SP2) Identifies the type or role of PartyDetailID(1691) specified.*/ \
X(NoPartyDetailSubIDs,                                                   1694) /*!< 1694 (NumInGroup FIX.5.0SP2) Number of party detail sub-identifiers.*/ \
X(PartyDetailSubID,                                                      1695) /*!< 1695 (String FIX.5.0SP2) Sub-identifier for the party specified in PartyDetailID(1691).*/ \
X(PartyDetailSubIDType,                                                  1696) /*!< 1696 (int FIX.5.0SP2) Type of PartyDetailSubID(1695) value.*/ \
X(EncodedOptionExpirationDesc,                                           1697) /*!< 1697 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the OptionExpirationDesc(1581) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the OptionExpirationDesc(1581).*/ \
X(StrikeUnitOfMeasure,                                                   1698) /*!< 1698 (String FIX.5.0SP2) Used to express the unit of measure (UOM) of the price if different from the contract.*/ \
X(AccountSummaryReportID,                                                1699) /*!< 1699 (String FIX.5.0SP2) Unique identifier for the AccountSummaryReport(35=CQ).*/ \
X(NoSettlementAmounts,                                                   1700) /*!< 1700 (NumInGroup FIX.5.0SP2) Number of settlement amount entries.*/ \
X(SettlementAmount,                                                      1701) /*!< 1701 (Amt FIX.5.0SP2) The amount of settlement.*/ \
X(SettlementAmountCurrency,                                              1702) /*!< 1702 (Currency FIX.5.0SP2) The currency of the reported settlement amount.*/ \
X(NoCollateralAmounts,                                                   1703) /*!< 1703 (NumInGroup FIX.5.0SP2) Number of collateral amount entries.*/ \
X(CurrentCollateralAmount,                                               1704) /*!< 1704 (Amt FIX.5.0SP2) Currency value currently attributed to the collateral.*/ \
X(CollateralCurrency,                                                    1705) /*!< 1705 (Currency FIX.5.0SP2) Currency of the collateral; optional, defaults to the Settlement Currency if not specified.*/ \
X(CollateralType,                                                        1706) /*!< 1706 (String FIX.5.0SP2) Type of collateral on deposit being reported.*/ \
X(NoPayCollects,                                                         1707) /*!< 1707 (NumInGroup FIX.5.0SP2) Number of pay collect entries.*/ \
X(PayCollectType,                                                        1708) /*!< 1708 (String FIX.5.0SP2) Category describing the reason for funds paid to, or the funds collected from the clearing firm.*/ \
X(PayCollectCurrency,                                                    1709) /*!< 1709 (Currency FIX.5.0SP2) Currency denomination of value in PayAmount(1710) and CollectAmount(1711).  If not specified, default to currency specified in SettlementAmountCurrency(1702).*/ \
X(PayAmount,                                                             1710) /*!< 1710 (Amt FIX.5.0SP2) Amount to be paid by the clearinghouse to the clearing firm.*/ \
X(CollectAmount,                                                         1711) /*!< 1711 (Amt FIX.5.0SP2) Amount to be collected by the clearinghouse from the clearing firm.*/ \
X(PayCollectMarketSegmentID,                                             1712) /*!< 1712 (String FIX.5.0SP2) Market segment associated with the pay collect amount.*/ \
X(PayCollectMarketID,                                                    1713) /*!< 1713 (String FIX.5.0SP2) Market associated with the pay collect amount.*/ \
X(MarginAmountMarketSegmentID,                                           1714) /*!< 1714 (String FIX.5.0SP2) Market segment associated with the margin amount.*/ \
X(MarginAmountMarketID,                                                  1715) /*!< 1715 (String FIX.5.0SP2) Market associated with the margin amount*/ \
X(UnitOfMeasureCurrency,                                                 1716) /*!< 1716 (Currency FIX.5.0SP2) Indicates the currency of the unit of measure. Conditionally required when UnitOfMeasure(996) = Ccy*/ \
X(PriceUnitOfMeasureCurrency,                                            1717) /*!< 1717 (Currency FIX.5.0SP2) Indicates the currency of the price unit of measure. Conditionally required when PriceUnitOfMeasure(1191) = Ccy*/ \
X(UnderlyingUnitOfMeasureCurrency,                                       1718) /*!< 1718 (Currency FIX.5.0SP2) Indicates the currency of the underlying unit of measure. Conditionally required when UnderlyingUnitOfMeasure(998) = Ccy*/ \
X(UnderlyingPriceUnitOfMeasureCurrency,                                  1719) /*!< 1719 (Currency FIX.5.0SP2) Indicates the currency of the underlying price unit of measure. Conditionally required when UnderlyingPriceUnitOfMeasure(1424) = Ccy*/ \
X(LegUnitOfMeasureCurrency,                                              1720) /*!< 1720 (Currency FIX.5.0SP2) Indicates the currency of the unit of measure. Conditionally required when LegUnitOfMeasure(999) = Ccy*/ \
X(LegPriceUnitOfMeasureCurrency,                                         1721) /*!< 1721 (Currency FIX.5.0SP2) Indicates the currency of the price unit of measure. Conditionally required when LegPriceUnitOfMeasure(1421) = Ccy*/ \
X(DerivativeUnitOfMeasureCurrency,                                       1722) /*!< 1722 (Currency FIX.5.0SP2) Indicates the currency of the unit of measure. Conditionally required when DerivativeUnitOfMeasure(1269) = Ccy*/ \
X(DerivativePriceUnitOfMeasureCurrency,                                  1723) /*!< 1723 (Currency FIX.5.0SP2) Indicates the currency of the price unit of measure. Conditionally required when DerivativePriceUnitOfMeasure(1315) = Ccy*/ \
X(OrderOrigination,                                                      1724) /*!< 1724 (int FIX.5.0SP2) Identifies the origin of the order.*/ \
X(OriginatingDeptID,                                                     1725) /*!< 1725 (String FIX.5.0SP2) An identifier representing the department or desk within the firm that originated the order.*/ \
X(ReceivingDeptID,                                                       1726) /*!< 1726 (String FIX.5.0SP2) An identifier representing the department or desk within the firm that received the order.*/ \
X(InformationBarrierID,                                                  1727) /*!< 1727 (String FIX.5.0SP2) The identifier of the information barrier in place for a trading unit that will meet the criteria of the "no-knowledge" exception in FINRA Rule 5320.02.*/ \
X(FirmGroupID,                                                           1728) /*!< 1728 (String FIX.5.0SP2) Firm assigned group allocation entity identifier.*/ \
X(FirmMnemonic,                                                          1729) /*!< 1729 (String FIX.5.0SP2) Allocation identifier assigned by the Firm submitting the allocation for an individual allocation instruction (as opposed to the overall message level identifier).*/ \
X(AllocGroupID,                                                          1730) /*!< 1730 (String FIX.5.0SP2) Intended to be used by a central counterparty to assign an identifier to allocations of trades for the same instrument traded at the same price.*/ \
X(AvgPxGroupID,                                                          1731) /*!< 1731 (String FIX.5.0SP2) Used by submitting firm to group trades being allocated into an average price group. The trades in average price group will be used to calculate an average price for the group.*/ \
X(FirmAllocText,                                                         1732) /*!< 1732 (String FIX.5.0SP2) Firm reference information, usually internal information, that is part of the initial message. The information would not be carried forward (e.g to Take-up Firm) and preserved with the transaction.*/ \
X(EncodedFirmAllocTextLen,                                               1733) /*!< 1733 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedFirmAllocText(1734) field.*/ \
X(EncodedFirmAllocText,                                                  1734) /*!< 1734 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the FirmAllocText(1732) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) represention should also be specified in FirmAllocText(1732) field.*/ \
X(AllocationRollupInstruction,                                           1735) /*!< 1735 (int FIX.5.0SP2) An indicator to override the normal procedure to roll up allocations for the same take-up firm.*/ \
X(AllocGroupQuantity,                                                    1736) /*!< 1736 (Qty FIX.5.0SP2) Indicates the total quantity of an allocation group. Includes any allocated quantity.*/ \
X(AllocGroupRemainingQuantity,                                           1737) /*!< 1737 (Qty FIX.5.0SP2) Indicates the remaining quantity of an allocation group that has not yet been allocated.*/ \
X(AllocReversalStatus,                                                   1738) /*!< 1738 (int FIX.5.0SP2) Identifies the status of a reversal transaction.*/ \
X(ObligationType,                                                        1739) /*!< 1739 (String FIX.5.0SP2) Type of reference obligation for credit derivatives contracts.*/ \
X(TradePriceNegotiationMethod,                                           1740) /*!< 1740 (int FIX.5.0SP2) Method used for negotiation of contract price.*/ \
X(UpfrontPriceType,                                                      1741) /*!< 1741 (int FIX.5.0SP2) Type of price used to determine upfront payment for swaps contracts.*/ \
X(UpfrontPrice,                                                          1742) /*!< 1742 (Price FIX.5.0SP2) Price used to determine upfront payment for swaps contracts.*/ \
X(LastUpfrontPrice,                                                      1743) /*!< 1743 (Price FIX.5.0SP2) Price used to determine upfront payment for swaps contracts reported for a deal (trade).*/ \
X(ApplLevelRecoveryIndicator,                                            1744) /*!< 1744 (int FIX.5.0SP2) Indicates whether application level recovery is needed.*/ \
X(BidMDEntryID,                                                          1745) /*!< 1745 (String FIX.5.0SP2) The market data entry identifier of the bid side of a quote*/ \
X(OfferMDEntryID,                                                        1746) /*!< 1746 (String FIX.5.0SP2) The market data entry identifier of the offer side of a quote.*/ \
X(BidQuoteID,                                                            1747) /*!< 1747 (String FIX.5.0SP2) Marketplace assigned quote identifier for the bid side. Can be used to indicate priority.*/ \
X(OfferQuoteID,                                                          1748) /*!< 1748 (String FIX.5.0SP2) Marketplace assigned quote identifier for the offer side. Can be used to indicate priority.*/ \
X(TotalBidSize,                                                          1749) /*!< 1749 (Qty FIX.5.0SP2) Specifies the total bid size.*/ \
X(TotalOfferSize,                                                        1750) /*!< 1750 (Qty FIX.5.0SP2) Specifies the total offer size.*/ \
X(SecondaryQuoteID,                                                      1751) /*!< 1751 (String FIX.5.0SP2) Assigned by the party which accepts the quote. Can be used to provide the quote identifier assigned by an exchange, marketplace or executing system.*/ \
X(CustodialLotID,                                                        1752) /*!< 1752 (String FIX.5.0SP2) An opaque identifier used to communicate the custodian’s identifier for the lot.  It is expected that this information would be provided by the custodian as part of a reconciliation process that occurs before trading.*/ \
X(VersusPurchaseDate,                                                    1753) /*!< 1753 (LocalMktDate FIX.5.0SP2) The effective acquisition date of the lot that would be used for gain-loss trade lot reporting. The versus purchase date used to identify the lot in situations where a custodial lot identifier is not available.*/ \
X(VersusPurchasePrice,                                                   1754) /*!< 1754 (Price FIX.5.0SP2) The versus purchase price used to identify the lot in situations where a custodial lot identifier is not available. The value should be calculated based on current cost basis / quantity held.*/ \
X(CurrentCostBasis,                                                      1755) /*!< 1755 (Amt FIX.5.0SP2) The amount that the current shares are worth.  If this lot was liquidated, the total gain/loss for a trade is equal to the trade amount minus the current cost basis.*/ \
X(LegCustodialLotID,                                                     1756) /*!< 1756 (String FIX.5.0SP2) An opaque identifier used to communicate the custodian’s identifier for the lot.  It is expected that this information would be provided by the custodian as part of a reconciliation process that occurs before trading.*/ \
X(LegVersusPurchaseDate,                                                 1757) /*!< 1757 (LocalMktDate FIX.5.0SP2) The effective acquisition date of the lot that would be used for gain-loss trade lot reporting. The versus purchase date used to identify the lot in situations where a custodial lot identifier is not available.*/ \
X(LegVersusPurchasePrice,                                                1758) /*!< 1758 (Price FIX.5.0SP2) The versus purchase price used to identify the lot in situations where a custodial lot identifier is not available.The value should be calculated based on current cost basis / quantity held.*/ \
X(LegCurrentCostBasis,                                                   1759) /*!< 1759 (Amt FIX.5.0SP2) The amount that the current shares are worth.  If this lot was liquidated, the total gain/loss for a trade is equal to the trade amount minus the current cost basis.*/ \
X(RiskLimitRequestType,                                                  1760) /*!< 1760 (int FIX.5.0SP2) Type of risk limit information.*/ \
X(RiskLimitRequestResult,                                                1761) /*!< 1761 (int FIX.5.0SP2) Result of risk limit definition request.*/ \
X(RiskLimitRequestStatus,                                                1762) /*!< 1762 (int FIX.5.0SP2) Status of risk limit definition request.*/ \
X(RiskLimitStatus,                                                       1763) /*!< 1763 (int FIX.5.0SP2) Status of risk limit definition for one party.*/ \
X(RiskLimitResult,                                                       1764) /*!< 1764 (int FIX.5.0SP2) Result of risk limit definition for one party.*/ \
X(RiskLimitUtilizationPercent,                                           1765) /*!< 1765 (Percentage FIX.5.0SP2) Percentage of utilization of a party's set risk limit.*/ \
X(RiskLimitUtilizationAmount,                                            1766) /*!< 1766 (Amt FIX.5.0SP2) Absolute amount of utilization of a party's set risk limit.*/ \
X(RiskLimitAction,                                                       1767) /*!< 1767 (int FIX.5.0SP2) Identifies the action to take or risk model to assume should risk limit be exceeded or breached for the specified party.*/ \
X(RiskWarningLevelAmount,                                                1768) /*!< 1768 (int FIX.5.0SP2) Amount at which a warning is issued.*/ \
X(RiskWarningLevelAction,                                                1769) /*!< 1769 (int FIX.5.0SP2) Action to take should warning level be exceeded.*/ \
X(EntitlementRequestID,                                                  1770) /*!< 1770 (String FIX.5.0SP2) Unique identifier for PartyEntitlementsRequest(35=CU).*/ \
X(EntitlementReportID,                                                   1771) /*!< 1771 (String FIX.5.0SP2) Identifier for the PartyEntitlementsReport(35=CV).*/ \
X(NoPartyEntitlements,                                                   1772) /*!< 1772 (NumInGroup FIX.5.0SP2) Number of party entitlement values.*/ \
X(NoEntitlements,                                                        1773) /*!< 1773 (NumInGroup FIX.5.0SP2) Number of entitlement values.*/ \
X(EntitlementIndicator,                                                  1774) /*!< 1774 (Boolean FIX.5.0SP2) Used to indicate if a party is entitled to an entitlement type specified in the EntitlementType(1775) field.*/ \
X(EntitlementType,                                                       1775) /*!< 1775 (int FIX.5.0SP2) Type of entitlement.*/ \
X(EntitlementID,                                                         1776) /*!< 1776 (String FIX.5.0SP2) Unique identifier for a specific NoEntitlements(1773) repeating group instance.*/ \
X(NoEntitlementAttrib,                                                   1777) /*!< 1777 (int FIX.5.0SP2) Number of entitlement attributes.*/ \
X(EntitlementAttribType,                                                 1778) /*!< 1778 (int FIX.5.0SP2) Name of the entitlement attribute type. A code list of allowed values will be maintained on the FIX Protocol website. \
 \
Values "4000" and above are reserved for bilaterally agreed upon user defined enumerations. \
 \
*/ \
X(EntitlementAttribDatatype,                                             1779) /*!< 1779 (int FIX.5.0SP2) Datatype of the entitlement attribute.*/ \
X(EntitlementAttribValue,                                                1780) /*!< 1780 (String FIX.5.0SP2) Value of the entitlement attribute.*/ \
X(EntitlementAttribCurrency,                                             1781) /*!< 1781 (Currency FIX.5.0SP2) Currency for EntitlementAttribValue(1780). Can be used if these fields represent a price, price offset, or amount.*/ \
X(EntitlementStartDate,                                                  1782) /*!< 1782 (LocalMktDate FIX.5.0SP2) Indicates the starting date of the entitlement.*/ \
X(EntitlementEndDate,                                                    1783) /*!< 1783 (LocalMktDate FIX.5.0SP2) Indicates the ending date of the entitlement.*/ \
X(EntitlementPlatform,                                                   1784) /*!< 1784 (String FIX.5.0SP2) The area to which the entitlement is applicable. This can be a trading platform or an offering.*/ \
X(TradSesControl,                                                        1785) /*!< 1785 (int FIX.5.0SP2) Indicates how control of trading session and subsession transitions are performed.*/ \
X(TradeVolType,                                                          1786) /*!< 1786 (int FIX.5.0SP2) Define the type of trade volume applicable for the MinTradeVol(562) and MaxTradeVol(1140)*/ \
X(RefTickTableID,                                                        1787) /*!< 1787 (int FIX.5.0SP2) Spread table code referred by the security or symbol.*/ \
X(LegID,                                                                 1788) /*!< 1788 (String FIX.5.0SP2) Unique identifier for the leg within the context of a message (the scope of uniqueness to be defined by counterparty agreement). The LegID(1788) can be referenced using LegRefID(654).*/ \
X(NoTargetMarketSegments,                                                1789) /*!< 1789 (NumInGroup FIX.5.0SP2) Number of market segments upon which a mass action is to be taken.*/ \
X(TargetMarketSegmentID,                                                 1790) /*!< 1790 (String FIX.5.0SP2) Market segment within a target market segment repeating group.*/ \
X(NoAffectedMarketSegments,                                              1791) /*!< 1791 (NumInGroup FIX.5.0SP2) Number of market segments affected by a mass action.*/ \
X(AffectedMarketSegmentID,                                               1792) /*!< 1792 (String FIX.5.0SP2) Market segment within an affected market repeating segment group.*/ \
X(NoNotAffectedMarketSegments,                                           1793) /*!< 1793 (NumInGroup FIX.5.0SP2) Number of market segments left unaffected by a mass action.*/ \
X(NotAffectedMarketSegmentID,                                            1794) /*!< 1794 (String FIX.5.0SP2) Market segment within an unaffected market repeating segment group.*/ \
X(NoOrderEvents,                                                         1795) /*!< 1795 (NumInGroup FIX.5.0SP2) Number of order events.*/ \
X(OrderEventType,                                                        1796) /*!< 1796 (int FIX.5.0SP2) The type of event affecting an order. The last event type within the OrderEventGrp component indicates the ExecType(150) value resulting from the series of events (ExecType(150) values are shown in brackets).*/ \
X(OrderEventExecID,                                                      1797) /*!< 1797 (String FIX.5.0SP2) Refer to ExecID(17). Used when multiple different events are reported in single Execution Report. ExecID(17) and OrderEventExecID(1797) values should not overlap.*/ \
X(OrderEventReason,                                                      1798) /*!< 1798 (int FIX.5.0SP2) Action that caused the event to occur.*/ \
X(OrderEventPx,                                                          1799) /*!< 1799 (Price FIX.5.0SP2) Price associated with the event.*/ \
X(OrderEventQty,                                                         1800) /*!< 1800 (Qty FIX.5.0SP2) Quantity associated with the event.*/ \
X(OrderEventLiquidityIndicator,                                          1801) /*!< 1801 (int FIX.5.0SP2) Indicator to identify whether this fill was a result of a liquidity provider providing or liquidity taker taking the liquidity. Applicable only for OrderEventType(1796) values of 4(Partially Filled) or 5(Filled).*/ \
X(OrderEventText,                                                        1802) /*!< 1802 (String FIX.5.0SP2) Additional information about the event.*/ \
X(AuctionType,                                                           1803) /*!< 1803 (int FIX.5.0SP2) Type of auction order.*/ \
X(AuctionAllocationPct,                                                  1804) /*!< 1804 (Percentage FIX.5.0SP2) Percentage of matched quantity to be allocated to the submitter of the response to an auction order.*/ \
X(AuctionInstruction,                                                    1805) /*!< 1805 (int FIX.5.0SP2) Instruction related to system generated auctions, e.g. flash order auctions.*/ \
X(RefClOrdID,                                                            1806) /*!< 1806 (String FIX.5.0SP2) Used to reference an order via ClOrdID(11).*/ \
X(LockType,                                                              1807) /*!< 1807 (int FIX.5.0SP2) Indicates whether an order is locked and for what reason.*/ \
X(LockedQty,                                                             1808) /*!< 1808 (Qty FIX.5.0SP2) Locked order quantity.*/ \
X(SecondaryLockedQty,                                                    1809) /*!< 1809 (Qty FIX.5.0SP2) Locked order quantity in addition to LockedQty (1808), e.g. to distinguish total locked quantity from currently locked quantity.*/ \
X(ReleaseInstruction,                                                    1810) /*!< 1810 (int FIX.5.0SP2) Instruction to define conditions under which to release a locked order or parts of it.*/ \
X(ReleaseQty,                                                            1811) /*!< 1811 (Qty FIX.5.0SP2) Quantity to be made available, i.e. released from a lock.*/ \
X(NoDisclosureInstructions,                                              1812) /*!< 1812 (NumInGroup FIX.5.0SP2) Number of disclosure instructions.*/ \
X(DisclosureType,                                                        1813) /*!< 1813 (int FIX.5.0SP2) Information subject to disclosure.*/ \
X(DisclosureInstruction,                                                 1814) /*!< 1814 (int FIX.5.0SP2) Instruction to disclose information or to use default value of the receiver.*/ \
X(TradingCapacity,                                                       1815) /*!< 1815 (int FIX.5.0SP2) Designates the capacity in which the order is submitted for trading by the market participant.*/ \
X(ClearingAccountType,                                                   1816) /*!< 1816 (int FIX.5.0SP2) Designates the account type to be used for the order when submitted to clearing.*/ \
X(LegClearingAccountType,                                                1817) /*!< 1817 (int FIX.5.0SP2) Designates the capacity in which the order will be submitted to clearing.*/ \
X(TargetPartyRoleQualifier,                                              1818) /*!< 1818 (int FIX.5.0SP2) Qualifies the value of TargetPartyRole (1464).*/ \
X(RelatedHighPrice,                                                      1819) /*!< 1819 (Price FIX.5.0SP2) Upper boundary for the price of a related entity, e.g. price of the underlying instrument in an Underlying Price Contingency (UPC) order.*/ \
X(RelatedLowPrice,                                                       1820) /*!< 1820 (Price FIX.5.0SP2) Lower boundary for the price of a related entity, e.g. price of the underlying instrument in an Underlying Price Contingency (UPC) order.*/ \
X(RelatedPriceSource,                                                    1821) /*!< 1821 (int FIX.5.0SP2) Source for the price of a related entity, e.g. price of the underlying instrument in an Underlying Price Contingency (UPC) order. Can be used together with RelatedHighPrice (1819) and/or RelatedLowPrice (1820).*/ \
X(MinQtyMethod,                                                          1822) /*!< 1822 (int FIX.5.0SP2) Indicates how the minimum quantity should be applied when executing the order.*/ \
X(Triggered,                                                             1823) /*!< 1823 (int FIX.5.0SP2) Indicates whether order has been triggered during its lifetime. Applies to cases where original information, e.g. OrdType(40), is modified when the order is triggered.*/ \
X(AffectedOrigClOrdID,                                                   1824) /*!< 1824 (String FIX.5.0SP2) OrigClOrdID(41) of an order affected by a mass cancel or mass action request.*/ \
X(NotAffSecondaryOrderID,                                                1825) /*!< 1825 (String FIX.5.0SP2) SecondaryOrderID (198) of an order not affected by a mass cancel or mass action request.*/ \
X(EventTimePeriod,                                                       1826) /*!< 1826 (int FIX.5.0SP2) Time unit multiplier for the event.*/ \
X(EventTimeUnit,                                                         1827) /*!< 1827 (String FIX.5.0SP2) Time unit associated with the event.*/ \
X(LastQtyVariance,                                                       1828) /*!< 1828 (Qty FIX.5.0SP2) When LastQty is an estimated value, e.g. for a Repo “circled” trade, LastQtyVariance specifies the absolute amount that the size may vary up or down when finalized. Omitted when LastQty(32) is already final.*/ \
X(NoCrossLegs,                                                           1829) /*!< 1829 (NumInGroup FIX.5.0SP2) Number of legs in the side of a cross order.*/ \
X(SettlPriceIncrement,                                                   1830) /*!< 1830 (Price FIX.5.0SP2) Settlement price increment for stated price range.*/ \
X(SettlPriceSecondaryIncrement,                                          1831) /*!< 1831 (Price FIX.5.0SP2) Secondary settlement price increment for stated price range. The meaning of secondary is left to bilateral agreement, e.g. it may refer to final settlement for a contract.*/ \
X(ClearedIndicator,                                                      1832) /*!< 1832 (int FIX.5.0SP2) Indicates whether the trade or position being reported was cleared through a clearing organization.*/ \
X(ContractRefPosType,                                                    1833) /*!< 1833 (int FIX.5.0SP2) Additional information related to the pricing of a commodity swaps position, specifically an indicator referring to the position type.*/ \
X(PositionCapacity,                                                      1834) /*!< 1834 (int FIX.5.0SP2) Used to describe the ownership of the position.*/ \
X(PosQtyUnitOfMeasureCurrency,                                           1835) /*!< 1835 (Currency FIX.5.0SP2) Indicates the currency of the unit of measure if position quantity is expressed in valuation rather than contracts.  Conditionally required when PosQtyUnitOfMeasure(1836)=Ccy.*/ \
X(PosQtyUnitOfMeasure,                                                   1836) /*!< 1836 (String FIX.5.0SP2) Indicates the unit of measure of the position quantity when not expressed in contracts. */ \
X(UnderlyingContractPriceRefMonth,                                       1837) /*!< 1837 (MonthYear FIX.5.0SP2) Reference month if there is no applicable UnderlyingMaturityMonth(313) value for the contract or security.*/ \
X(NoTradePriceConditions,                                                1838) /*!< 1838 (NumInGroup FIX.5.0SP2) Number of trade price conditions.*/ \
X(TradePriceCondition,                                                   1839) /*!< 1839 (int FIX.5.0SP2) Price conditions in effect at the time of the trade. Multiple price conditions can be in effect at the same time. Price conditions are usually required to be reported in markets that have regulations on price execution at a market or national best bid or offer, and the trade price differs from the best bid or offer.*/ \
X(TradeAllocStatus,                                                      1840) /*!< 1840 (int FIX.5.0SP2) Identifies the status of an allocation when using a pre-clear workflow. */ \
X(NoTradeQtys,                                                           1841) /*!< 1841 (NumInGroup FIX.5.0SP2) Number of trade quantities.*/ \
X(TradeQtyType,                                                          1842) /*!< 1842 (int FIX.5.0SP2) Indicates the type of trade quantity in TradeQty(1843).*/ \
X(TradeQty,                                                              1843) /*!< 1843 (Qty FIX.5.0SP2) Trade quantity.*/ \
X(NoTradeAllocAmts,                                                      1844) /*!< 1844 (NumInGroup FIX.5.0SP2) Number of trade allocation amount entries.*/ \
X(TradeAllocAmtType,                                                     1845) /*!< 1845 (String FIX.5.0SP2) Type of the amount associated with a trade allocation.*/ \
X(TradeAllocAmt,                                                         1846) /*!< 1846 (Amt FIX.5.0SP2) The amount associated with a trade allocation.*/ \
X(TradeAllocCurrency,                                                    1847) /*!< 1847 (Currency FIX.5.0SP2) Currency denomination of the trade allocation amount.*/ \
X(TradeAllocGroupInstruction,                                            1848) /*!< 1848 (int FIX.5.0SP2) Instruction on how to add a trade to an allocation group when it is being given-up. */ \
X(OffsetInstruction,                                                     1849) /*!< 1849 (int FIX.5.0SP2) Indicates the trade is a result of an offset or onset.*/ \
X(TradeAllocAmtReason,                                                   1850) /*!< 1850 (int FIX.5.0SP2) Specifies the reason for an amount type when reported on an allocation. Useful when multiple instances of the same amount type are reported.*/ \
X(StrategyLinkID,                                                        1851) /*!< 1851 (String FIX.5.0SP2) Identifies the multileg strategy (e.g. spread) to which the trade belongs. This links together trade legs executed as part of a strategy during a single match event.*/ \
X(SideAvgPx,                                                             1852) /*!< 1852 (Price FIX.5.0SP2) Calculated average price for this side of the trade.*/ \
X(SideAvgPxIndicator,                                                    1853) /*!< 1853 (int FIX.5.0SP2) Used to indicate whether a trade or a sub-allocation should be allocated at the trade price (e.g. no average pricing), or whether it should be grouped with other trades/sub-allocations and allocated at the average price of the group. */ \
X(SideAvgPxGroupID,                                                      1854) /*!< 1854 (String FIX.5.0SP2) The identifier for the average price group for the trade side.  See also AvgPxGroupID(1731).*/ \
X(NoRelatedTrades,                                                       1855) /*!< 1855 (NumInGroup FIX.5.0SP2) Number of related trades.*/ \
X(RelatedTradeID,                                                        1856) /*!< 1856 (String FIX.5.0SP2) Identifier of a related trade.*/ \
X(RelatedTradeIDSource,                                                  1857) /*!< 1857 (int FIX.5.0SP2) Describes the source of the identifier that RelatedTradeID(1856) represents.*/ \
X(RelatedTradeDate,                                                      1858) /*!< 1858 (LocalMktDate FIX.5.0SP2) Date of a related trade.*/ \
X(RelatedTradeMarketID,                                                  1859) /*!< 1859 (Exchange FIX.5.0SP2) Market of execution of related trade.*/ \
X(RelatedTradeQuantity,                                                  1860) /*!< 1860 (Qty FIX.5.0SP2) Quantity of the related trade which can be less than or equal to the actual quantity of the related trade. For example, when one trade offsets another across asset classes.*/ \
X(NoRelatedPositions,                                                    1861) /*!< 1861 (NumInGroup FIX.5.0SP2) Number of related positions.*/ \
X(RelatedPositionID,                                                     1862) /*!< 1862 (String FIX.5.0SP2) Identifier of a related position.*/ \
X(RelatedPositionIDSource,                                               1863) /*!< 1863 (int FIX.5.0SP2) Describes the source of the identifier that RelatedPositionID(1862) represents.*/ \
X(RelatedPositionDate,                                                   1864) /*!< 1864 (LocalMktDate FIX.5.0SP2) Used to help identify the position when RelatedPositionID(1862) is not unique across multiple days. This date is generally the creation date of the identifier.*/ \
X(QuoteAckStatus,                                                        1865) /*!< 1865 (int FIX.5.0SP2) Acknowledgement status of a Quote(35=S) or QuoteCancel(35=Z) message submission.*/ \
X(StrikeIndex,                                                           1866) /*!< 1866 (String FIX.5.0SP2) Specifies the index used to calculate the strike price.*/ \
X(OfferID,                                                               1867) /*!< 1867 (String FIX.5.0SP2) Unique identifier for the ask side of the quote assigned by the quote issuer.*/ \
X(NoValueChecks,                                                         1868) /*!< 1868 (NumInGroup FIX.5.0SP2) Number of value check entries.*/ \
X(ValueCheckType,                                                        1869) /*!< 1869 (int FIX.5.0SP2) Type of value to be checked.*/ \
X(ValueCheckAction,                                                      1870) /*!< 1870 (int FIX.5.0SP2) Action to be taken for the ValueCheckType(1869). */ \
X(LegSecurityXMLLen,                                                     1871) /*!< 1871 (Length FIX.5.0SP2) The length of the LegSecurityXML(1872) data block.*/ \
X(LegSecurityXML,                                                        1872) /*!< 1872 (XMLData FIX.5.0SP2) XML definition for the leg security.*/ \
X(LegSecurityXMLSchema,                                                  1873) /*!< 1873 (String FIX.5.0SP2) The schema used to validate the contents of LegSecurityXML(1872).*/ \
X(UnderlyingSecurityXMLLen,                                              1874) /*!< 1874 (Length FIX.5.0SP2) The length of the UnderlyingSecurityXML(1875) data block. */ \
X(UnderlyingSecurityXML,                                                 1875) /*!< 1875 (XMLData FIX.5.0SP2) XML definition for the underlying security. */ \
X(UnderlyingSecurityXMLSchema,                                           1876) /*!< 1876 (String FIX.5.0SP2) The schema used to validate the contents of UnderlyingSecurityXML(1875).*/ \
X(PartyDetailRequestResult,                                              1877) /*!< 1877 (int FIX.5.0SP2) Result party detail definition request.*/ \
X(PartyDetailRequestStatus,                                              1878) /*!< 1878 (int FIX.5.0SP2) Status of party details definition request.*/ \
X(PartyDetailDefinitionStatus,                                           1879) /*!< 1879 (int FIX.5.0SP2) Status of party detail definition for one party.*/ \
X(PartyDetailDefinitionResult,                                           1880) /*!< 1880 (int FIX.5.0SP2) Result of party detail definition for one party.*/ \
X(EntitlementRequestResult,                                              1881) /*!< 1881 (int FIX.5.0SP2) Result of risk limit definition request.*/ \
X(EntitlementRequestStatus,                                              1882) /*!< 1882 (int FIX.5.0SP2) Status of party entitlements definition request.*/ \
X(EntitlementStatus,                                                     1883) /*!< 1883 (int FIX.5.0SP2) Status of entitlement definition for one party.*/ \
X(EntitlementResult,                                                     1884) /*!< 1884 (int FIX.5.0SP2) Result of entitlement definition for one party.*/ \
X(EntitlementRefID,                                                      1885) /*!< 1885 (String FIX.5.0SP2) Reference to an EntitlementID(1776). Used for modification or deletion of an entitlement.*/ \
X(SettlPriceUnitOfMeasure,                                               1886) /*!< 1886 (String FIX.5.0SP2) Used to express the unit of measure of the settlement price if different from the contract.*/ \
X(SettlPriceUnitOfMeasureCurrency,                                       1887) /*!< 1887 (Currency FIX.5.0SP2) Indicates the currency of the settlement price unit of measure if expressed in another currency than the base currency. \
 \
Conditionally required when SettlPriceUnitOfMeasure(1886)=Ccy.*/ \
X(TradeMatchTimestamp,                                                   1888) /*!< 1888 (UTCTimestamp FIX.5.0SP2) Timestamp of the match event. For off-exchange trades the time at which the deal was matched by the exchange. \
 \
This timestamp will be the same on all the trades and will not change when a trade is modified.*/ \
X(NoInstrmtMatchSides,                                                   1889) /*!< 1889 (NumInGroup FIX.5.0SP2) Number of instrument match sides.*/ \
X(NoTrdMatchSides,                                                       1890) /*!< 1890 (NumInGroup FIX.5.0SP2) Number of trade match sides.*/ \
X(TrdMatchSubID,                                                         1891) /*!< 1891 (String FIX.5.0SP2) Used to identify each price level, step or clip within a match event.*/ \
X(NoLegExecs,                                                            1892) /*!< 1892 (NumInGroup FIX.5.0SP2) Number of instrument leg executions.*/ \
X(LegExecID,                                                             1893) /*!< 1893 (String FIX.5.0SP2) The ExecID(17) value corresponding to a trade leg.*/ \
X(LegTradeID,                                                            1894) /*!< 1894 (String FIX.5.0SP2) The TradeID(1003) value corresponding to a trade leg.*/ \
X(LegTradeReportID,                                                      1895) /*!< 1895 (String FIX.5.0SP2) The TradeReportID(571) value corresponding to a trade leg.*/ \
X(TradeMatchAckStatus,                                                   1896) /*!< 1896 (int FIX.5.0SP2) Used to indicate the status of the trade match report submission.*/ \
X(TradeMatchRejectReason,                                                1897) /*!< 1897 (int FIX.5.0SP2) Reason the trade match report submission was rejected.*/ \
X(SideMarketSegmentID,                                                   1898) /*!< 1898 (String FIX.5.0SP2) Identifies the market segment of the side.*/ \
X(SideVenueType,                                                         1899) /*!< 1899 (char FIX.5.0SP2) Identifies the type of venue where the trade was executed for the side.*/ \
X(SideExecRefID,                                                         1900) /*!< 1900 (String FIX.5.0SP2) Used to reference the value from SideExecID(1427).*/ \
X(LegExecRefID,                                                          1901) /*!< 1901 (String FIX.5.0SP2) Used to reference the value from LegExecID(1893).*/ \
X(HaircutIndicator,                                                      1902) /*!< 1902 (Boolean FIX.5.0SP2) Indicates, if "Y", that a stated valuation includes a haircut, e.g. that the stated value reflects the subtraction of the haircut. Note that a value of "N" does not imply a haircut is not applicable, only that the haircut (if any) is not reflected in the stated valuation.*/ \
X(RegulatoryTradeID,                                                     1903) /*!< 1903 (String FIX.5.0SP2) Trade identifier required by government regulators or other regulatory organizations for regulatory reporting purposes.  For example, unique swap identifer (USI) as required by the U.S. Commodity Futures Trading Commission.*/ \
X(RegulatoryTradeIDEvent,                                                1904) /*!< 1904 (int FIX.5.0SP2) Identifies the event which caused origination of the identifier in RegulatoryTradeID(1903). When more than one event is the cause, use the higher enumeration value.  For example, if the identifier is originated due to an allocated trade which was cleared and reported, use the enumeration value 2 (Clearing).*/ \
X(RegulatoryTradeIDSource,                                               1905) /*!< 1905 (String FIX.5.0SP2) Identifies the reporting entity that originated the value in RegulatoryTradeID(1903). The reporting entitiy identifier may be assigned by a regulator.*/ \
X(RegulatoryTradeIDType,                                                 1906) /*!< 1906 (int FIX.5.0SP2) Specifies the type of trade identifier provided in RegulatoryTradeID(1903).   \
 \
Contextual hierarchy of events for the same trade or transaction maybe captured through use of the different RegulatoryTradeIDType(1906) values using multiple instances of the repeating group as needed for regulatory reporting.*/ \
X(NoRegulatoryTradeIDs,                                                  1907) /*!< 1907 (NumInGroup FIX.5.0SP2) Number of regulatory IDs in the repeating group.*/ \
X(NoAllocRegulatoryTradeIDs,                                             1908) /*!< 1908 (NumInGroup FIX.5.0SP2) Number of regulatory IDs in the repeating group.*/ \
X(AllocRegulatoryTradeID,                                                1909) /*!< 1909 (String FIX.5.0SP2) Trade identifier required by government regulators or other regulatory organizations for regulatory reporting purposes.  For example, unique swap identifer (USI) as required by the U.S. Commodity Futures Trading Commission.*/ \
X(AllocRegulatoryTradeIDSource,                                          1910) /*!< 1910 (String FIX.5.0SP2) Identifies the reporting entity that originated the value in AllocRegulatoryTradeID(1909).  The reporting entity identifier may be assigned by a regulator.*/ \
X(AllocRegulatoryTradeIDEvent,                                           1911) /*!< 1911 (int FIX.5.0SP2) Identifies the event which caused the origination of the identifier in AllocRegulatoryTradeID(1909).  When more than one event is the cause, use the higher enumeration value.  For example, if the identifier is originated due to an allocated trade which was cleared and reported, use the enumeration value 2(Clearing). */ \
X(AllocRegulatoryTradeIDType,                                            1912) /*!< 1912 (int FIX.5.0SP2) Specifies the type of trade identifier provided in AllocRegulatoryTradeID(1909), within the context of the hierarchy of trade events.*/ \
X(NumOfCompetitors,                                                      1913) /*!< 1913 (int FIX.5.0SP2) The number of competing Respondents (e.g. dealers) to receive a quote request (either via the QuoteRequest(35=R) or via other means).*/ \
X(ResponseTime,                                                          1914) /*!< 1914 (UTCTimestamp FIX.5.0SP2) The time by which a meaningful response should arrive back (always expressed in UTC (Universal Time Coordinated, also known as "GMT").*/ \
X(QuoteDisplayTime,                                                      1915) /*!< 1915 (UTCTimestamp FIX.5.0SP2) Time by which the quote will be displayed.*/ \
X(ExposureDurationUnit,                                                  1916) /*!< 1916 (int FIX.5.0SP2) Time unit in which the ExposureDuration(1629) is expressed.*/ \
X(CoverPrice,                                                            1917) /*!< 1917 (Price FIX.5.0SP2) The best quoted price received among those not traded.*/ \
X(NoClearingAccountTypes,                                                1918) /*!< 1918 (NumInGroup FIX.5.0SP2) Number of clearing account type entries.*/ \
X(NoPriceMovements,                                                      1919) /*!< 1919 (NumInGroup FIX.5.0SP2) Number of price movement entries.*/ \
X(NoPriceMovementValues,                                                 1920) /*!< 1920 (NumInGroup FIX.5.0SP2) Number of price movement value entries.*/ \
X(PriceMovementValue,                                                    1921) /*!< 1921 (float FIX.5.0SP2) Value at specific price movement point.*/ \
X(PriceMovementPoint,                                                    1922) /*!< 1922 (int FIX.5.0SP2) Price movement point up (positive integer) or down (negative integer) relative to the underlying price of the instrument.*/ \
X(PriceMovementType,                                                     1923) /*!< 1923 (int FIX.5.0SP2) Describes the format of the PriceMovementValue(1921).*/ \
X(ClearingIntention,                                                     1924) /*!< 1924 (int FIX.5.0SP2) Specifies the party's or parties' intention to clear the trade.*/ \
X(TradeClearingInstruction,                                              1925) /*!< 1925 (int FIX.5.0SP2) Specifies the eligibility of this trade for clearing and central counterparty processing.*/ \
X(BackloadedTradeIndicator,                                              1926) /*!< 1926 (Boolean FIX.5.0SP2) Indicates that the trade being reported occurred in the past and is still in effect or active.*/ \
X(ConfirmationMethod,                                                    1927) /*!< 1927 (int FIX.5.0SP2) Specifies how a trade was confirmed.*/ \
X(MandatoryClearingIndicator,                                            1928) /*!< 1928 (Boolean FIX.5.0SP2) An indication that the trade is flagged for mandatory clearing.*/ \
X(MixedSwapIndicator,                                                    1929) /*!< 1929 (Boolean FIX.5.0SP2) An indication that the trade is a mixed swap.*/ \
X(OffMarketPriceIndicator,                                               1930) /*!< 1930 (Boolean FIX.5.0SP2) An indication that the price is off-market.*/ \
X(VerificationMethod,                                                    1931) /*!< 1931 (int FIX.5.0SP2) Indication of how a trade was verified.*/ \
X(ClearingRequirementException,                                          1932) /*!< 1932 (int FIX.5.0SP2) Specifies whether a party to a swap is using an exception to a clearing requirement. In the US, one such clearing requirement is CFTC's rule pursuant to CEA Section 2(h)(1).*/ \
X(IRSDirection,                                                          1933) /*!< 1933 (String FIX.5.0SP2) Used to specify whether the principal is paying or receiving the fixed rate in an interest rate swap.*/ \
X(RegulatoryReportType,                                                  1934) /*!< 1934 (int FIX.5.0SP2) Type of regulatory report.*/ \
X(VoluntaryRegulatoryReport,                                             1935) /*!< 1935 (Boolean FIX.5.0SP2) Used in conjunction with RegulatoryReportType(1934) to indicate whether the trade report is a voluntary regulatory report. If not specified, the default for a regulatory report is "N". \
 \
When VoluntaryRegulatoryReport(1935)=Y it is recommended that one of the parties to the trade be identified as the voluntary reporting party through PartySubIDType(803) = 63 (Voluntary reporting entity).*/ \
X(TradeCollateralization,                                                1936) /*!< 1936 (int FIX.5.0SP2) Specifies how the trade is collateralized.*/ \
X(TradeContinuation,                                                     1937) /*!< 1937 (int FIX.5.0SP2) Specifies the post-execution trade continuation or lifecycle event. Additional values may be used by mutual agreement of the counterparties.*/ \
X(AssetClass,                                                            1938) /*!< 1938 (int FIX.5.0SP2) The broad asset category for assessing risk exposure.*/ \
X(AssetSubClass,                                                         1939) /*!< 1939 (int FIX.5.0SP2) The subcategory description of the asset class. */ \
X(AssetType,                                                             1940) /*!< 1940 (String FIX.5.0SP2) Used to provide more specific description of the asset specified in AssetSubClass(1939). \
 \
See https://www.fixtrading.org/codelists/AssetType for code list of applicable values.  ISO 4721 Currency Code values are to be used when specific currency as an asset type is to be expressed. \
 \
Other values may be used by mutual agreement of the counterparties.*/ \
X(SwapClass,                                                             1941) /*!< 1941 (String FIX.5.0SP2) The classification or type of swap. Additional values may be used by mutual agreement of the counterparties.*/ \
X(NthToDefault,                                                          1942) /*!< 1942 (int FIX.5.0SP2) The Nth reference obligation to default in a CDS reference basket. If specified without MthToDefault(1943) the default will trigger a CDS payout.  If MthToDefault(1943) is also present then payout occurs between the Nth and Mth obligations to default.*/ \
X(MthToDefault,                                                          1943) /*!< 1943 (int FIX.5.0SP2) The Mth reference obligation to default in a CDS reference basket. When NthToDefault(1942) and MthToDefault(1943) are represented then the CDS payout occurs between the Nth and Mth obligations to default.*/ \
X(SettledEntityMatrixSource,                                             1944) /*!< 1944 (String FIX.5.0SP2) Relevant settled entity matrix source.*/ \
X(SettledEntityMatrixPublicationDate,                                    1945) /*!< 1945 (LocalMktDate FIX.5.0SP2) The publication date of the applicable version of the matrix. If not specified, the Standard Terms Supplement defines rules for which version of the matrix is applicable.*/ \
X(CouponType,                                                            1946) /*!< 1946 (int FIX.5.0SP2) Coupon type of the bond. */ \
X(TotalIssuedAmount,                                                     1947) /*!< 1947 (Amt FIX.5.0SP2) Specifies the total amount of the issue. Corresponds to the par value multiplied by the number of issued securities.*/ \
X(CouponFrequencyPeriod,                                                 1948) /*!< 1948 (int FIX.5.0SP2) Time unit multiplier for the frequency of the bond's coupon payment. */ \
X(CouponFrequencyUnit,                                                   1949) /*!< 1949 (String FIX.5.0SP2) Time unit associated with the frequency of the bond's coupon payment. */ \
X(CouponDayCount,                                                        1950) /*!< 1950 (int FIX.5.0SP2) The day count convention used in interest calculations for a bond or an interest bearing security.  Absence of this field for a bond or an interest bearing security transaction implies a "flat" trade, i.e. no accrued interest determined at time of the transaction.*/ \
X(ConvertibleBondEquityID,                                               1951) /*!< 1951 (String FIX.5.0SP2) Identifies the equity in which a convertible bond can be converted to.*/ \
X(ConvertibleBondEquityIDSource,                                         1952) /*!< 1952 (String FIX.5.0SP2) Identifies class or source of the ConvertibleBondEquityID(1951) value.  \
 \
100+ are reserved for private security.*/ \
X(ContractPriceRefMonth,                                                 1953) /*!< 1953 (MonthYear FIX.5.0SP2) Reference month if there is no applicable MaturityMonthYear(200) value for the contract or security.*/ \
X(LienSeniority,                                                         1954) /*!< 1954 (int FIX.5.0SP2) Indicates the seniority level of the lien in a loan. */ \
X(LoanFacility,                                                          1955) /*!< 1955 (int FIX.5.0SP2) Specifies the type of loan when the credit default swap's reference obligation is a loan.*/ \
X(ReferenceEntityType,                                                   1956) /*!< 1956 (int FIX.5.0SP2) Specifies the type of reference entity for first-to-default CDS basket contracts.*/ \
X(IndexSeries,                                                           1957) /*!< 1957 (int FIX.5.0SP2) The series identifier of a credit default swap index.*/ \
X(IndexAnnexVersion,                                                     1958) /*!< 1958 (int FIX.5.0SP2) The version of a credit default swap index annex.*/ \
X(IndexAnnexDate,                                                        1959) /*!< 1959 (LocalMktDate FIX.5.0SP2) The date of a credit default swap index series annex.*/ \
X(IndexAnnexSource,                                                      1960) /*!< 1960 (String FIX.5.0SP2) The source of a credit default swap series annex.*/ \
X(AgreementVersion,                                                      1961) /*!< 1961 (String FIX.5.0SP2) The version of the master agreement*/ \
X(MasterConfirmationDesc,                                                1962) /*!< 1962 (String FIX.5.0SP2) The type of master confirmation executed between the parties.  \
 \
See http://www.fpml.org/coding-scheme/master-confirmation-type for values.*/ \
X(MasterConfirmationDate,                                                1963) /*!< 1963 (LocalMktDate FIX.5.0SP2) Alternative to broker confirmation. The date of the confirmation executed between the parties and intended to govern all relevant transactions between those parties.*/ \
X(MasterConfirmationAnnexDesc,                                           1964) /*!< 1964 (String FIX.5.0SP2) The type of master confirmation annex executed between the parties.  \
 \
See http://www.fpml.org/coding-scheme/master-confirmation-annex-type for values.*/ \
X(MasterConfirmationAnnexDate,                                           1965) /*!< 1965 (LocalMktDate FIX.5.0SP2) The date that an annex to the master confirmation was executed between the parties.*/ \
X(BrokerConfirmationDesc,                                                1966) /*!< 1966 (String FIX.5.0SP2) Describes the type of broker confirmation executed between the parites.  Can be used as an alterative to MasterConfirmationDesc(1962).  See http://www.fpml.org/coding-scheme/broker-confirmation-type for values.*/ \
X(CreditSupportAgreementDesc,                                            1967) /*!< 1967 (String FIX.5.0SP2) The type of ISDA Credit Support Agreement. See http://www.fpml.org/coding-scheme/credit-support-agreement-type for values.*/ \
X(CreditSupportAgreementDate,                                            1968) /*!< 1968 (LocalMktDate FIX.5.0SP2) The date of the ISDA Credit Support Agreement executed between the parties and intended to govern collateral arrangements for all OTC derivatives transactions between those parties.*/ \
X(CreditSupportAgreementID,                                              1969) /*!< 1969 (String FIX.5.0SP2) A common reference or unique identifier to identify the ISDA Credit Support Agreement executed between the parties.*/ \
X(GoverningLaw,                                                          1970) /*!< 1970 (String FIX.5.0SP2) Identification of the law governing the transaction. See http://www.fpml.org/coding-scheme/governing-law for values.*/ \
X(NoSideRegulatoryTradeIDs,                                              1971) /*!< 1971 (NumInGroup FIX.5.0SP2) Number of regulatory IDs in the repeating group.*/ \
X(SideRegulatoryTradeID,                                                 1972) /*!< 1972 (String FIX.5.0SP2) Trade identifier required by government regulators or other regulatory organziations for regulatory reporting purposes.  For example, unique swap identifier (USI) as required by the U.S. Commodity Futures Trading Commission.  */ \
X(SideRegulatoryTradeIDSource,                                           1973) /*!< 1973 (String FIX.5.0SP2) Identifies the  reporting entity that originated the value in SideRegulatoryTradeID(1972).  The reporting entity identifier may be assigned by a regulator.*/ \
X(SideRegulatoryTradeIDEvent,                                            1974) /*!< 1974 (int FIX.5.0SP2) Identifies the event which caused origination of the identifier in SideRegulatoryTradeID(1972). When more than one event is the cause, use the higher enumeration value. For example, if the identifier is originated due to an allocated trade which was cleared and reported, use the enumeration value 2 (Clearing).*/ \
X(SideRegulatoryTradeIDType,                                             1975) /*!< 1975 (int FIX.5.0SP2) Specifies the type of trade identifier provided in SideRegulatoryTradeID(1972), within the context of the hierarchy of trade events.*/ \
X(NoSecondaryAssetClasses,                                               1976) /*!< 1976 (NumInGroup FIX.5.0SP2) Number of secondary asset classes in the repeating group.*/ \
X(SecondaryAssetClass,                                                   1977) /*!< 1977 (int FIX.5.0SP2) The broad asset category for assessing risk exposure for a multi-asset trade.*/ \
X(SecondaryAssetSubClass,                                                1978) /*!< 1978 (int FIX.5.0SP2) An indication of the general description of the asset class. */ \
X(SecondaryAssetType,                                                    1979) /*!< 1979 (String FIX.5.0SP2) Used to provide more specific description of the asset specified in SecondaryAssetSubClass(1978). \
 \
See https://www.fixtrading.org/codelists/AssetType for code list of applicable values.  ISO 4721 Currency Code values are to be used when specific currency as an asset type is to be expressed. \
 \
Other values may be used by mutual agreement of the counterparties.*/ \
X(BlockTrdAllocIndicator,                                                1980) /*!< 1980 (int FIX.5.0SP2) Indication that a block trade will be allocated.*/ \
X(NoUnderlyingEvents,                                                    1981) /*!< 1981 (NumInGroup FIX.5.0SP2) Number of events in the repeating group.*/ \
X(UnderlyingEventType,                                                   1982) /*!< 1982 (int FIX.5.0SP2) Code to represent the type of event.*/ \
X(UnderlyingEventDate,                                                   1983) /*!< 1983 (LocalMktDate FIX.5.0SP2) The date of the event.*/ \
X(UnderlyingEventTime,                                                   1984) /*!< 1984 (UTCTimestamp FIX.5.0SP2) The time of the event. To be used in combination with UnderlyingEventDate(1983).*/ \
X(UnderlyingEventTimeUnit,                                               1985) /*!< 1985 (String FIX.5.0SP2) Time unit associated with the event. */ \
X(UnderlyingEventTimePeriod,                                             1986) /*!< 1986 (int FIX.5.0SP2) Time unit multiplier for the event. */ \
X(UnderlyingEventPx,                                                     1987) /*!< 1987 (Price FIX.5.0SP2) Predetermined price of issue at event, if applicable.*/ \
X(UnderlyingConstituentWeight,                                           1988) /*!< 1988 (float FIX.5.0SP2) For a basket, or pool, describes the weight of each of the constituents within the basket. If not provided, it is assumed to be equal weighted.*/ \
X(UnderlyingCouponType,                                                  1989) /*!< 1989 (int FIX.5.0SP2) Specifies the coupon type of the underlying bond. */ \
X(UnderlyingTotalIssuedAmount,                                           1990) /*!< 1990 (Amt FIX.5.0SP2) Specifies the total amount of the issue. Corresponds to the par value multiplied by the number of issued security.*/ \
X(UnderlyingCouponFrequencyPeriod,                                       1991) /*!< 1991 (int FIX.5.0SP2) Time unit multiplier for the frequency of the bond's coupon payment.*/ \
X(UnderlyingCouponFrequencyUnit,                                         1992) /*!< 1992 (String FIX.5.0SP2) Time unit associated with the frequency of the bond's coupon payment.*/ \
X(UnderlyingCouponDayCount,                                              1993) /*!< 1993 (int FIX.5.0SP2) The day count convention used in interest calculations for a bond or an interest bearing security.*/ \
X(UnderlyingObligationID,                                                1994) /*!< 1994 (String FIX.5.0SP2) For a CDS basket or pool identifies the reference obligation.*/ \
X(UnderlyingObligationIDSource,                                          1995) /*!< 1995 (String FIX.5.0SP2) Identifies the source scheme of the UnderlyingObligationID(1994).*/ \
X(UnderlyingEquityID,                                                    1996) /*!< 1996 (String FIX.5.0SP2) Specifies the equity in which a convertible bond can be converted.*/ \
X(UnderlyingEquityIDSource,                                              1997) /*!< 1997 (String FIX.5.0SP2) Identifies the source of the UnderlyingEquityID(1996).*/ \
X(UnderlyingLienSeniority,                                               1998) /*!< 1998 (int FIX.5.0SP2) Indicates the seniority level of the lien in a loan. */ \
X(UnderlyingLoanFacility,                                                1999) /*!< 1999 (int FIX.5.0SP2) Specifies the type of loan when the credit default swap's reference obligation is a loan.*/ \
X(UnderlyingReferenceEntityType,                                         2000) /*!< 2000 (int FIX.5.0SP2) Specifies the type of reference entity for first-to-default CDS basket contracts.*/ \
X(StrikeIndexSpread,                                                     2001) /*!< 2001 (PriceOffset FIX.5.0SP2) Specifies the strike price offset from the named index.*/ \
X(ValuationSource,                                                       2002) /*!< 2002 (String FIX.5.0SP2) Specifies the source of trade valuation data.*/ \
X(UnderlyingIndexSeries,                                                 2003) /*!< 2003 (int FIX.5.0SP2) The series identifier of a credit default swap index. */ \
X(UnderlyingIndexAnnexVersion,                                           2004) /*!< 2004 (int FIX.5.0SP2) The version identifier of a credit default swap index annex.*/ \
X(UnderlyingIndexAnnexDate,                                              2005) /*!< 2005 (LocalMktDate FIX.5.0SP2) The date of a credit default swap index series annex.*/ \
X(UnderlyingIndexAnnexSource,                                            2006) /*!< 2006 (String FIX.5.0SP2) The source of a credit default swap index series annex.*/ \
X(UnderlyingProductComplex,                                              2007) /*!< 2007 (String FIX.5.0SP2) Identifies an entire suite of products for a given market. In Futures this may be "interest rates", "agricultural", "equity indexes", etc*/ \
X(UnderlyingSecurityGroup,                                               2008) /*!< 2008 (String FIX.5.0SP2) An exchange specific name assigned to a group of related securities which may be concurrently affected by market events and actions.*/ \
X(UnderlyingSettleOnOpenFlag,                                            2009) /*!< 2009 (String FIX.5.0SP2) Indicator to determine if Instrument is Settle on Open.*/ \
X(UnderlyingAssignmentMethod,                                            2010) /*!< 2010 (char FIX.5.0SP2) Method under which assignment was conducted*/ \
X(UnderlyingSecurityStatus,                                              2011) /*!< 2011 (String FIX.5.0SP2) Gives the current state of the instrument*/ \
X(UnderlyingObligationType,                                              2012) /*!< 2012 (String FIX.5.0SP2) Type of reference obligation for credit derivatives contracts.*/ \
X(UnderlyingAssetClass,                                                  2013) /*!< 2013 (int FIX.5.0SP2) The broad asset category for assessing risk exposure.*/ \
X(UnderlyingAssetSubClass,                                               2014) /*!< 2014 (int FIX.5.0SP2) An indication of the general description of the asset class. */ \
X(UnderlyingAssetType,                                                   2015) /*!< 2015 (String FIX.5.0SP2) Used to provide more specific description of the asset specified in UnderlyingAssetSubClass(2082). \
 \
See https://www.fixtrading.org/codelists/AssetType for code list of applicable values.  ISO 4721 Currency Code values are to be used when specific currency as an asset type is to be expressed. \
 \
Other values may be used by mutual agreement of the counterparties.*/ \
X(UnderlyingSwapClass,                                                   2016) /*!< 2016 (String FIX.5.0SP2) The type or classification of swap. Additional values may be used by mutual agreement of the counterparties.*/ \
X(UnderlyingNthToDefault,                                                2017) /*!< 2017 (int FIX.5.0SP2) The Nth reference obligation to default in a CDS reference basket. If specified without UnderlyingMthToDefault(2018) the default will trigger a CDS payout.  If UnderlyingMthToDefault(2018) is also present then payout occurs between the Nth and Mth obligations to default.*/ \
X(UnderlyingMthToDefault,                                                2018) /*!< 2018 (int FIX.5.0SP2) The Mth reference obligation to default in a CDS reference basket. When UnderlyingNthToDefault(2017) and UnderlyingMthToDefault(2018) are represented then the CDS payout occurs between the Nth and Mth obligations to default.*/ \
X(UnderlyingSettledEntityMatrixSource,                                   2019) /*!< 2019 (String FIX.5.0SP2) Relevant settled entity matrix source.*/ \
X(UnderlyingSettledEntityMatrixPublicationDate,                          2020) /*!< 2020 (LocalMktDate FIX.5.0SP2) Specifies the publication date of the applicable version of the matrix. If not specified, the Standard Terms Supplement defines rules for which version of the matrix is applicable.*/ \
X(UnderlyingStrikeMultiplier,                                            2021) /*!< 2021 (float FIX.5.0SP2) Used for derivatives. Multiplier applied to the strike price for the purpose of calculating the settlement value.*/ \
X(UnderlyingStrikeValue,                                                 2022) /*!< 2022 (float FIX.5.0SP2) Used for derivatives. The number of shares/units for the financial instrument involved in the option trade.*/ \
X(UnderlyingStrikePriceDeterminationMethod,                              2023) /*!< 2023 (int FIX.5.0SP2) Specifies how the strike price is determined at the point of option exercise. The strike may be fixed throughout the life of the option, set at expiration to the value of the underlying, set to the average value of the underlying , or set to the optimal value of the underlying.*/ \
X(UnderlyingStrikePriceBoundaryMethod,                                   2024) /*!< 2024 (int FIX.5.0SP2) Specifies the boundary condition to be used for the strike price relative to the underlying price at the point of option exercise.*/ \
X(UnderlyingStrikePriceBoundaryPrecision,                                2025) /*!< 2025 (Percentage FIX.5.0SP2) Used in combination with StrikePriceBoundaryMethod(1479) to specify the percentage of the strike price in relation to the underlying price. The percentage is generally 100 or greater for puts and 100 or less for calls.*/ \
X(UnderlyingMinPriceIncrement,                                           2026) /*!< 2026 (float FIX.5.0SP2) Minimum price increment for the instrument. Could also be used to represent tick value.*/ \
X(UnderlyingMinPriceIncrementAmount,                                     2027) /*!< 2027 (Amt FIX.5.0SP2) Minimum price increment amount associated with the UnderlyingMinPriceIncrement(2026). For listed derivatives, the value can be calculated by multiplying UnderlyingMinPriceIncrement(2026) by UnderlyingContractMultiplier(436).*/ \
X(UnderlyingOptPayoutType,                                               2028) /*!< 2028 (int FIX.5.0SP2) Indicates the type of valuation method or payout trigger for an in-the-money option.*/ \
X(UnderlyingOptPayoutAmount,                                             2029) /*!< 2029 (Amt FIX.5.0SP2) Cash amount indicating the pay out associated with an option. For binary options this is a fixed amount.*/ \
X(UnderlyingPriceQuoteMethod,                                            2030) /*!< 2030 (String FIX.5.0SP2) Method for price quotation.*/ \
X(UnderlyingValuationMethod,                                             2031) /*!< 2031 (String FIX.5.0SP2) Indicates type of valuation method used.*/ \
X(UnderlyingListMethod,                                                  2032) /*!< 2032 (int FIX.5.0SP2) Indicates whether the instruments are pre-listed only or can also be defined via user request.*/ \
X(UnderlyingCapPrice,                                                    2033) /*!< 2033 (Price FIX.5.0SP2) Used to express the ceiling price of a capped call.*/ \
X(UnderlyingFloorPrice,                                                  2034) /*!< 2034 (Price FIX.5.0SP2) Used to express the floor price of a capped put.*/ \
X(UnderlyingFlexibleIndicator,                                           2035) /*!< 2035 (Boolean FIX.5.0SP2) Used to indicate if a security has been defined as flexible according to "non-standard" means. Analog to CFICode Standard/Non-standard indicator.*/ \
X(UnderlyingFlexProductEligibilityIndicator,                             2036) /*!< 2036 (Boolean FIX.5.0SP2) Used to indicate if a product or group of product supports the creation of flexible securities.*/ \
X(UnderlyingPositionLimit,                                               2037) /*!< 2037 (int FIX.5.0SP2) Position limit for the instrument.*/ \
X(UnderlyingNTPositionLimit,                                             2038) /*!< 2038 (int FIX.5.0SP2) Position Limit in the near-term contract for a given exchange-traded product.*/ \
X(UnderlyingPool,                                                        2039) /*!< 2039 (String FIX.5.0SP2) Identifies the mortgage backed security (MBS) / asset backed security (ABS) pool.*/ \
X(UnderlyingContractSettlMonth,                                          2040) /*!< 2040 (MonthYear FIX.5.0SP2) Specifies when the contract (i.e. MBS/TBA) will settle.  Must be present for MBS/TBA.*/ \
X(UnderlyingDatedDate,                                                   2041) /*!< 2041 (LocalMktDate FIX.5.0SP2) If different from IssueDate()*/ \
X(UnderlyingInterestAccrualDate,                                         2042) /*!< 2042 (LocalMktDate FIX.5.0SP2) If different from IssueDate and DatedDate*/ \
X(UnderlyingShortSaleRestriction,                                        2043) /*!< 2043 (int FIX.5.0SP2) Indicates whether a restriction applies to short selling a security.*/ \
X(UnderlyingRefTickTableID,                                              2044) /*!< 2044 (int FIX.5.0SP2) Spread table code referred by the security or symbol.*/ \
X(NoUnderlyingComplexEvents,                                             2045) /*!< 2045 (NumInGroup FIX.5.0SP2) Number of complex events in the repeating group.*/ \
X(UnderlyingComplexEventType,                                            2046) /*!< 2046 (int FIX.5.0SP2) Identifies the type of complex event.*/ \
X(UnderlyingComplexOptPayoutAmount,                                      2047) /*!< 2047 (Amt FIX.5.0SP2) Cash amount indicating the pay out associated with an event. For binary options this is a fixed amount.*/ \
X(UnderlyingComplexEventPrice,                                           2048) /*!< 2048 (Price FIX.5.0SP2) Specifies the price at which the complex event takes effect. Impact of the event price is determined by the UnderlyingComplexEventType(2046).*/ \
X(UnderlyingComplexEventPriceBoundaryMethod,                             2049) /*!< 2049 (int FIX.5.0SP2) Specifies the boundary condition to be used for the event price relative to the UnderlyingComplexEventPrice(2048) at the point the complex event outcome takes effect as determined by the UnderlyingComplexEventPriceTimeType(2051).*/ \
X(UnderlyingComplexEventPriceBoundaryPrecision,                          2050) /*!< 2050 (Percentage FIX.5.0SP2) Used in combination with UnderlyingComplexEventPriceBoundaryMethod(2049) to specify the percentage of the strike price in relation to the  underlying price. The percentage is generally 100 or greater for puts and 100 or less for calls.*/ \
X(UnderlyingComplexEventPriceTimeType,                                   2051) /*!< 2051 (int FIX.5.0SP2) Specifies when the complex event outcome takes effect. The outcome of a complex event is a payout or barrier action as specified by the UnderlyingComplexEventType(2046).*/ \
X(UnderlyingComplexEventCondition,                                       2052) /*!< 2052 (int FIX.5.0SP2) 	 \
 \
 \
 \
Specifies the condition between complex events when more than one event is specified. \
 \
 \
 \
Multiple barrier events would use an "or" condition since only one can be effective at a given time. A set of digital range events would use an "and" condition since both conditions must be in effect for a payout to result.*/ \
X(NoUnderlyingComplexEventDates,                                         2053) /*!< 2053 (NumInGroup FIX.5.0SP2) Number of underlying complex event dates in the repeating group.*/ \
X(UnderlyingComplexEventStartDate,                                       2054) /*!< 2054 (UTCDateOnly FIX.5.0SP2) The start date of the date range on which a complex event is effective. The start date will be set equal to the end date for single day events such as Bermuda options. \
 \
The start date must always be less than or equal to end date.*/ \
X(UnderlyingComplexEventEndDate,                                         2055) /*!< 2055 (UTCDateOnly FIX.5.0SP2) The end date of the date range on which a complex event is effective. The start date will be set equal to the end date for single day events such as Bermuda options. \
 \
UnderlyingComplexEventEndDate(2056) must always be greater than or equal to UnderlyingComplexEventStartDate(2055).*/ \
X(NoUnderlyingComplexEventTimes,                                         2056) /*!< 2056 (NumInGroup FIX.5.0SP2) Number of complex event times in the repeating group.*/ \
X(UnderlyingComplexEventStartTime,                                       2057) /*!< 2057 (UTCTimeOnly FIX.5.0SP2) The start time of the time range on which a complex event date is effective. \
 \
UnderlyingComplexEventStartTime(2057) must always be less than or equal to UndelryingComplexEventEndTime(2058).*/ \
X(UnderlyingComplexEventEndTime,                                         2058) /*!< 2058 (UTCTimeOnly FIX.5.0SP2) The end time of the time range on which a complex event date is effective. \
 \
UnderlyingComplexEventEndTime(2058) must always be greater than or equal to UnderlyingComplexEventStartTime(2057).*/ \
X(NoLegEvents,                                                           2059) /*!< 2059 (NumInGroup FIX.5.0SP2) Number of events in the repeating group*/ \
X(LegEventType,                                                          2060) /*!< 2060 (int FIX.5.0SP2) Code to represent the type of event.*/ \
X(LegEventDate,                                                          2061) /*!< 2061 (LocalMktDate FIX.5.0SP2) The date of the event.*/ \
X(LegEventTime,                                                          2062) /*!< 2062 (UTCTimestamp FIX.5.0SP2) Specific time of event. To be used in combination with LegEventDate(2061).*/ \
X(LegEventTimeUnit,                                                      2063) /*!< 2063 (String FIX.5.0SP2) Time unit associated with the event. */ \
X(LegEventTimePeriod,                                                    2064) /*!< 2064 (int FIX.5.0SP2) Time unit multiplier for the event. */ \
X(LegEventPx,                                                            2065) /*!< 2065 (Price FIX.5.0SP2) Predetermined price of issue at event, if applicable.*/ \
X(LegEventText,                                                          2066) /*!< 2066 (String FIX.5.0SP2) Free form text to specify additional information or enumeration description when a standard value does not apply.*/ \
X(LegAssetClass,                                                         2067) /*!< 2067 (int FIX.5.0SP2) The broad asset category for assessing risk exposure.*/ \
X(LegAssetSubClass,                                                      2068) /*!< 2068 (int FIX.5.0SP2) The general subcategory description of the asset class. */ \
X(LegAssetType,                                                          2069) /*!< 2069 (String FIX.5.0SP2) Used to provide more specific description of the asset specified in LegAssetSubClass(2068). \
 \
See https://www.fixtrading.org/codelists/AssetType for code list of applicable values.  ISO 4721 Currency Code values are to be used when specific currency as an asset type is to be expressed. \
 \
Other values may be used by mutual agreement of the counterparties.*/ \
X(LegSwapClass,                                                          2070) /*!< 2070 (String FIX.5.0SP2) Swap type.*/ \
X(UnderlyingEventText,                                                   2071) /*!< 2071 (String FIX.5.0SP2) Free form text to specify comments related to the event.*/ \
X(EncodedUnderlyingEventTextLen,                                         2072) /*!< 2072 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingEventText(2073) field.*/ \
X(EncodedUnderlyingEventText,                                            2073) /*!< 2073 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingEventText(2071) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingEventText(2071) field.*/ \
X(EncodedLegEventTextLen,                                                2074) /*!< 2074 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegEventText(2075) field.*/ \
X(EncodedLegEventText,                                                   2075) /*!< 2075 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegEventText(2066) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegEventText(2066) field.*/ \
X(NoLegSecondaryAssetClasses,                                            2076) /*!< 2076 (NumInGroup FIX.5.0SP2) Number of secondary asset classes in the repeating group.*/ \
X(LegSecondaryAssetClass,                                                2077) /*!< 2077 (int FIX.5.0SP2) The broad asset category for assessing risk exposure for a multi-asset trade.*/ \
X(LegSecondaryAssetSubClass,                                             2078) /*!< 2078 (int FIX.5.0SP2) An indication of the general description of the asset class. */ \
X(LegSecondaryAssetType,                                                 2079) /*!< 2079 (String FIX.5.0SP2) Used to provide more specific description of the asset specified in LegSecondaryAssetSubClass(2078). \
 \
See https://www.fixtrading.org/codelists/AssetType for code list of applicable values.  ISO 4721 Currency Code values are to be used when specific currency as an asset type is to be expressed. \
 \
Other values may be used by mutual agreement of the counterparties.*/ \
X(NoUnderlyingSecondaryAssetClasses,                                     2080) /*!< 2080 (NumInGroup FIX.5.0SP2) Number of secondary asset classes in the repeating group.*/ \
X(UnderlyingSecondaryAssetClass,                                         2081) /*!< 2081 (int FIX.5.0SP2) The broad asset category for assessing risk exposure for a multi-asset trade.*/ \
X(UnderlyingSecondaryAssetSubClass,                                      2082) /*!< 2082 (int FIX.5.0SP2) An indication of the general description of the asset class.*/ \
X(UnderlyingSecondaryAssetType,                                          2083) /*!< 2083 (String FIX.5.0SP2) Used to provide more specific description of the asset specified in UnderlyingSecondaryAssetSubClass(2082). \
 \
See https://www.fixtrading.org/codelists/AssetType for code list of applicable values.  ISO 4721 Currency Code values are to be used when specific currency as an asset type is to be expressed. \
 \
Other values may be used by mutual agreement of the counterparties.*/ \
X(PreviousClearingBusinessDate,                                          2084) /*!< 2084 (LocalMktDate FIX.5.0SP2) The date of the previous clearing business day.*/ \
X(ValuationDate,                                                         2085) /*!< 2085 (LocalMktDate FIX.5.0SP2) The valuation date of the trade.*/ \
X(ValuationTime,                                                         2086) /*!< 2086 (LocalMktTime FIX.5.0SP2) The valuation time of the trade.*/ \
X(ValuationBusinessCenter,                                               2087) /*!< 2087 (String FIX.5.0SP2) Identifies the business center whose calendar is used for valuation, e.g. "GLOB". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(MarginAmtFXRate,                                                       2088) /*!< 2088 (float FIX.5.0SP2) Foreign exchange rate used to compute the MarginAmt(1645) from the MarginAmtCcy(1646) and the Currency(15).*/ \
X(MarginAmtFXRateCalc,                                                   2089) /*!< 2089 (char FIX.5.0SP2) Specifies whether or not MarginAmtFXRate(2088) should be multipled or divided.*/ \
X(CollateralFXRate,                                                      2090) /*!< 2090 (float FIX.5.0SP2) Foreign exchange rate used to compute the CurrentCollateralAmount(1704) from the CollateralCurrency(1646) and the Currency(15).*/ \
X(CollateralFXRateCalc,                                                  2091) /*!< 2091 (char FIX.5.0SP2) Specifies whether or not CollateralFXRate(2090) should be multipled or divided.*/ \
X(CollateralAmountMarketSegmentID,                                       2092) /*!< 2092 (String FIX.5.0SP2) Market segment associated with the collateral amount.*/ \
X(CollateralAmountMarketID,                                              2093) /*!< 2093 (String FIX.5.0SP2) Market associated with the collateral amount.*/ \
X(PayCollectFXRate,                                                      2094) /*!< 2094 (float FIX.5.0SP2) Foreign exchange rate used to compute the PayAmount(1710) or CollectAmount(1711) from the PayCollectCurrency(1709) and the Currency(15).*/ \
X(PayCollectFXRateCalc,                                                  2095) /*!< 2095 (char FIX.5.0SP2) Specifies whether or not PayCollectFXRate(2094) should be multipled or divided.*/ \
X(PosAmtStreamDesc,                                                      2096) /*!< 2096 (String FIX.5.0SP2) Corresponds to the value in StreamDesc(40051) in the StreamGrp component.*/ \
X(PositionFXRate,                                                        2097) /*!< 2097 (float FIX.5.0SP2) Foreign exchange rate used to compute the PosAmt(708) from the PositionCurrency(1055) and the Currency (15).*/ \
X(PositionFXRateCalc,                                                    2098) /*!< 2098 (char FIX.5.0SP2) Specifies whether or not PositionFXRate(2097) should be multipled or divided.*/ \
X(PosAmtMarketSegmentID,                                                 2099) /*!< 2099 (String FIX.5.0SP2) Market segment associated with the position amount.*/ \
X(PosAmtMarketID,                                                        2100) /*!< 2100 (String FIX.5.0SP2) Market associated with the position amount.*/ \
X(TerminatedIndicator,                                                   2101) /*!< 2101 (Boolean FIX.5.0SP2) Indicates if the position has been terminated.*/ \
X(ShortMarkingExemptIndicator,                                           2102) /*!< 2102 (Boolean FIX.5.0SP2) Indicates whether the originating account is exempt (Y) from marking orders as short or not (N). This designation may be used on both buy and sell orders.*/ \
X(RelatedRegulatoryTradeIDSource,                                        2103) /*!< 2103 (String FIX.5.0SP2) Specifies the identifier of the reporting entity as assigned by regulatory agency.*/ \
X(NoAttachments,                                                         2104) /*!< 2104 (NumInGroup FIX.5.0SP2) The number of attached files.*/ \
X(AttachmentName,                                                        2105) /*!< 2105 (String FIX.5.0SP2) Specifies the file name of the attachment.*/ \
X(AttachmentMediaType,                                                   2106) /*!< 2106 (String FIX.5.0SP2) The MIME media type (and optional subtype) of the attachment.  The values used are those assigned, listed and maintained by IANA (www.iana.org) [RFC2046]. See http://www.iana.org/assignments/media-types/index.html for available types. \
 \
 \
 \
 \
 \
Examples values (RFC number provided for reference here only): \
 \
"application/pdf" (see [RFC3778]) \
 \
"application/msword" (for .doc files) \
 \
"multipart/signed" (see [RFC1847]) \
 \
"application/vnd.openxmlformats-officedocument.wordprocessingml.document" (for .docx files) \
 \
*/ \
X(AttachmentClassification,                                              2107) /*!< 2107 (String FIX.5.0SP2) Specifies  semantically the type of the attached document from a business perspective. The default classification scheme reuses the FIX standard classification scheme of a high level section (pretrade, trade, posttrade, etc.) and a category, then a specific application or document type. The expression follows {"section/category/application type"}. \
 \
 \
 \
The goal here is to map the attachment into the sections and categories of the FIX business messages if possible. The classification scheme can be expanded or replaced by counterparty agreement. This approach permits the introduction and reference to other business ontologies. \
 \
 \
 \
Example: \
 \
posttrade/confirmation/confirm \
 \
pretrade//termsheet*/ \
X(AttachmentExternalURL,                                                 2108) /*!< 2108 (String FIX.5.0SP2) Used to specify an external URL where the attachment can be obtained.*/ \
X(AttachmentEncodingType,                                                2109) /*!< 2109 (int FIX.5.0SP2) The encoding type of the content provided in EncodedAttachment(2112).*/ \
X(UnencodedAttachmentLen,                                                2110) /*!< 2110 (int FIX.5.0SP2) Unencoded content length in bytes. Can be used to validate successful unencoding.*/ \
X(EncodedAttachmentLen,                                                  2111) /*!< 2111 (Length FIX.5.0SP2) Byte length of encoded the EncodedAttachment(2112) field.*/ \
X(EncodedAttachment,                                                     2112) /*!< 2112 (data FIX.5.0SP2) The content of the attachment in the encoding format specified in the AttachmentEncodingType(2109) field.*/ \
X(NoAttachmentKeywords,                                                  2113) /*!< 2113 (NumInGroup FIX.5.0SP2) The number of attachment keywords.*/ \
X(AttachmentKeyword,                                                     2114) /*!< 2114 (String FIX.5.0SP2) Can be used to provide data or keyword tagging of the content of the attachment.*/ \
X(NegotiationMethod,                                                     2115) /*!< 2115 (int FIX.5.0SP2) Specifies the negotiation method to be used.*/ \
X(NextAuctionTime,                                                       2116) /*!< 2116 (UTCTimestamp FIX.5.0SP2) The time of the next auction.*/ \
X(ComplexOptPayoutPaySide,                                               2117) /*!< 2117 (int FIX.5.0SP2) Trade side of payout payer.*/ \
X(ComplexOptPayoutReceiveSide,                                           2118) /*!< 2118 (int FIX.5.0SP2) Trade side of payout receiver.*/ \
X(ComplexOptPayoutUnderlier,                                             2119) /*!< 2119 (String FIX.5.0SP2) Reference to the underlier whose payments are being passed through.*/ \
X(ComplexOptPayoutPercentage,                                            2120) /*!< 2120 (Percentage FIX.5.0SP2) Percentage of observed price for calculating the payout associated with the event.*/ \
X(ComplexOptPayoutTime,                                                  2121) /*!< 2121 (int FIX.5.0SP2) Specifies when the payout is to occur.*/ \
X(ComplexOptPayoutCurrency,                                              2122) /*!< 2122 (Currency FIX.5.0SP2) Specifies the currency of the payout amount. Uses ISO 4217 currency codes.*/ \
X(ComplexEventPricePercentage,                                           2123) /*!< 2123 (Percentage FIX.5.0SP2) Specifies the price percentage at which the complex event takes effect. Impact of the event price is determined by the ComplexEventType(1484).*/ \
X(ComplexEventCurrencyOne,                                               2124) /*!< 2124 (Currency FIX.5.0SP2) Specifies the first or only reference currency of the trade. Uses ISO 4217 currency codes.*/ \
X(ComplexEventCurrencyTwo,                                               2125) /*!< 2125 (Currency FIX.5.0SP2) Specifies the second reference currencyof the trade. Uses ISO 4217 currency codes.*/ \
X(ComplexEventQuoteBasis,                                                2126) /*!< 2126 (int FIX.5.0SP2) For foreign exchange Quanto option feature.*/ \
X(ComplexEventFixedFXRate,                                               2127) /*!< 2127 (float FIX.5.0SP2) Specifies the fixed FX rate alternative for FX Quantro options.*/ \
X(ComplexEventDeterminationMethod,                                       2128) /*!< 2128 (String FIX.5.0SP2) Specifies the method according to which an amount or a date is determined.   \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(ComplexEventCalculationAgent,                                          2129) /*!< 2129 (int FIX.5.0SP2) Used to identify the calculation agent.*/ \
X(ComplexEventStrikePrice,                                               2130) /*!< 2130 (Price FIX.5.0SP2) Upper strike price for Asian option feature. Strike percentage for a Strike Spread.*/ \
X(ComplexEventStrikeFactor,                                              2131) /*!< 2131 (float FIX.5.0SP2) Strike factor for Asian option feature. Upper strike percentage for a Strike Spread.*/ \
X(ComplexEventStrikeNumberOfOptions,                                     2132) /*!< 2132 (int FIX.5.0SP2) Upper string number of options for a Strike Spread.*/ \
X(ComplexEventCreditEventsXIDRef,                                        2133) /*!< 2133 (XIDREF FIX.5.0SP2) Reference to credit event table elsewhere in the message.*/ \
X(ComplexEventCreditEventNotifyingParty,                                 2134) /*!< 2134 (int FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. */ \
X(ComplexEventCreditEventBusinessCenter,                                 2135) /*!< 2135 (String FIX.5.0SP2) The local business center for which the credit event is to be determined. The inclusion of this business center implies that Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions is replaced by the local time of the specified business center.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ComplexEventCreditEventStandardSources,                                2136) /*!< 2136 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', indicates that ISDA defined Standard Public Sources are applicable.*/ \
X(ComplexEventCreditEventMinimumSources,                                 2137) /*!< 2137 (int FIX.5.0SP2) The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two.*/ \
X(ComplexEventXID,                                                       2138) /*!< 2138 (XID FIX.5.0SP2) Identifier of this complex event for cross referencing elsewhere in the message.*/ \
X(ComplexEventXIDRef,                                                    2139) /*!< 2139 (XIDREF FIX.5.0SP2) Reference to a complex event elsewhere in the message.*/ \
X(ValuationReferenceModel,                                               2140) /*!< 2140 (String FIX.5.0SP2) Specifies the methodology and/or assumptions used to generate the  trade value.*/ \
X(StrategyType,                                                          2141) /*!< 2141 (String FIX.5.0SP2) Specifies the type of trade strategy.*/ \
X(CommonPricingIndicator,                                                2142) /*!< 2142 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', it indicates that common pricing applies. Common pricing may be relevant for a transaction that references more than one commodity reference price.*/ \
X(SettlDisruptionProvision,                                              2143) /*!< 2143 (int FIX.5.0SP2) Specifies the consequences of bullion settlement disruption events. */ \
X(InstrumentRoundingDirection,                                           2144) /*!< 2144 (char FIX.5.0SP2) Specifies the rounding direction if not overridden elsewhere.*/ \
X(InstrumentRoundingPrecision,                                           2145) /*!< 2145 (int FIX.5.0SP2) Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(LegSettleOnOpenFlag,                                                   2146) /*!< 2146 (String FIX.5.0SP2) Indicator to determine if the instrument is to settle on open.*/ \
X(LegInstrmtAssignmentMethod,                                            2147) /*!< 2147 (char FIX.5.0SP2) Specifies the method under which assignment was conducted.*/ \
X(LegSecurityStatus,                                                     2148) /*!< 2148 (String FIX.5.0SP2) Used for derivatives. Denotes the current state of the InstrumentLeg.*/ \
X(LegRestructuringType,                                                  2149) /*!< 2149 (String FIX.5.0SP2) A category of CDS credit event in which the underlying bond experiences a restructuring. \
 \
Used to define a CDS instrument.*/ \
X(LegSeniority,                                                          2150) /*!< 2150 (String FIX.5.0SP2) Specifies which issue (underlying bond) will receive payment priority in the event of a default. \
 \
Used to define a CDS instrument.*/ \
X(LegNotionalPercentageOutstanding,                                      2151) /*!< 2151 (Percentage FIX.5.0SP2) Indicates the notional percentage of the deal that is still outstanding based on the remaining components of the index. \
 \
Used to calculate the true value of a CDS trade or position.*/ \
X(LegOriginalNotionalPercentageOutstanding,                              2152) /*!< 2152 (Percentage FIX.5.0SP2) Used to reflect the Original value prior to the application of a credit event. See LegNotionalPercentageOutstanding(2151).*/ \
X(LegAttachmentPoint,                                                    2153) /*!< 2153 (Percentage FIX.5.0SP2) Lower bound percentage of the loss that the tranche can endure.*/ \
X(LegDetachmentPoint,                                                    2154) /*!< 2154 (Percentage FIX.5.0SP2) Upper bound percentage of the loss the tranche can endure.*/ \
X(LegObligationType,                                                     2155) /*!< 2155 (String FIX.5.0SP2) Type of reference obligation for credit derivatives contracts.*/ \
X(LegSwapSubClass,                                                       2156) /*!< 2156 (String FIX.5.0SP2) The sub-classification or notional schedule type of the swap.*/ \
X(LegNthToDefault,                                                       2157) /*!< 2157 (int FIX.5.0SP2) The Nth reference obligation in a CDS reference basket. If specified without LegMthToDefault(2158) the default will trigger a CDS payout. If LegMthToDefault(2158) is also present then payout occurs between the Nth and Mth obligations to default.*/ \
X(LegMthToDefault,                                                       2158) /*!< 2158 (int FIX.5.0SP2) The Mth reference obligation to default in a CDS reference basket. When an NthToDefault(2157) to MthToDefault(2158) are represented then the CDS payout occurs between the Nth and Mth obligations to default.*/ \
X(LegSettledEntityMatrixSource,                                          2159) /*!< 2159 (String FIX.5.0SP2) Relevant settled entity matrix source.*/ \
X(LegSettledEntityMatrixPublicationDate,                                 2160) /*!< 2160 (LocalMktDate FIX.5.0SP2) The publication date of the applicable version of the matrix. When this element is omitted, the Standard Terms Supplement defines rules for which version of the matrix is applicable.*/ \
X(LegCouponType,                                                         2161) /*!< 2161 (int FIX.5.0SP2) Specifies the coupon type of the bond.*/ \
X(LegTotalIssuedAmount,                                                  2162) /*!< 2162 (Amt FIX.5.0SP2) Specifies the total amount of the issue. Corresponds to the par value multiplied by the number of issued security.*/ \
X(LegCouponFrequencyPeriod,                                              2163) /*!< 2163 (int FIX.5.0SP2) Time unit multiplier for the frequency of the bond's coupon payment. */ \
X(LegCouponFrequencyUnit,                                                2164) /*!< 2164 (String FIX.5.0SP2) Time unit associated with the frequency of the bond's coupon payment.*/ \
X(LegCouponDayCount,                                                     2165) /*!< 2165 (int FIX.5.0SP2) The day count convention used in interest calculations for a bond or an interest bearing security.*/ \
X(LegConvertibleBondEquityID,                                            2166) /*!< 2166 (String FIX.5.0SP2) Identifies the equity in which a convertible bond can be converted to.*/ \
X(LegConvertibleBondEquityIDSource,                                      2167) /*!< 2167 (String FIX.5.0SP2) Identifies class or source of the LegConvertibleBondEquitySecurityID(2166) value.*/ \
X(LegContractPriceRefMonth,                                              2168) /*!< 2168 (MonthYear FIX.5.0SP2) Reference month if there is no applicable LegMaturityMonthYear(610) value for the contract or security.*/ \
X(LegLienSeniority,                                                      2169) /*!< 2169 (int FIX.5.0SP2) Indicates the seniority level of the lien in a loan.*/ \
X(LegLoanFacility,                                                       2170) /*!< 2170 (int FIX.5.0SP2) Specifies the type of loan when the credit default swap's reference obligation is a loan.*/ \
X(LegReferenceEntityType,                                                2171) /*!< 2171 (int FIX.5.0SP2) Specifies the type of reference entity for first-to-default CDS basket contracts.*/ \
X(LegIndexSeries,                                                        2172) /*!< 2172 (int FIX.5.0SP2) The series identifier of a credit default swap index.*/ \
X(LegIndexAnnexVersion,                                                  2173) /*!< 2173 (int FIX.5.0SP2) The version of a credit default swap index annex.*/ \
X(LegIndexAnnexDate,                                                     2174) /*!< 2174 (LocalMktDate FIX.5.0SP2) The date of a credit default swap index series annex.*/ \
X(LegIndexAnnexSource,                                                   2175) /*!< 2175 (String FIX.5.0SP2) The source of a credit default swap series annex.*/ \
X(LegSettlRateIndex,                                                     2176) /*!< 2176 (String FIX.5.0SP2) In an outright or forward commodity trade that is cash settled this is the index used to determine the cash payment.*/ \
X(LegSettlRateIndexLocation,                                             2177) /*!< 2177 (String FIX.5.0SP2) This is an optional qualifying attribute of LegSettlementRateIndex(2176) such as the delivery zone for an electricity contract.*/ \
X(LegOptionExpirationDesc,                                               2178) /*!< 2178 (String FIX.5.0SP2) Description of the option expiration.*/ \
X(EncodedLegOptionExpirationDescLen,                                     2179) /*!< 2179 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegOptionExpirationDesc(2180) field.*/ \
X(EncodedLegOptionExpirationDesc,                                        2180) /*!< 2180 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegOptionExpirationDesc(2178) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegOptionExpirationDesc(2178).*/ \
X(LegStrikeMultiplier,                                                   2181) /*!< 2181 (float FIX.5.0SP2) Used for derivatives. Multiplier applied to the strike price for the purpose of calculating the settlement value.*/ \
X(LegStrikeValue,                                                        2182) /*!< 2182 (float FIX.5.0SP2) The number of shares/units for the financial instrument involved in the option trade. Used for derivatives.*/ \
X(LegStrikeUnitOfMeasure,                                                2183) /*!< 2183 (String FIX.5.0SP2) Used to express the unit of measure (UOM) of the price if different from the contract. */ \
X(LegStrikeIndex,                                                        2184) /*!< 2184 (String FIX.5.0SP2) Specifies the index used to calculate the strike price.*/ \
X(LegStrikeIndexSpread,                                                  2185) /*!< 2185 (PriceOffset FIX.5.0SP2) Specifies the strike price offset from the named index.*/ \
X(LegStrikePriceDeterminationMethod,                                     2186) /*!< 2186 (int FIX.5.0SP2) Specifies how the strike price is determined at the point of option exercise. The strike may be fixed throughout the life of the option, set at expiration to the value of the underlying, set to the average value of the underlying , or set to the optimal value of the underlying.*/ \
X(LegStrikePriceBoundaryMethod,                                          2187) /*!< 2187 (int FIX.5.0SP2) Specifies the boundary condition to be used for the strike price relative to the underlying price at the point of option exercise.*/ \
X(LegStrikePriceBoundaryPrecision,                                       2188) /*!< 2188 (Percentage FIX.5.0SP2) Used in combination with StrikePriceBoundaryMethod(2187) to specify the percentage of the strike price in relation to the underlying price. The percentage is generally 100 or greater for puts and 100 or less for calls.*/ \
X(LegUnderlyingPriceDeterminationMethod,                                 2189) /*!< 2189 (int FIX.5.0SP2) Specifies how the underlying price is determined at the point of option exercise. The underlying price may be set to the current settlement price, set to a special reference, set to the optimal value of the underlying during the defined period ("Look-back") or set to the average value of the underlying during the defined period ("Asian option").*/ \
X(LegMinPriceIncrement,                                                  2190) /*!< 2190 (float FIX.5.0SP2) Minimum price increment for a given exchange-traded instrument.  Could also be used to represent tick value.*/ \
X(LegMinPriceIncrementAmount,                                            2191) /*!< 2191 (Amt FIX.5.0SP2) Minimum price increment amount associated with the LegMinPriceIncrement(2190). For listed derivatives, the value can be calculated by multiplying LegMinPriceIncrement(2190) by LegContractMultiplier(614).*/ \
X(LegSettlMethod,                                                        2192) /*!< 2192 (String FIX.5.0SP2) Settlement method for a contract or instrument. Additional values may be used with bilateral agreement. */ \
X(LegOptPayoutType,                                                      2193) /*!< 2193 (int FIX.5.0SP2) Indicates the type of valuation method or trigger payout for an in-the-money option.*/ \
X(LegOptPayoutAmount,                                                    2194) /*!< 2194 (Amt FIX.5.0SP2) Cash amount indicating the pay out associated with an option. For binary options this is a fixed amount.*/ \
X(LegPriceQuoteMethod,                                                   2195) /*!< 2195 (String FIX.5.0SP2) Specifies the method for price quotation.*/ \
X(LegValuationMethod,                                                    2196) /*!< 2196 (String FIX.5.0SP2) Specifies the type of valuation method applied.*/ \
X(LegValuationSource,                                                    2197) /*!< 2197 (String FIX.5.0SP2) Specifies the source of trade valuation data.*/ \
X(LegValuationReferenceModel,                                            2198) /*!< 2198 (String FIX.5.0SP2) Specifies the methodology and/or assumptions used to generate the trade value.*/ \
X(LegListMethod,                                                         2199) /*!< 2199 (int FIX.5.0SP2) Indicates whether instruments are pre-listed only or can also be defined via user request.*/ \
X(LegCapPrice,                                                           2200) /*!< 2200 (Price FIX.5.0SP2) Used to express the ceiling price of a capped call.*/ \
X(LegFloorPrice,                                                         2201) /*!< 2201 (Price FIX.5.0SP2) Used to express the floor price of a capped put.*/ \
X(LegFlexibleIndicator,                                                  2202) /*!< 2202 (Boolean FIX.5.0SP2) Used to indicate a derivatives security that can be defined using flexible terms. The terms commonly permitted to be defined by market participants are expiration date and strike price. FlexibleIndicator is an alternative to LegCFICode(608) Standard/Non-standard attribute.*/ \
X(LegFlexProductEligibilityIndicator,                                    2203) /*!< 2203 (Boolean FIX.5.0SP2) Used to indicate if a product or group of product supports the creation of flexible securities.*/ \
X(LegComplexEventStartTime,                                              2204) /*!< 2204 (UTCTimeOnly FIX.5.0SP2) The start time of the time range on which a complex event date is effective. \
 \
The start time must always be less than or equal to the end time.*/ \
X(LegPositionLimit,                                                      2205) /*!< 2205 (int FIX.5.0SP2) Position Limit for a given exchange-traded product.*/ \
X(LegNTPositionLimit,                                                    2206) /*!< 2206 (int FIX.5.0SP2) Position limit in the near-term contract for a given exchange-traded product.*/ \
X(LegCPProgram,                                                          2207) /*!< 2207 (int FIX.5.0SP2) The program under which a commercial paper is issued.*/ \
X(LegCPRegType,                                                          2208) /*!< 2208 (String FIX.5.0SP2) The registration type of a commercial paper issuance.*/ \
X(LegShortSaleRestriction,                                               2209) /*!< 2209 (int FIX.5.0SP2) Indicates whether a restriction applies to short selling a security.*/ \
X(AssetGroup,                                                            2210) /*!< 2210 (int FIX.5.0SP2) Indicates the broad product or asset classification.  May be used to provide grouping for the product taxonomy (Product(460), SecurityType(167), etc.) and/or the risk taxonomy (AssetClass(1938), AssetSubClass(1939), AssetType(1940), etc.).*/ \
X(LegStrategyType,                                                       2211) /*!< 2211 (String FIX.5.0SP2) Specifies the type of trade strategy.*/ \
X(LegCommonPricingIndicator,                                             2212) /*!< 2212 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', it indicates that common pricing applies. Common pricing may be relevant for a transaction that references more than one commodity reference price.*/ \
X(LegSettlDisruptionProvision,                                           2213) /*!< 2213 (int FIX.5.0SP2) Specifies the consequences of bullion settlement disruption events. */ \
X(LegInstrumentRoundingDirection,                                        2214) /*!< 2214 (char FIX.5.0SP2) Specifies the rounding direction if not overridden elsewhere.*/ \
X(LegInstrumentRoundingPrecision,                                        2215) /*!< 2215 (int FIX.5.0SP2) Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(MiscFeeRate,                                                           2216) /*!< 2216 (Percentage FIX.5.0SP2) The fee rate when MiscFeeAmt(137) is a percentage of trade quantity.*/ \
X(MiscFeeAmountDue,                                                      2217) /*!< 2217 (Amt FIX.5.0SP2) The fee amount due if different from MiscFeeAmt(137).*/ \
X(NoLegComplexEvents,                                                    2218) /*!< 2218 (NumInGroup FIX.5.0SP2) Number of complex events in the repeating group.*/ \
X(LegComplexEventType,                                                   2219) /*!< 2219 (int FIX.5.0SP2) Identifies the type of complex event.*/ \
X(LegComplexOptPayoutPaySide,                                            2220) /*!< 2220 (int FIX.5.0SP2) Trade side of payout payer.*/ \
X(LegComplexOptPayoutReceiveSide,                                        2221) /*!< 2221 (int FIX.5.0SP2) Trade side of payout receiver.*/ \
X(LegComplexOptPayoutUnderlier,                                          2222) /*!< 2222 (String FIX.5.0SP2) Reference to the underlier whose payments are being passed through.*/ \
X(LegComplexOptPayoutAmount,                                             2223) /*!< 2223 (Amt FIX.5.0SP2) Cash amount indicating the pay out associated with an event. For binary options this is a fixed amount.*/ \
X(LegComplexOptPayoutPercentage,                                         2224) /*!< 2224 (Percentage FIX.5.0SP2) Percentage of observed price for calculating the payout associated with the event.*/ \
X(LegComplexOptPayoutTime,                                               2225) /*!< 2225 (int FIX.5.0SP2) Specifies when the payout is to occur.*/ \
X(LegComplexOptPayoutCurrency,                                           2226) /*!< 2226 (Currency FIX.5.0SP2) Specifies the currency of the payout amount. Uses ISO 4217 currency codes.*/ \
X(LegComplexEventPrice,                                                  2227) /*!< 2227 (Price FIX.5.0SP2) Specifies the price at which the complex event takes effect. Impact of the event price is determined by the LegComplexEventType(2219).*/ \
X(LegComplexEventPricePercentage,                                        2228) /*!< 2228 (Percentage FIX.5.0SP2) Specifies the price percentage at which the complex event takes effect. Impact of the event price is determined by the LegComplexEventType(2219).*/ \
X(LegComplexEventPriceBoundaryMethod,                                    2229) /*!< 2229 (int FIX.5.0SP2) Specifies the boundary condition to be used for the event price relative to the complex event price at the point the complex event outcome takes effect as determined by the LegComplexEventPriceTimeType(2231).*/ \
X(LegComplexEventPriceBoundaryPrecision,                                 2230) /*!< 2230 (Percentage FIX.5.0SP2) Used in combination with LegComplexEventPriceBoundaryMethod(2229) to specify the percentage of the strike price in relation to the  underlying price. The percentage is generally 100 or greater for puts and 100 or less for calls.*/ \
X(LegComplexEventPriceTimeType,                                          2231) /*!< 2231 (int FIX.5.0SP2) Specifies when the complex event outcome takes effect. The outcome of a complex event is a payout or barrier action as specified by the LegComplexEventType(2219).*/ \
X(LegComplexEventCondition,                                              2232) /*!< 2232 (int FIX.5.0SP2) Specifies the condition between complex events when more than one event is specified. \
 \
Multiple barrier events would use an "or" condition since only one can be effective at a given time. A set of digital range events would use an "and" condition since both conditions must be in effect for a payout to result.*/ \
X(LegComplexEventCurrencyOne,                                            2233) /*!< 2233 (Currency FIX.5.0SP2) Specifies the first or only reference currency of the trade. Uses ISO 4217 currency codes.*/ \
X(LegComplexEventCurrencyTwo,                                            2234) /*!< 2234 (Currency FIX.5.0SP2) Specifies the second reference currency of the trade.  Uses ISO 4217 currency codes.*/ \
X(LegComplexEventQuoteBasis,                                             2235) /*!< 2235 (int FIX.5.0SP2) For foreign exchange Quanto option feature.*/ \
X(LegComplexEventFixedFXRate,                                            2236) /*!< 2236 (float FIX.5.0SP2) Specifies the fixed FX rate alternative for FX Quantro options.*/ \
X(LegComplexEventDeterminationMethod,                                    2237) /*!< 2237 (String FIX.5.0SP2) Specifies the method according to which an amount or a date is determined.   \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(LegComplexEventCalculationAgent,                                       2238) /*!< 2238 (int FIX.5.0SP2) Used to identify the calculation agent.*/ \
X(LegComplexEventStrikePrice,                                            2239) /*!< 2239 (Price FIX.5.0SP2) Upper strike price for Asian option feature. Strike percentage for a Strike Spread.*/ \
X(LegComplexEventStrikeFactor,                                           2240) /*!< 2240 (float FIX.5.0SP2) Strike factor for Asian option feature. Upper strike percentage for a Strike Spread.*/ \
X(LegComplexEventStrikeNumberOfOptions,                                  2241) /*!< 2241 (int FIX.5.0SP2) Upper string number of options for a Strike Spread.*/ \
X(LegComplexEventCreditEventsXIDRef,                                     2242) /*!< 2242 (XIDREF FIX.5.0SP2) Reference to credit event table elsewhere in the message.*/ \
X(LegComplexEventCreditEventNotifyingParty,                              2243) /*!< 2243 (int FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring.*/ \
X(LegComplexEventCreditEventBusinessCenter,                              2244) /*!< 2244 (String FIX.5.0SP2) Specifies the local business center for which the credit event is to be determined. The inclusion of this business center implies that Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions is replaced by the local time of the specified business center.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegComplexEventCreditEventStandardSources,                             2245) /*!< 2245 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', indicates that ISDA defined Standard Public Sources are applicable.*/ \
X(LegComplexEventCreditEventMinimumSources,                              2246) /*!< 2246 (int FIX.5.0SP2) The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two.*/ \
X(LegComplexEventEndTime,                                                2247) /*!< 2247 (UTCTimeOnly FIX.5.0SP2) The end time of the time range on which a complex event date is effective. \
 \
The end time must always be greater than or equal to the start time.*/ \
X(LegComplexEventXID,                                                    2248) /*!< 2248 (XID FIX.5.0SP2) Identifier of this complex event for cross referencing elsewhere in the message.*/ \
X(LegComplexEventXIDRef,                                                 2249) /*!< 2249 (XIDREF FIX.5.0SP2) Reference to a complex event elsewhere in the message.*/ \
X(NoLegComplexEventDates,                                                2250) /*!< 2250 (NumInGroup FIX.5.0SP2) Number of complex event dates in the repeating group.*/ \
X(LegComplexEventStartDate,                                              2251) /*!< 2251 (UTCDateOnly FIX.5.0SP2) The start date of the date range on which a complex event is effective. The start date will be set equal to the end date for single day events such as Bermuda options. \
 \
The start date must always be less than or equal to end date.*/ \
X(LegComplexEventEndDate,                                                2252) /*!< 2252 (UTCDateOnly FIX.5.0SP2) The end date of the date range on which a complex event is effective. The start date will be set equal to the end date for single day events such as Bermuda options. \
 \
The end date must always be greater than or equal to start date.*/ \
X(NoLegComplexEventTimes,                                                2253) /*!< 2253 (NumInGroup FIX.5.0SP2) Number of complex event times in the repeating group.*/ \
X(NoLegInstrumentParties,                                                2254) /*!< 2254 (NumInGroup FIX.5.0SP2) Number of parties in the repeating group.*/ \
X(LegInstrumentPartyID,                                                  2255) /*!< 2255 (String FIX.5.0SP2) Used to identify party id related to instrument.*/ \
X(LegInstrumentPartyIDSource,                                            2256) /*!< 2256 (char FIX.5.0SP2) Used to identify source of instrument party id.*/ \
X(LegInstrumentPartyRole,                                                2257) /*!< 2257 (int FIX.5.0SP2) Used to identify the role of instrument party id.*/ \
X(NoLegInstrumentPartySubIDs,                                            2258) /*!< 2258 (NumInGroup FIX.5.0SP2) Number of parties sub-IDs in the repeating group.*/ \
X(LegInstrumentPartySubID,                                               2259) /*!< 2259 (String FIX.5.0SP2) PartySubID value within an instrument party repeating group.*/ \
X(LegInstrumentPartySubIDType,                                           2260) /*!< 2260 (int FIX.5.0SP2) Type of LegInstrumentPartySubID (2259) value.*/ \
X(UnderlyingComplexOptPayoutPaySide,                                     2261) /*!< 2261 (int FIX.5.0SP2) Trade side of payout payer.*/ \
X(UnderlyingComplexOptPayoutReceiveSide,                                 2262) /*!< 2262 (int FIX.5.0SP2) Trade side of payout receiver.*/ \
X(UnderlyingComplexOptPayoutUnderlier,                                   2263) /*!< 2263 (String FIX.5.0SP2) Reference to the underlier whose payments are being passed through.*/ \
X(UnderlyingComplexOptPayoutPercentage,                                  2264) /*!< 2264 (Percentage FIX.5.0SP2) Percentage of observed price for calculating the payout associated with the event.*/ \
X(UnderlyingComplexOptPayoutTime,                                        2265) /*!< 2265 (int FIX.5.0SP2) The time when the payout is to occur.*/ \
X(UnderlyingComplexOptPayoutCurrency,                                    2266) /*!< 2266 (Currency FIX.5.0SP2) Specifies the currency of the payout amount. Uses ISO 4217 currency codes.*/ \
X(UnderlyingComplexEventPricePercentage,                                 2267) /*!< 2267 (Percentage FIX.5.0SP2) Specifies the price percentage at which the complex event takes effect. Impact of the event price is determined by the UnderlyingComplexEventType(2046).*/ \
X(UnderlyingComplexEventCurrencyOne,                                     2268) /*!< 2268 (Currency FIX.5.0SP2) Specifies the first or only reference currency of the trade. Uses ISO 4217 currency codes.*/ \
X(UnderlyingComplexEventCurrencyTwo,                                     2269) /*!< 2269 (Currency FIX.5.0SP2) Specifies the second reference currency of the trade. Uses ISO 4217 currency codes.*/ \
X(UnderlyingComplexEventQuoteBasis,                                      2270) /*!< 2270 (int FIX.5.0SP2) Specifies the currency pairing for the quote.  */ \
X(UnderlyingComplexEventFixedFXRate,                                     2271) /*!< 2271 (float FIX.5.0SP2) Specifies the fixed FX rate alternative for FX Quantro options.*/ \
X(UnderlyingComplexEventDeterminationMethod,                             2272) /*!< 2272 (String FIX.5.0SP2) Specifies the method according to which an amount or a date is determined.   \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(UnderlyingComplexEventCalculationAgent,                                2273) /*!< 2273 (int FIX.5.0SP2) Used to identify the calculation agent.*/ \
X(UnderlyingComplexEventStrikePrice,                                     2274) /*!< 2274 (Price FIX.5.0SP2) Upper strike price for Asian option feature. Strike percentage for a Strike Spread.*/ \
X(UnderlyingComplexEventStrikeFactor,                                    2275) /*!< 2275 (float FIX.5.0SP2) Strike factor for Asian option feature. Upper strike percentage for a Strike Spread.*/ \
X(UnderlyingComplexEventStrikeNumberOfOptions,                           2276) /*!< 2276 (int FIX.5.0SP2) Upper string number of options for a Strike Spread.*/ \
X(UnderlyingComplexEventCreditEventsXIDRef,                              2277) /*!< 2277 (XIDREF FIX.5.0SP2) Reference to credit event table elsewhere in the message.*/ \
X(UnderlyingComplexEventCreditEventNotifyingParty,                       2278) /*!< 2278 (int FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring.*/ \
X(UnderlyingComplexEventCreditEventBusinessCenter,                       2279) /*!< 2279 (String FIX.5.0SP2) Specifies the local business center for which the credit event is to be determined. The inclusion of this business center implies that Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions is replaced by the local time of the specified business center.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingComplexEventCreditEventStandardSources,                      2280) /*!< 2280 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', indicates that ISDA defined Standard Public Sources are applicable.*/ \
X(UnderlyingComplexEventCreditEventMinimumSources,                       2281) /*!< 2281 (int FIX.5.0SP2) The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two. */ \
X(UnderlyingComplexEventXID,                                             2282) /*!< 2282 (XID FIX.5.0SP2) Identifier of this complex event for cross referencing elsewhere in the message.*/ \
X(UnderlyingComplexEventXIDRef,                                          2283) /*!< 2283 (XIDREF FIX.5.0SP2) Reference to a complex event elsewhere in the message.*/ \
X(UnderlyingSettlRateIndex,                                              2284) /*!< 2284 (String FIX.5.0SP2) In an outright or forward commodity trade that is cash settled this is the index used to determine the cash payment.*/ \
X(UnderlyingSettlRateIndexLocation,                                      2285) /*!< 2285 (String FIX.5.0SP2) This is an optional qualifying attribute of UnderlyingSettlementRateIndex(2284) such as the delivery zone for an electricity contract.*/ \
X(UnderlyingOptionExpirationDesc,                                        2286) /*!< 2286 (String FIX.5.0SP2) Description of the option expiration.*/ \
X(EncodedUnderlyingOptionExpirationDescLen,                              2287) /*!< 2287 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingOptionExpirationDesc(2288) field.*/ \
X(EncodedUnderlyingOptionExpirationDesc,                                 2288) /*!< 2288 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingOptionExpirationDesc(2286) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingOptionExpirationDesc(2286).*/ \
X(UnderlyingSwapSubClass,                                                2289) /*!< 2289 (String FIX.5.0SP2) The sub-classification or notional schedule type of the swap.*/ \
X(UnderlyingStrikeUnitOfMeasure,                                         2290) /*!< 2290 (String FIX.5.0SP2) Used to express the unit of measure (UOM) of the price if different from the contract.*/ \
X(UnderlyingStrikeIndex,                                                 2291) /*!< 2291 (String FIX.5.0SP2) Specifies the index used to calculate the strike price.*/ \
X(UnderlyingStrikeIndexSpread,                                           2292) /*!< 2292 (PriceOffset FIX.5.0SP2) Specifies the strike price offset from the named index.*/ \
X(UnderlyingValuationSource,                                             2293) /*!< 2293 (String FIX.5.0SP2) Specifies the source of trade valuation data.*/ \
X(UnderlyingValuationReferenceModel,                                     2294) /*!< 2294 (String FIX.5.0SP2) Specifies the methodology and/or assumptions used to generate the  trade value.*/ \
X(UnderlyingStrategyType,                                                2295) /*!< 2295 (String FIX.5.0SP2) Specifies the type of trade strategy.*/ \
X(UnderlyingCommonPricingIndicator,                                      2296) /*!< 2296 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', it indicates that common pricing applies. Common pricing may be relevant for a transaction that references more than one commodity reference price.*/ \
X(UnderlyingSettlDisruptionProvision,                                    2297) /*!< 2297 (int FIX.5.0SP2) Specifies the consequences of settlement disruption events.*/ \
X(UnderlyingInstrumentRoundingDirection,                                 2298) /*!< 2298 (char FIX.5.0SP2) Specifies the rounding direction if not overridden elsewhere.*/ \
X(UnderlyingInstrumentRoundingPrecision,                                 2299) /*!< 2299 (int FIX.5.0SP2) Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(AllocGrossTradeAmt,                                                    2300) /*!< 2300 (Amt FIX.5.0SP2) Total amount traded for this account (i.e. quantity * price) expressed in units of currency. */ \
X(LastQtyChanged,                                                        2301) /*!< 2301 (Qty FIX.5.0SP2) The positive or negative change in quantity when this report is a trade correction or continuation. */ \
X(TradeVersion,                                                          2302) /*!< 2302 (String FIX.5.0SP2) Specifies the version of a trade or contract.  This is used by systems or trading platforms in conjunction with TradeID(1003) to uniquely identify the version of a trade or contract. If used the conditions for a change of version are subject to bilateral agreement. It is recommended to change the version only for significant updates to the business entity rather than for minor changes to trade details or systematic distribution of reports. Examples where the version would change are trade quantity modification, customer account assignment or trade novation.*/ \
X(HistoricalReportIndicator,                                             2303) /*!< 2303 (Boolean FIX.5.0SP2) Indicates that the trade or event being reported occurred in the past and the trade is terminated or no longer active.*/ \
X(NoAssetAttributes,                                                     2304) /*!< 2304 (NumInGroup FIX.5.0SP2) The number of asset attribute entries in the group.*/ \
X(AssetAttributeType,                                                    2305) /*!< 2305 (String FIX.5.0SP2) Specifies the name of the attribute.   \
 \
See http://www.fixtradingcommunity.org/codelists#Asset_Attribute_Types for code list of applicable asset attribute types.*/ \
X(AssetAttributeValue,                                                   2306) /*!< 2306 (String FIX.5.0SP2) Specifies the value of the asset attribute.*/ \
X(AssetAttributeLimit,                                                   2307) /*!< 2307 (String FIX.5.0SP2) Limit or lower acceptable value of the attribute.*/ \
X(NoLegAssetAttributes,                                                  2308) /*!< 2308 (NumInGroup FIX.5.0SP2) Number of asset attribute entries in the group.*/ \
X(LegAssetAttributeType,                                                 2309) /*!< 2309 (String FIX.5.0SP2) Specifies the name of the attribute.   \
 \
See http://www.fixtradingcommunity.org/codelists#Asset_Attribute_Types for code list of applicable asset attribute types.*/ \
X(LegAssetAttributeValue,                                                2310) /*!< 2310 (String FIX.5.0SP2) Specifies the value of the attribute.*/ \
X(LegAssetAttributeLimit,                                                2311) /*!< 2311 (String FIX.5.0SP2) Limit or lower acceptable value of the attribute.*/ \
X(NoUnderlyingAssetAttributes,                                           2312) /*!< 2312 (NumInGroup FIX.5.0SP2) Number of asset attribute entries in the group.*/ \
X(UnderlyingAssetAttributeType,                                          2313) /*!< 2313 (String FIX.5.0SP2) Specifies the name of the attribute.   \
 \
See http://www.fixtradingcommunity.org/codelists#Asset_Attribute_Types for code list of applicable asset attribute types.*/ \
X(UnderlyingAssetAttributeValue,                                         2314) /*!< 2314 (String FIX.5.0SP2) Specifies the value of the attribute.*/ \
X(UnderlyingAssetAttributeLimit,                                         2315) /*!< 2315 (String FIX.5.0SP2) Limit or lower acceptable value of the attribute.*/ \
X(RiskLimitReportStatus,                                                 2316) /*!< 2316 (int FIX.5.0SP2) Status of risk limit report.*/ \
X(RiskLimitReportRejectReason,                                           2317) /*!< 2317 (int FIX.5.0SP2) The reason for rejecting the PartyRiskLimitsReport(35=CM) or PartyRiskLimitsUpdateReport(35=CR).*/ \
X(RiskLimitCheckRequestID,                                               2318) /*!< 2318 (String FIX.5.0SP2) The unique identifier of the PartyRiskLimitCheckRequest(35=DF) message.*/ \
X(RiskLimitCheckID,                                                      2319) /*!< 2319 (String FIX.5.0SP2) The unique and static identifier, at the business entity level, of a risk limit check request.*/ \
X(RiskLimitCheckTransType,                                               2320) /*!< 2320 (int FIX.5.0SP2) Specifies the transaction type of the risk limit check request.*/ \
X(RiskLimitCheckType,                                                    2321) /*!< 2321 (int FIX.5.0SP2) Specifies the type of limit check message.*/ \
X(RiskLimitCheckRequestRefID,                                            2322) /*!< 2322 (int FIX.5.0SP2) Specifies the message reference identifier of the risk limit check request message.*/ \
X(RiskLimitCheckRequestType,                                             2323) /*!< 2323 (int FIX.5.0SP2) Specifies the type of limit amount check being requested.*/ \
X(RiskLimitCheckAmount,                                                  2324) /*!< 2324 (Amt FIX.5.0SP2) Specifies the amount being requested for approval.*/ \
X(RiskLimitCheckRequestStatus,                                           2325) /*!< 2325 (int FIX.5.0SP2) Indicates the status of the risk limit check request.*/ \
X(RiskLimitCheckRequestResult,                                           2326) /*!< 2326 (int FIX.5.0SP2) Result of the credit limit check request.*/ \
X(RiskLimitApprovedAmount,                                               2327) /*!< 2327 (Amt FIX.5.0SP2) The credit/risk limit amount approved.*/ \
X(PartyActionRequestID,                                                  2328) /*!< 2328 (String FIX.5.0SP2) The unique identifier of the PartyActionRequest(35=DH) message.*/ \
X(PartyActionType,                                                       2329) /*!< 2329 (int FIX.5.0SP2) Specifies the type of action to take or was taken for a given party.*/ \
X(ApplTestMessageIndicator,                                              2330) /*!< 2330 (Boolean FIX.5.0SP2) Used to indicate whether the message being sent is to test the receiving application's availability to process the message. When set to "Y" the message is a test message. If not specified, the message is by default not a test message.*/ \
X(PartyActionReportID,                                                   2331) /*!< 2331 (String FIX.5.0SP2) The unique identifier of the PartyActionReport(35=DI) message as assigned by the message sender.*/ \
X(PartyActionResponse,                                                   2332) /*!< 2332 (int FIX.5.0SP2) Specifies the action taken as a result of the PartyActionType(2239) of the PartyActionRequest(35=DH) message.*/ \
X(PartyActionRejectReason,                                               2333) /*!< 2333 (int FIX.5.0SP2) Specifies the reason the PartyActionRequest(35=DH) was rejected.*/ \
X(RefRiskLimitCheckID,                                                   2334) /*!< 2334 (String FIX.5.0SP2) The reference identifier of the PartyRiskLimitCheckRequest(35=DF) message, or a similar out of band message, that contained the approval for the risk/credit limit check request.*/ \
X(RefRiskLimitCheckIDType,                                               2335) /*!< 2335 (int FIX.5.0SP2) Specifies which type of identifier is specified in RefRiskLimitCheckID(2334) field.*/ \
X(RiskLimitVelocityPeriod,                                               2336) /*!< 2336 (int FIX.5.0SP2) The time interval for which the clip size limit applies.  The velocity time unit is expressed in RiskLimitVelocityUnit(2337).*/ \
X(RiskLimitVelocityUnit,                                                 2337) /*!< 2337 (String FIX.5.0SP2) Unit of time in which RiskLimitVelocityPeriod(2336) is expressed.*/ \
X(RequestingPartyRoleQualifier,                                          2338) /*!< 2338 (int FIX.5.0SP2) Qualifies the value of RequestingPartyRole(1660).*/ \
X(RiskLimitCheckModelType,                                               2339) /*!< 2339 (int FIX.5.0SP2) Specifies the type of credit limit check model workflow to apply for the specified party*/ \
X(EventMonthYear,                                                        2340) /*!< 2340 (MonthYear FIX.5.0SP2) Used with derivatives when an event is express as a month-year with optional day or month or week of month. \
 \
Format: \
 \
YYYYMM (e.g. 199903) \
 \
YYYYMMDD (e.g. 20030323) \
 \
YYYYMMwN (e.g. 200303w2) for week \
 \
A specific date can be appended to the month-year. For instance, if multiple event types exist in the same Year and Month, but actually at a different time, a value can be appended, such as "w" or "w2" to indicate week. Likewise, the day of monty (0-31) can be appended to indicate a specific event date.*/ \
X(LegEventMonthYear,                                                     2341) /*!< 2341 (MonthYear FIX.5.0SP2) Used with derivatives when an event is express as a month-year with optional day or month or week of month. \
 \
Format: \
 \
YYYYMM (e.g. 199903) \
 \
YYYYMMDD (e.g. 20030323) \
 \
YYYYMMwN (e.g. 200303w2) for week \
 \
A specific date can be appended to the month-year. For instance, if multiple event types exist in the same Year and Month, but actually at a different time, a value can be appended, such as "w" or "w2" to indicate week. Likewise, the day of monty (0-31) can be appended to indicate a specific event date. */ \
X(UnderlyingEventMonthYear,                                              2342) /*!< 2342 (MonthYear FIX.5.0SP2) Used with derivatives when an event is express as a month-year with optional day or month or week of month. \
 \
Format: \
 \
YYYYMM (e.g. 199903) \
 \
YYYYMMDD (e.g. 20030323) \
 \
YYYYMMwN (e.g. 200303w2) for week \
 \
A specific date can be appended to the month-year. For instance, if multiple event types exist in the same Year and Month, but actually at a different time, a value can be appended, such as "w" or "w2" to indicate week. Likewise, the day of monty (0-31) can be appended to indicate a specific event date.*/ \
X(RiskLimitCheckStatus,                                                  2343) /*!< 2343 (int FIX.5.0SP2) Indicates the status of the risk limit check performed on a trade.*/ \
X(SideRiskLimitCheckStatus,                                              2344) /*!< 2344 (int FIX.5.0SP2) Indicates the status of the risk limit check performed on the side of a trade.*/ \
X(NoEntitlementTypes,                                                    2345) /*!< 2345 (NumInGroup FIX.5.0SP2) Number of entitlement types in the repeating group.*/ \
X(LegMidPx,                                                              2346) /*!< 2346 (Price FIX.5.0SP2) Leg Mid price/rate. \
 \
For OTC swaps, this is the mid-market mark (for example, as defined by CFTC). \
 \
For uncleared OTC swaps, LegMidPx(2346) and the MidPx(631) fields are mutually exclusive.*/ \
X(RegulatoryTransactionType,                                             2347) /*!< 2347 (int FIX.5.0SP2) Specifies the regulatory mandate or rule that the transaction complies with.*/ \
X(LegAssetGroup,                                                         2348) /*!< 2348 (int FIX.5.0SP2) Indicates the broad product or asset classification.  May be used to provide grouping for the product taxonomy (Product(460), SecurityType(167), etc.) and/or the risk taxonomy (AssetClass(1938), AssetSubClass(1939), AssetType(1940), etc.).*/ \
X(PricePrecision,                                                        2349) /*!< 2349 (int FIX.5.0SP2) Specifies the price decimal precision of the instrument.*/ \
X(CollateralPortfolioID,                                                 2350) /*!< 2350 (String FIX.5.0SP2) Identifier of the collateral portfolio when reporting on a portfolio basis.*/ \
X(EncodedComplianceTextLen,                                              2351) /*!< 2351 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedComplianceText(2352) field.*/ \
X(EncodedComplianceText,                                                 2352) /*!< 2352 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the ComplianceText(2404) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the ComplianceText(2404) field.*/ \
X(TradingUnitPeriodMultiplier,                                           2353) /*!< 2353 (int FIX.5.0SP2) Indicates the number of contract periods associated with the minimum trading unit for a given contract duration resulting in the number of total traded contracts.*/ \
X(LegTradingUnitPeriodMultiplier,                                        2354) /*!< 2354 (int FIX.5.0SP2) Indicates the number of contract periods associated with the minimum trading unit for a given contract duration resulting in the number of total traded contracts.*/ \
X(PartyRiskLimitStatus,                                                  2355) /*!< 2355 (int FIX.5.0SP2) The status of risk limits for a party.*/ \
X(RemunerationIndicator,                                                 2356) /*!< 2356 (int FIX.5.0SP2) Indicates whether the trade price was adjusted for compensation (i.e. includes a mark-up, mark-down or commission) in the price paid.*/ \
X(LegTotalTradeQty,                                                      2357) /*!< 2357 (Qty FIX.5.0SP2) Expresses the total quantity traded over the life of the contract when LegLastQty(1418) is to be repeated periodically over the term of the contract. The value is the product of LegLastQty(1418) and LegTradingUnitPeriodMultiplier(2353).*/ \
X(LegLastMultipliedQty,                                                  2358) /*!< 2358 (Qty FIX.5.0SP2) Expresses the quantity bought/sold when LastQty is expressed in contracts. Used in addition to LegLastQty(1418), it is the product of LegLastQty(1418) and LegContractMultiplier(614).*/ \
X(LegTotalGrossTradeAmt,                                                 2359) /*!< 2359 (Amt FIX.5.0SP2) Expresses the full total monetary value of the traded contract. The value is the product of LegLastPx(637) and LegTotalTradeQty(2357) or LegTotalTradeMultipliedQty(2360), if priced in units instead of contracts.*/ \
X(LegTotalTradeMultipliedQty,                                            2360) /*!< 2360 (Qty FIX.5.0SP2) Expresses the total trade quantity in units where LegContractMultiplier(614) is not 1. The value is the product of LegTotalTradeQty(2357) and LegContractMultiplier(614).*/ \
X(CompressionGroupID,                                                    2361) /*!< 2361 (String FIX.5.0SP2) Use to identify a netting or compression group where trades in the group were netted or compressed.  This includes both terminating trades and any remnant trades that result from the operation.*/ \
X(SelfMatchPreventionID,                                                 2362) /*!< 2362 (String FIX.5.0SP2) Identifies an order or trade that should not be matched to an opposite order or trade if both buy and sell orders for the same asset contain the same SelfMatchPreventionID(2362) and submitted by the same firm.*/ \
X(UnderlyingTradingUnitPeriodMultiplier,                                 2363) /*!< 2363 (int FIX.5.0SP2) Indicates the number of contract periods associated with the minimum trading unit for a given contract duration resulting in the number of total traded contracts.*/ \
X(PosReportAction,                                                       2364) /*!< 2364 (int FIX.5.0SP2) Indicates action that triggered the Position Report.*/ \
X(SettlForwardPoints,                                                    2365) /*!< 2365 (PriceOffset FIX.5.0SP2) FX forward points added to SettlPrice(730). The value is expressed in decimal form and may be a negative.*/ \
X(SettlPriceFxRateCalc,                                                  2366) /*!< 2366 (char FIX.5.0SP2) Specifies whether LastPx(31) [TradeCaptureReport] or SettlPrice(730) [PositionReport] should be multiplied or divided.*/ \
X(TotalTradeQty,                                                         2367) /*!< 2367 (Qty FIX.5.0SP2) Expresses the total quantity traded over the life of the contract when LastQty(32) is repeated periodically over the term of the contract. The value is the product of LastQty(32) and TradingUnitPeriodMultiplier(2353).*/ \
X(LastMultipliedQty,                                                     2368) /*!< 2368 (Qty FIX.5.0SP2) Expresses the quantity bought or sold when LastQty(32) is expressed in number of contracts. Used in addition to LastQty(32). It is the product of LastQty(32) and ContractMultiplier(231).*/ \
X(TotalGrossTradeAmt,                                                    2369) /*!< 2369 (Amt FIX.5.0SP2) Expresses the full total monetary value of the traded contract. The value is the product of LastPx(31) and TotalTradeQty(2367) or TotalTradeMultipliedQty(2370), if priced in units instead of contracts.*/ \
X(TotalTradeMultipliedQty,                                               2370) /*!< 2370 (Qty FIX.5.0SP2) Expresses the total trade quantity in units where ContractMultiplier(231) is not 1. The value is the product of TotalTradeQty(2367) and ContractMultiplier(231).*/ \
X(EncodedTradeContinuationText,                                          2371) /*!< 2371 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the TradeContinuationText(2374) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the TradeContinuationText(2374) field.*/ \
X(EncodedTradeContinuationTextLen,                                       2372) /*!< 2372 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedTradeContinuationText(2371) field.*/ \
X(IntraFirmTradeIndicator,                                               2373) /*!< 2373 (Boolean FIX.5.0SP2) Indicates whether the trade or position was entered into as an intra-group transaction, i.e. between two units of the same parent entity having majority ownership interest in both counterparties.*/ \
X(TradeContinuationText,                                                 2374) /*!< 2374 (String FIX.5.0SP2) Elaboration of the purpose or action of the regulatory report when TradeContinuation(1937)=99 (Other).*/ \
X(TaxonomyType,                                                          2375) /*!< 2375 (char FIX.5.0SP2) The type of identification taxonomy used to identify the security.*/ \
X(PartyRoleQualifier,                                                    2376) /*!< 2376 (int FIX.5.0SP2) Used to further qualify the value of PartyRole(452).*/ \
X(DerivativeInstrumentPartyRoleQualifier,                                2377) /*!< 2377 (int FIX.5.0SP2) Used to further qualify the value of DerivativeInstrumentPartyRole(1295).*/ \
X(InstrumentPartyRoleQualifier,                                          2378) /*!< 2378 (int FIX.5.0SP2) Used to further qualify the value of InstrumentPartyRole(1051).*/ \
X(LegInstrumentPartyRoleQualifier,                                       2379) /*!< 2379 (int FIX.5.0SP2) Used to further qualify the value of LegInstrumentPartyRole(2257).*/ \
X(LegProvisionPartyRoleQualifier,                                        2380) /*!< 2380 (int FIX.5.0SP2) Used to further qualify the value of LegProvisionPartyRole(40536).*/ \
X(Nested2PartyRoleQualifier,                                             2381) /*!< 2381 (int FIX.5.0SP2) Used to further qualify the value of Nested2PartyRole(759).*/ \
X(Nested3PartyRoleQualifier,                                             2382) /*!< 2382 (int FIX.5.0SP2) Used to further qualify the value of Nested3PartyRole(951).*/ \
X(Nested4PartyRoleQualifier,                                             2383) /*!< 2383 (int FIX.5.0SP2) Used to further qualify the value of Nested4PartyRole(1417).*/ \
X(NestedPartyRoleQualifier,                                              2384) /*!< 2384 (int FIX.5.0SP2) Used to further qualify the value of NestedPartyRole(538).*/ \
X(ProvisionPartyRoleQualifier,                                           2385) /*!< 2385 (int FIX.5.0SP2) Used to further qualify the value of ProvisionPartyRole(40177).*/ \
X(RequestedPartyRoleQualifier,                                           2386) /*!< 2386 (int FIX.5.0SP2) Used to further qualify the value of RequestedPartyRole(1509).*/ \
X(TradeContingency,                                                      2387) /*!< 2387 (int FIX.5.0SP2) Indicates the contingency attribute for a trade in an asset class that may be contingent on the clearing of a corresponding paired trade (for example Exchange for Physical (EFP), Exchange for Swap (EFS), Exchange for Related (EFR) or Exchange for Option (EFO), collectively called EFRPs). Once the paired trade clears or fails to clear, the related trade (the trade which carries this attribute) ceases to exist.*/ \
X(RootPartyRoleQualifier,                                                2388) /*!< 2388 (int FIX.5.0SP2) Used to further qualify the value of RootPartyRole(1119).*/ \
X(SettlPartyRoleQualifier,                                               2389) /*!< 2389 (int FIX.5.0SP2) Used to further qualify the value of SettlPartyRole(784).*/ \
X(TradeConfirmationReferenceID,                                          2390) /*!< 2390 (String FIX.5.0SP2) A reference or control identifier or number used as a trade confirmation key.*/ \
X(UnderlyingInstrumentPartyRoleQualifier,                                2391) /*!< 2391 (int FIX.5.0SP2) Used to further qualify the value of UnderlyingInstrumentPartyRole(1061).*/ \
X(AllocRefRiskLimitCheckID,                                              2392) /*!< 2392 (String FIX.5.0SP2) The reference identifier to the PartyRiskLimitCheckRequest(35=DF), or a similar out of band message, message that contained the approval or rejection for risk/credit limit check for this allocation.*/ \
X(AllocRefRiskLimitCheckIDType,                                          2393) /*!< 2393 (int FIX.5.0SP2) Specifies which type of identifier is specified in AllocRefRiskLimitCheckID(2392) field.*/ \
X(LimitUtilizationAmt,                                                   2394) /*!< 2394 (Amt FIX.5.0SP2) The total amount of the limit that has been drawn down against the counterparty. This includes the amount for prior trades. It may or may not include the amount for the given trade, specified in LastLimitAmt(1632), depending upon whether the given trade is considered pending. */ \
X(LimitAmt,                                                              2395) /*!< 2395 (Amt FIX.5.0SP2) The limit for the counterparty. This represents the total limit amount, independent of any amount already utilized.*/ \
X(LimitRole,                                                             2396) /*!< 2396 (int FIX.5.0SP2) Indicates the scope of the limit by role.*/ \
X(RegulatoryTradeIDScope,                                                2397) /*!< 2397 (int FIX.5.0SP2) Specifies the scope to which the RegulatoryTradeID(1903) applies.  Used when a trade must be assigned more than one identifier, e.g. one for the clearing member and another for the client on a cleared trade as with the principal model in Europe.*/ \
X(SideRegulatoryTradeIDScope,                                            2398) /*!< 2398 (int FIX.5.0SP2) Specifies the scope to which the SideRegulatoryTradeID(1972) applies.  Used when a trade must be assigned more than one identifier, e.g. one for the clearing member and another for the client on a cleared trade as with the principal model in Europe.*/ \
X(AllocRegulatoryTradeIDScope,                                           2399) /*!< 2399 (int FIX.5.0SP2) Specifies the scope to which the AllocRegulatoryTradeID(1909) applies.  Used when a trade must be assigned more than one identifier, e.g. one for the clearing member and another for the client on a cleared trade as with the principal model in Europe.*/ \
X(EffectiveBusinessDate,                                                 2400) /*!< 2400 (LocalMktDate FIX.5.0SP2) Specifies an explicit business date for associated reference data or transaction. Used when an implicit date is not sufficiently specific.*/ \
X(ListManualOrderIndicator,                                              2401) /*!< 2401 (Boolean FIX.5.0SP2) Indicates if the list of orders was initially received manually (as opposed to electronically) or if it was entered manually (as opposed to entered by automated trading software).*/ \
X(EntitlementSubType,                                                    2402) /*!< 2402 (int FIX.5.0SP2) Subtype of an entitlement specified in EntitlementType(1775).*/ \
X(QuoteModelType,                                                        2403) /*!< 2403 (int FIX.5.0SP2) Quote model type*/ \
X(ComplianceText,                                                        2404) /*!< 2404 (String FIX.5.0SP2) Free text for compliance information required for regulatory reporting.*/ \
X(ExecMethod,                                                            2405) /*!< 2405 (int FIX.5.0SP2) Specifies how the transaction was executed, e.g. via an automated execution platform or other method.*/ \
X(AllocRegulatoryLegRefID,                                               2406) /*!< 2406 (String FIX.5.0SP2) Identifies the leg of the trade the entry applies to by referencing the leg's LegID(1788).*/ \
X(ComplexEventSpotRate,                                                  2407) /*!< 2407 (Price FIX.5.0SP2) FX spot rate.*/ \
X(ComplexEventForwardPoints,                                             2408) /*!< 2408 (PriceOffset FIX.5.0SP2) FX forward points added to spot rate. May be a negative value.*/ \
X(LegComplexEventSpotRate,                                               2409) /*!< 2409 (Price FIX.5.0SP2) FX spot rate.*/ \
X(LegComplexEventForwardPoints,                                          2410) /*!< 2410 (PriceOffset FIX.5.0SP2) FX forward points added to spot rate. May be a negative value.*/ \
X(RegulatoryLegRefID,                                                    2411) /*!< 2411 (String FIX.5.0SP2) Identifies the leg of the trade the entry applies to by referencing the leg's LegID(1788).*/ \
X(RateSourceReferemcePageHeading,                                        2412) /*!< 2412 (String FIX.5.0SP2) Identifies the page heading from the rate source.*/ \
X(RelatedToSecurityID,                                                   2413) /*!< 2413 (String FIX.5.0SP2) The security identifier of the instrument, instrument leg or underlying instrument with which the related instrument has correlation. */ \
X(RelatedToSecurityIDSource,                                             2414) /*!< 2414 (String FIX.5.0SP2) Identifies class or source of the RelatedToSecurityID(2413) value. */ \
X(RelatedToStreamXIDRef,                                                 2415) /*!< 2415 (XIDREF FIX.5.0SP2) StreamXID(41303), LegStreamXID(41700) or UnderlyingStreamXID(42016) of the stream with which the related instrument has correlation.*/ \
X(SideRegulatoryLegRefID,                                                2416) /*!< 2416 (String FIX.5.0SP2) Identifies the leg of the trade the entry applies to by referencing the leg's LegID(1788).*/ \
X(RelatedToDividendPeriodXIDRef,                                         2417) /*!< 2417 (XIDREF FIX.5.0SP2) The DividendPeriodXID(42293) of the stream dividend period with which the related instrument has correlation.*/ \
X(FirmTradeEventID,                                                      2418) /*!< 2418 (String FIX.5.0SP2) An identifier created by the trading party for the life cycle event associated with this report.*/ \
X(UnderlyingComplexEventSpotRate,                                        2419) /*!< 2419 (Price FIX.5.0SP2) FX spot rate.*/ \
X(UnderlyingComplexEventForwardPoints,                                   2420) /*!< 2420 (PriceOffset FIX.5.0SP2) FX forward points added to spot rate. May be a negative value.*/ \
X(FillRefID,                                                             2421) /*!< 2421 (String FIX.5.0SP2) A reference to either the value of the FillExecID(1363) or an implicit position of a fills instance in the FillsGrp component.*/ \
X(OrderRequestID,                                                        2422) /*!< 2422 (int FIX.5.0SP2) Unique message identifier for an order request as assigned by the submitter of the request.*/ \
X(MassOrderRequestID,                                                    2423) /*!< 2423 (String FIX.5.0SP2) Unique message identifier for a mass order request as assigned by the submitter of the orders.*/ \
X(MassOrderReportID,                                                     2424) /*!< 2424 (String FIX.5.0SP2) Unique message identifier for a mass order request as assigned by the receiver of the orders.*/ \
X(MassOrderRequestStatus,                                                2425) /*!< 2425 (int FIX.5.0SP2) Status of mass order request.*/ \
X(MassOrderRequestResult,                                                2426) /*!< 2426 (int FIX.5.0SP2) Request result of mass order request.*/ \
X(OrderResponseLevel,                                                    2427) /*!< 2427 (int FIX.5.0SP2) The level of response requested from receiver of mass order messages. A default value should be bilaterally agreed.*/ \
X(NoOrderEntries,                                                        2428) /*!< 2428 (NumInGroup FIX.5.0SP2) Number of order entries.*/ \
X(OrderEntryAction,                                                      2429) /*!< 2429 (char FIX.5.0SP2) Specifies the action to be taken for the given order.*/ \
X(OrderEntryID,                                                          2430) /*!< 2430 (int FIX.5.0SP2) Unique identifier for an order within a single MassOrder(35=DJ) message that can be used as a reference in the MassOrderAck(35=DK) message.*/ \
X(ExecTypeReason,                                                        2431) /*!< 2431 (int FIX.5.0SP2) The initiating event when an ExecutionReport(35=8) is sent.*/ \
X(TotNoOrderEntries,                                                     2432) /*!< 2432 (int FIX.5.0SP2) Totals number of orders for a mass order or its acknowledgment being fragmented across multiple messages.*/ \
X(NoTargetPartySubIDs,                                                   2433) /*!< 2433 (NumInGroup FIX.5.0SP2) Number of target party sub IDs in the repeating group.*/ \
X(TargetPartySubID,                                                      2434) /*!< 2434 (String FIX.5.0SP2) Party sub-identifier value within a target party repeating group.*/ \
X(TargetPartySubIDType,                                                  2435) /*!< 2435 (int FIX.5.0SP2) Type of TargetPartySubID(2434) value.*/ \
X(TransferInstructionID,                                                 2436) /*!< 2436 (String FIX.5.0SP2) Unique identifier for the transfer instruction assigned by the submitter. */ \
X(TransferID,                                                            2437) /*!< 2437 (String FIX.5.0SP2) The unique identifier assigned to the transfer entity once it is received, for example, by the CCP or the party governing the transfer process.  Generally this same identifier for the transfer is used by all parties involved.*/ \
X(TransferReportID,                                                      2438) /*!< 2438 (String FIX.5.0SP2) Unique identifier for the transfer report message.*/ \
X(TransferTransType,                                                     2439) /*!< 2439 (int FIX.5.0SP2) Indicates the type of transfer transaction.*/ \
X(TransferType,                                                          2440) /*!< 2440 (int FIX.5.0SP2) Indicates the type of transfer request.*/ \
X(TransferScope,                                                         2441) /*!< 2441 (int FIX.5.0SP2) Indicates the type of transfer.*/ \
X(TransferStatus,                                                        2442) /*!< 2442 (int FIX.5.0SP2) Status of the transfer.*/ \
X(TransferRejectReason,                                                  2443) /*!< 2443 (int FIX.5.0SP2) Reason the transfer instruction was rejected.*/ \
X(TransferReportType,                                                    2444) /*!< 2444 (int FIX.5.0SP2) Indicates the type of transfer report.*/ \
X(AggressorTime,                                                         2445) /*!< 2445 (UTCTimestamp FIX.5.0SP2) Timestamp of aggressive order or quote resulting in match event.*/ \
X(AggressorSide,                                                         2446) /*!< 2446 (char FIX.5.0SP2) Side of aggressive order or quote resulting in match event.*/ \
X(FastMarketIndicator,                                                   2447) /*!< 2447 (Boolean FIX.5.0SP2) Indicates if the instrument is in "fast market" state.*/ \
X(LinkageHandlingIndicator,                                              2448) /*!< 2448 (Boolean FIX.5.0SP2) Indicate whether linkage handling is in effect for an instrument or not.*/ \
X(NumberOfBuyOrders,                                                     2449) /*!< 2449 (int FIX.5.0SP2) Number of buy orders involved in a trade.*/ \
X(NumberOfSellOrders,                                                    2450) /*!< 2450 (int FIX.5.0SP2) Number of sell orders involved in a trade.*/ \
X(SettlPriceDeterminationMethod,                                         2451) /*!< 2451 (int FIX.5.0SP2) Calculation method used to determine settlement price.*/ \
X(MDStatisticReqID,                                                      2452) /*!< 2452 (String FIX.5.0SP2) Message identifier for a statistics request.*/ \
X(MDStatisticRptID,                                                      2453) /*!< 2453 (String FIX.5.0SP2) Message identifier for a statistics report.*/ \
X(MDStatisticName,                                                       2454) /*!< 2454 (String FIX.5.0SP2) The short name or acronym for a set of statistic parameters.*/ \
X(MDStatisticDesc,                                                       2455) /*!< 2455 (String FIX.5.0SP2) Can be used to provide an optional textual description for a statistic.*/ \
X(MDStatisticType,                                                       2456) /*!< 2456 (int FIX.5.0SP2) Type of statistic value.*/ \
X(MDStatisticScope,                                                      2457) /*!< 2457 (int FIX.5.0SP2) Entities used as basis for the statistics.*/ \
X(MDStatisticSubScope,                                                   2458) /*!< 2458 (int FIX.5.0SP2) Sub-scope of the statistics to further reduce the entities used as basis for the statistics.*/ \
X(MDStatisticScopeType,                                                  2459) /*!< 2459 (int FIX.5.0SP2) Scope details of the statistics to reduce the number of events being used as basis for the statistics.*/ \
X(MDStatisticFrequencyPeriod,                                            2460) /*!< 2460 (int FIX.5.0SP2) Dissemination frequency of statistics. \
 \
Special meaning for a value of zero which represents  an event-driven dissemination in real time (e.g. as soon as a new trade occurs).*/ \
X(MDStatisticFrequencyUnit,                                              2461) /*!< 2461 (int FIX.5.0SP2) Time unit for MDStatisticFrequencyPeriod(2460).*/ \
X(MDStatisticDelayPeriod,                                                2462) /*!< 2462 (int FIX.5.0SP2) Number of time units between the calculation of the statistic and its dissemination. Can be used to defer or delay publication.*/ \
X(MDStatisticDelayUnit,                                                  2463) /*!< 2463 (int FIX.5.0SP2) Time unit for MDStatisticDelayPeriod(2462).*/ \
X(MDStatisticIntervalType,                                               2464) /*!< 2464 (int FIX.5.0SP2) Type of interval over which statistic is calculated.*/ \
X(MDStatisticIntervalTypeUnit,                                           2465) /*!< 2465 (String FIX.5.0SP2) Time unit for MDStatisticIntervalType(2464).*/ \
X(MDStatisticIntervalPeriod,                                             2466) /*!< 2466 (int FIX.5.0SP2) Length of time over which the statistic is calculated. Special meaning for a value of zero to express that there is no aggregation over time. Can be used with other interval types expressing relative date and time ranges to combine them with sliding window peaks, e.g. highest volume across 1 minute intervals of the previous day.*/ \
X(MDStatisticIntervalUnit,                                               2467) /*!< 2467 (int FIX.5.0SP2) Time unit for MDStatisticIntervalPeriod(2466).*/ \
X(MDStatisticStartDate,                                                  2468) /*!< 2468 (UTCTimestamp FIX.5.0SP2) First day of range for which statistical data is collected.*/ \
X(MDStatisticEndDate,                                                    2469) /*!< 2469 (UTCTimestamp FIX.5.0SP2) Last day of range for which statistical data is collected.*/ \
X(MDStatisticStartTime,                                                  2470) /*!< 2470 (UTCTimeOnly FIX.5.0SP2) Start time of the time range for which statistical data is collected.*/ \
X(MDStatisticEndTime,                                                    2471) /*!< 2471 (UTCTimeOnly FIX.5.0SP2) End time of the time range for which statistical data is collected.*/ \
X(MDStatisticRatioType,                                                  2472) /*!< 2472 (int FIX.5.0SP2) Ratios between various entities.*/ \
X(MDStatisticRequestResult,                                              2473) /*!< 2473 (int FIX.5.0SP2) Result returned in response to MarketDataStatisticsRequest (35=DO).*/ \
X(NoMDStatistics,                                                        2474) /*!< 2474 (NumInGroup FIX.5.0SP2) Number of market data statistics.*/ \
X(MDStatisticID,                                                         2475) /*!< 2475 (String FIX.5.0SP2) Unique identifier for a statistic.*/ \
X(MDStatisticTime,                                                       2476) /*!< 2476 (UTCTimestamp FIX.5.0SP2) Time of calculation of a statistic.*/ \
X(MDStatisticStatus,                                                     2477) /*!< 2477 (int FIX.5.0SP2) Status for a statistic to indicate its availability.*/ \
X(MDStatisticValue,                                                      2478) /*!< 2478 (float FIX.5.0SP2) Statistical value.*/ \
X(MDStatisticValueType,                                                  2479) /*!< 2479 (int FIX.5.0SP2) Type of statistical value.*/ \
X(MDStatisticValueUnit,                                                  2480) /*!< 2480 (int FIX.5.0SP2) Unit of time for statistical value.*/ \
X(EncodedMDStatisticDescLen,                                             2481) /*!< 2481 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedMDStatisticDesc(2482) field.*/ \
X(EncodedMDStatisticDesc,                                                2482) /*!< 2482 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the MDStatisticDesc(2455) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the MDStatisticDesc(2455) field.*/ \
X(AllocRiskLimitCheckStatus,                                             2483) /*!< 2483 (int FIX.5.0SP2) Indicates the status of the risk limit check performed on a trade for this allocation instance.*/ \
X(FirmTransactionID,                                                     2484) /*!< 2484 (String FIX.5.0SP2) The unique transaction entity identifier assigned by the firm.*/ \
X(TransactionID,                                                         2485) /*!< 2485 (String FIX.5.0SP2) The unique transaction entity identifier.*/ \
X(WireReference,                                                         2486) /*!< 2486 (String FIX.5.0SP2) The reference to a wire transfer associated with the transaction. Wire references done via wire services such as Fedwire Output Message Accountabilitty Data "OMAD" or SWIFT Output Sequence Number "OSN".*/ \
X(CollRptRejectReason,                                                   2487) /*!< 2487 (int FIX.5.0SP2) Reject reason code for rejecting the collateral report.*/ \
X(CollRptStatus,                                                         2488) /*!< 2488 (int FIX.5.0SP2) The status of the collateral report.*/ \
X(PackageID,                                                             2489) /*!< 2489 (String FIX.5.0SP2) Identifier assigned to a collection of trades so that they can be analyzed as one atomic unit for risk assessment and clearing.*/ \
X(TradeNumber,                                                           2490) /*!< 2490 (int FIX.5.0SP2) Ordinal number of the trade within a series of related trades.*/ \
X(UnderlyingAssetGroup,                                                  2491) /*!< 2491 (int FIX.5.0SP2) Indicates the broad product or asset classification.  May be used to provide grouping for the product taxonomy (Product(460), SecurityType(167), etc.) and/or the risk taxonomy (AssetClass(1938), AssetSubClass(1939), AssetType(1940), etc.).*/ \
X(LegDifferentialPrice,                                                  2492) /*!< 2492 (PriceOffset FIX.5.0SP2) Used in pricing a group of individual Trade at Settlement (TAS) and Trade At Marker (TAM) contracts as an atomic unit. The value is the negotiated currency offset either at settlement (TAS) or at the time specified in the product definition (TAM). The final contract price is reported in LegLastPx(637).*/ \
X(EncodedLegDocumentationText,                                           2493) /*!< 2493 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegDocumentationText(2505) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the LegDocumentationText(2505) field.*/ \
X(EncodedLegDocumentationTextLen,                                        2494) /*!< 2494 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegDocumentationText(2493) field.*/ \
X(LegAgreementCurrency,                                                  2495) /*!< 2495 (Currency FIX.5.0SP2) Contractual currency forming the basis of a financing agreement and associated transactions. Usually, but not always, the same as the trade currency.*/ \
X(LegAgreementDate,                                                      2496) /*!< 2496 (LocalMktDate FIX.5.0SP2) A reference to the date the underlying agreement specified by LegAgreementID(2498) and LegAgreementDesc(2497) was executed.*/ \
X(LegAgreementDesc,                                                      2497) /*!< 2497 (String FIX.5.0SP2) The full name of the base standard agreement, annexes and amendments in place between the principals applicable to a financing transaction. See http://www.fpml.org/coding-scheme/master-agreement-type for derivative values.*/ \
X(LegAgreementID,                                                        2498) /*!< 2498 (String FIX.5.0SP2) A common reference to the applicable standing agreement between the counterparties to a financing transaction.*/ \
X(LegAgreementVersion,                                                   2499) /*!< 2499 (String FIX.5.0SP2) The version of the master agreement.*/ \
X(LegBrokerConfirmationDesc,                                             2500) /*!< 2500 (String FIX.5.0SP2) Describes the type of broker confirmation executed between the parties. Can be used as an alternative to MasterConfirmationDesc(1962). See http://www.fpml.org/coding-scheme/broker-confirmation-type for values.*/ \
X(LegCreditSupportAgreementDate,                                         2501) /*!< 2501 (LocalMktDate FIX.5.0SP2) The date of the ISDA Credit Support Agreement executed between the parties and intended to govern collateral arrangements for all OTC derivatives transactions between those parties.*/ \
X(LegCreditSupportAgreementDesc,                                         2502) /*!< 2502 (String FIX.5.0SP2) The type of ISDA Credit Support Agreement. See http://www.fpml.org/coding-scheme/credit-support-agreement-type for values.*/ \
X(LegCreditSupportAgreementID,                                           2503) /*!< 2503 (String FIX.5.0SP2) A common reference or unique identifier to identify the ISDA Credit Support Agreement executed between the parties.*/ \
X(LegDeliveryType,                                                       2504) /*!< 2504 (int FIX.5.0SP2) Identifies type of settlement.*/ \
X(LegDocumentationText,                                                  2505) /*!< 2505 (String FIX.5.0SP2) A sentence or phrase pertinent to the trade, not a reference to an external document. E.g. "To be registered with the U.S. Environmental Protection Agency, Acid Rain Division, SO2 Allowance Tracking System".*/ \
X(LegEndDate,                                                            2506) /*!< 2506 (LocalMktDate FIX.5.0SP2) End date of a financing deal, i.e. the date the seller reimburses the buyer and takes back control of the collateral.*/ \
X(LegGoverningLaw,                                                       2507) /*!< 2507 (String FIX.5.0SP2) Identification of the law governing the transaction. See http://www.fpml.org/coding-scheme/governing-law for values.*/ \
X(LegMarginRatio,                                                        2508) /*!< 2508 (Percentage FIX.5.0SP2) The fraction of the cash consideration that must be collateralized, expressed as a percent. A MarginRatio of 2% indicates that the value of the collateral (after deducting for "haircut") must exceed the cash consideration by 2%.*/ \
X(LegMasterConfirmationAnnexDate,                                        2509) /*!< 2509 (LocalMktDate FIX.5.0SP2) The date that an annexation to the master confirmation was executed between the parties.*/ \
X(LegMasterConfirmationDate,                                             2510) /*!< 2510 (LocalMktDate FIX.5.0SP2) Alternative to broker confirmation. The date of the confirmation executed between the parties and intended to govern all relevant transactions between those parties.*/ \
X(LegMasterConfirmationDesc,                                             2511) /*!< 2511 (String FIX.5.0SP2) The type of master confirmation executed between the parties. See http://www.fpml.org/coding-scheme/master-confirmation-type for values.*/ \
X(LegMasterConfirmationAnnexDesc,                                        2512) /*!< 2512 (String FIX.5.0SP2) The type of master confirmation annexation executed between the parties. See http://www.fpml.org/coding-scheme/master-confirmation-annex-type for values.*/ \
X(LegStartDate,                                                          2513) /*!< 2513 (LocalMktDate FIX.5.0SP2) Start date of a financing deal, i.e. the date the buyer pays the seller cash and takes control of the collateral.*/ \
X(LegTerminationType,                                                    2514) /*!< 2514 (int FIX.5.0SP2) Type of financing termination.*/ \
X(AllocCalculatedCcyQty,                                                 2515) /*!< 2515 (Qty FIX.5.0SP2) Used for the calculated quantity of the other side of the currency trade applicable to the allocation instance.*/ \
X(CollateralRequestInstruction,                                          2516) /*!< 2516 (String FIX.5.0SP2) An encoded collateral request processing instruction to the receiver. */ \
X(CollateralRequestLinkID,                                               2517) /*!< 2517 (String FIX.5.0SP2) A unique identifier to link together a set or group of requests.*/ \
X(CollateralRequestNumber,                                               2518) /*!< 2518 (int FIX.5.0SP2) Ordinal number of the request within a set or group of requests.*/ \
X(TotNumCollateralRequests,                                              2519) /*!< 2519 (int FIX.5.0SP2) Total number of request messages within a set or group of requests.*/ \
X(WarningText,                                                           2520) /*!< 2520 (String FIX.5.0SP2) Communicates the underlying condition when the request response indicates "warning".*/ \
X(EncodedWarningText,                                                    2521) /*!< 2521 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the WarningText(2520) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the WarningText(2520) field.*/ \
X(EncodedWarningTextLen,                                                 2522) /*!< 2522 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedWarningtText(2521) field.*/ \
X(CrossedIndicator,                                                      2523) /*!< 2523 (int FIX.5.0SP2) Indicates whether the order or quote was crossed with another order or quote having the same context, e.g. having accounts with a common ownership.*/ \
X(TradeReportingIndicator,                                               2524) /*!< 2524 (int FIX.5.0SP2) Used between parties to convey trade reporting status.*/ \
X(AffiliatedFirmsTradeIndicator,                                         2525) /*!< 2525 (Boolean FIX.5.0SP2) Indicates whether the transaction or position was entered into between two affiliated firms. I.e. one counterparty has an ownership interest in the other counterparty but less than the majority interest. */ \
X(InternationalSwapIndicator,                                            2526) /*!< 2526 (Boolean FIX.5.0SP2) Identifies the swap trade as an "international" transaction.*/ \
X(MultiAssetSwapIndicator,                                               2527) /*!< 2527 (Boolean FIX.5.0SP2) Indicates a swap that does not have one easily identifiable primary underlying asset, but instead involves multiple underlying assets within one trade repository's jurisdiction that belong to different asset classes.*/ \
X(ClearingSettlPrice,                                                    2528) /*!< 2528 (Price FIX.5.0SP2) Clearing settlement price.*/ \
X(NoRelativeValues,                                                      2529) /*!< 2529 (NumInGroup FIX.5.0SP2) Number of relative value metrics entries in the repeating group.*/ \
X(RelativeValueType,                                                     2530) /*!< 2530 (int FIX.5.0SP2) Indicates the type of relative value measurement being specified.*/ \
X(RelativeValue,                                                         2531) /*!< 2531 (float FIX.5.0SP2) The valuation of an instrument relative to a base measurement specified in RelativeValueType(2530). This value can be negative.*/ \
X(RelativeValueSide,                                                     2532) /*!< 2532 (int FIX.5.0SP2) Specifies the side of the relative value.*/ \
X(BidSpread,                                                             2533) /*!< 2533 (float FIX.5.0SP2) Basis points relative to a benchmark curve on the bid side, such as LIBOR, or a known security, such as 10Y US Treasury bond. The benchmark security or curve name is specified in the SpreadOrBenchmarkCurveData component.*/ \
X(OfferSpread,                                                           2534) /*!< 2534 (float FIX.5.0SP2) Basis points relative to a benchmark curve on the offer side, such as LIBOR, or a known security, such as 10Y US Treasury bond. The benchmark security or curve name is specified in the SpreadOrBenchmarkCurveData component.*/ \
X(MDReportEvent,                                                         2535) /*!< 2535 (int FIX.5.0SP2) Technical event within market data feed.*/ \
X(MDReportCount,                                                         2536) /*!< 2536 (int FIX.5.0SP2) Number of reference and market data messages in-between two MarketDataReport(35=DR) messages.*/ \
X(TotNoMarketSegmentReports,                                             2537) /*!< 2537 (int FIX.5.0SP2) Total number of reports related to market segments.*/ \
X(TotNoInstrumentReports,                                                2538) /*!< 2538 (int FIX.5.0SP2) Total number of reports related to instruments.*/ \
X(TotNoPartyDetailReports,                                               2539) /*!< 2539 (int FIX.5.0SP2) Total number of reports related to party detail information.*/ \
X(TotNoEntitlementReports,                                               2540) /*!< 2540 (int FIX.5.0SP2) Total number of reports related to party entitlement information.*/ \
X(TotNoRiskLimitReports,                                                 2541) /*!< 2541 (int FIX.5.0SP2) Total number of reports related to party risk limit information.*/ \
X(MarketSegmentStatus,                                                   2542) /*!< 2542 (int FIX.5.0SP2) Status of market segment.*/ \
X(MarketSegmentType,                                                     2543) /*!< 2543 (int FIX.5.0SP2) Used to classify the type of market segment.*/ \
X(MarketSegmentSubType,                                                  2544) /*!< 2544 (int FIX.5.0SP2) Used to further categorize market segments within a MarketSegmentType(2543).*/ \
X(NoRelatedMarketSegments,                                               2545) /*!< 2545 (NumInGroup FIX.5.0SP2) Number of related market segments.*/ \
X(RelatedMarketSegmentID,                                                2546) /*!< 2546 (String FIX.5.0SP2) Identifies a related market segment.*/ \
X(MarketSegmentRelationship,                                             2547) /*!< 2547 (int FIX.5.0SP2) Type of relationship between two or more market segments.*/ \
X(NoAuctionTypeRules,                                                    2548) /*!< 2548 (NumInGroup FIX.5.0SP2) Number of auction order types.*/ \
X(AuctionTypeProductComplex,                                             2549) /*!< 2549 (String FIX.5.0SP2) Identifies an entire suite of products for which the auction order type rule applies. */ \
X(NoPriceRangeRules,                                                     2550) /*!< 2550 (NumInGroup FIX.5.0SP2) Number of rules related to price ranges.*/ \
X(StartPriceRange,                                                       2551) /*!< 2551 (Price FIX.5.0SP2) Lower boundary for price range.*/ \
X(EndPriceRange,                                                         2552) /*!< 2552 (Price FIX.5.0SP2) Upper boundary for price range.*/ \
X(PriceRangeValue,                                                       2553) /*!< 2553 (Price FIX.5.0SP2) Maximum range expressed as absolute value.*/ \
X(PriceRangePercentage,                                                  2554) /*!< 2554 (Percentage FIX.5.0SP2) Maximum range expressed as percentage.*/ \
X(PriceRangeProductComplex,                                              2555) /*!< 2555 (String FIX.5.0SP2) Identifies an entire suite of products in the context of trading rules related to price ranges.*/ \
X(PriceRangeRuleID,                                                      2556) /*!< 2556 (String FIX.5.0SP2) Identifier for a price range rule.*/ \
X(FastMarketPercentage,                                                  2557) /*!< 2557 (Percentage FIX.5.0SP2) The percentage factor to be applied to trading rule parameters (e.g. price ranges, size ranges, etc.) when fast market conditions are applicable.*/ \
X(NoQuoteSizeRules,                                                      2558) /*!< 2558 (NumInGroup FIX.5.0SP2) Number of rules related to quote sizes.*/ \
X(QuoteSideIndicator,                                                    2559) /*!< 2559 (Boolean FIX.5.0SP2) Indicates whether single sided quotes are allowed.*/ \
X(NoFlexProductEligibilities,                                            2560) /*!< 2560 (NumInGroup FIX.5.0SP2) Number of eligibility indicators for the creation of flexible securities.*/ \
X(FlexProductEligibilityComplex,                                         2561) /*!< 2561 (String FIX.5.0SP2) Identifies an entire suite of products which are eligible for the creation of flexible securities.*/ \
X(NumOfComplexInstruments,                                               2562) /*!< 2562 (int FIX.5.0SP2) Represents the total number of multileg securities or user defined securities that make up the security.*/ \
X(MarketDepthTimeInterval,                                               2563) /*!< 2563 (int FIX.5.0SP2) Specifies the time interval used for netting market data in a price depth feed.*/ \
X(MarketDepthTimeIntervalUnit,                                           2564) /*!< 2564 (int FIX.5.0SP2) The time unit associated with the time interval of the netting of market data in a price depth feed.*/ \
X(MDRecoveryTimeInterval,                                                2565) /*!< 2565 (int FIX.5.0SP2) Specifies the time interval between two repetitions of the same market data for cyclic recovery feeds.*/ \
X(MDRecoveryTimeIntervalUnit,                                            2566) /*!< 2566 (int FIX.5.0SP2) The time unit associated with the time interval between two cycles of the same market data in cyclic data recovery feeds.*/ \
X(PrimaryServiceLocationID,                                              2567) /*!< 2567 (String FIX.5.0SP2) Primary service location identifier.*/ \
X(SecondaryServiceLocationID,                                            2568) /*!< 2568 (String FIX.5.0SP2) Secondary or alternate service location identifier.*/ \
X(MatchRuleProductComplex,                                               2569) /*!< 2569 (String FIX.5.0SP2) Identifies an entire suite of products for which the matching rule applies.*/ \
X(CustomerPriority,                                                      2570) /*!< 2570 (int FIX.5.0SP2) Specifies the kind of priority given to customers.*/ \
X(TickRuleProductComplex,                                                2571) /*!< 2571 (String FIX.5.0SP2) Identifies an entire suite of products for which the price tick rule applies.*/ \
X(PreviousAdjustedOpenInterest,                                          2572) /*!< 2572 (Amt FIX.5.0SP2) Previous day's adjusted open interest.*/ \
X(PreviousUnadjustedOpenInterest,                                        2573) /*!< 2573 (Amt FIX.5.0SP2) Previous day's unadjusted open interest.*/ \
X(LowExercisePriceOptionIndicator,                                       2574) /*!< 2574 (Boolean FIX.5.0SP2) Indicates if a given option instrument permits low exercise prices (LEPO).*/ \
X(BlockTradeEligibilityIndicator,                                        2575) /*!< 2575 (Boolean FIX.5.0SP2) Indicates if a given instrument is eligible for block trading.*/ \
X(InstrumentPricePrecision,                                              2576) /*!< 2576 (int FIX.5.0SP2) Specifies the number of decimal places for instrument prices.*/ \
X(StrikePricePrecision,                                                  2577) /*!< 2577 (int FIX.5.0SP2) Specifies the number of decimal places for exercise price.*/ \
X(OrigStrikePrice,                                                       2578) /*!< 2578 (Price FIX.5.0SP2) Original exercise price, e.g. after corporate action requiring changes.*/ \
X(SettlSubMethod,                                                        2579) /*!< 2579 (int FIX.5.0SP2) Specifies a suitable settlement sub-method for a given settlement method.*/ \
X(NoClearingPriceParameters,                                             2580) /*!< 2580 (NumInGroup FIX.5.0SP2) Number of parameter sets for clearing prices.*/ \
X(BusinessDayType,                                                       2581) /*!< 2581 (int FIX.5.0SP2) Relative identification of a business day.*/ \
X(ClearingPriceOffset,                                                   2582) /*!< 2582 (PriceOffset FIX.5.0SP2) Constant value required for the calculation of the clearing price, e.g. for variance futures.*/ \
X(VegaMultiplier,                                                        2583) /*!< 2583 (float FIX.5.0SP2) Constant value required for the calculation of the clearing quantity, e.g. for variance futures.*/ \
X(AnnualTradingBusinessDays,                                             2584) /*!< 2584 (int FIX.5.0SP2) Number of trading business days in a year.*/ \
X(TotalTradingBusinessDays,                                              2585) /*!< 2585 (int FIX.5.0SP2) Number of trading business days over the lifetime of an instrument.*/ \
X(TradingBusinessDays,                                                   2586) /*!< 2586 (int FIX.5.0SP2) Number of actual trading business days of an instrument.*/ \
X(RealizedVariance,                                                      2587) /*!< 2587 (float FIX.5.0SP2) Actual or realized variance of an instrument used to calculate settlement prices, e.g. for variance futures.*/ \
X(StandardVariance,                                                      2588) /*!< 2588 (float FIX.5.0SP2) Standard variance (over the lifetime of an instrument) or initial variance used to calculate settlement prices, e.g. for variance futures.*/ \
X(RelatedClosePrice,                                                     2589) /*!< 2589 (Price FIX.5.0SP2) Closing price of the underlying required to calculate the RealizedVariance(2587).*/ \
X(OvernightInterestRate,                                                 2590) /*!< 2590 (float FIX.5.0SP2) Overnight interest rate.*/ \
X(AccumulatedReturnModifiedVariationMargin,                              2591) /*!< 2591 (float FIX.5.0SP2) The economic cost of the variation margin from one trading day to the next.*/ \
X(CalculationMethod,                                                     2592) /*!< 2592 (int FIX.5.0SP2) Specifies how the calculation will be made.*/ \
X(NoOrderAttributes,                                                     2593) /*!< 2593 (NumInGroup FIX.5.0SP2) Number of order attribute entries.*/ \
X(OrderAttributeType,                                                    2594) /*!< 2594 (int FIX.5.0SP2) The type of order attribute.*/ \
X(OrderAttributeValue,                                                   2595) /*!< 2595 (String FIX.5.0SP2) The value associated with the order attribute type specified in OrderAttributeType(2594).*/ \
X(DeltaCrossed,                                                          2596) /*!< 2596 (Boolean FIX.5.0SP2) Indicates that the party has taken a position on both a put and a call on the same underlying asset.*/ \
X(ComplexEventFuturesPriceValuation,                                     2597) /*!< 2597 (Boolean FIX.5.0SP2) Indicates whether the official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions. Applicable only to futures contracts.*/ \
X(ComplexEventOptionsPriceValuation,                                     2598) /*!< 2598 (Boolean FIX.5.0SP2) Indicates whether the official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions. Applicable only to options contracts.*/ \
X(ComplexEventPVFinalPriceElectionFallback,                              2599) /*!< 2599 (int FIX.5.0SP2) Specifies the fallback provisions for the hedging party in the determination of the final settlement price.*/ \
X(StrikeIndexCurvePoint,                                                 2600) /*!< 2600 (String FIX.5.0SP2) The point on the floating rate index curve. Sample values: \
 \
M = combination of a number between 1-12 and an "M" for month, e.g. 3M \
 \
Y = combination of number between 1-100 and a "Y" for year, e.g. 10Y \
 \
10Y-OLD = see above, then add "-OLD" when appropriate \
 \
INTERPOLATED = the point is mathematically derived \
 \
2/2031 5 3/8 = the point is stated via a combination of maturity month / year and coupon.*/ \
X(StrikeIndexQuote,                                                      2601) /*!< 2601 (int FIX.5.0SP2) The quote side from which the index price is to be determined.*/ \
X(ExtraordinaryEventAdjustmentMethod,                                    2602) /*!< 2602 (int FIX.5.0SP2) Defines how adjustments will be made to the contract should one or more of the extraordinary events occur.*/ \
X(ExchangeLookAlike,                                                     2603) /*!< 2603 (Boolean FIX.5.0SP2) For a share option trade, indicates whether the instrument is to be treated as an 'exchange look-alike'. */ \
X(LegStrikeIndexCurvePoint,                                              2604) /*!< 2604 (String FIX.5.0SP2) The point on the floating rate index curve. Sample values: \
 \
M = combination of a number between 1-12 and an "M" for month, e.g. 3M \
 \
Y = combination of number between 1-100 and a "Y" for year, e.g. 10Y \
 \
10Y-OLD = see above, then add "-OLD" when appropriate \
 \
INTERPOLATED = the point is mathematically derived \
 \
2/2031 5 3/8 = the point is stated via a combination of maturity month / year and coupon.*/ \
X(LegStrikeIndexQuote,                                                   2605) /*!< 2605 (int FIX.5.0SP2) The quote side from which the index price is to be determined.*/ \
X(LegExtraordinaryEventAdjustmentMethod,                                 2606) /*!< 2606 (int FIX.5.0SP2) Defines how adjustments will be made to the contract should one or more of the extraordinary events occur.*/ \
X(LegExchangeLookAlike,                                                  2607) /*!< 2607 (Boolean FIX.5.0SP2) For a share option trade, indicates whether the instrument is to be treated as an 'exchange look-alike'. */ \
X(LegComplexEventFuturesPriceValuation,                                  2608) /*!< 2608 (Boolean FIX.5.0SP2) Indicates whether the official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions. Applicable only to futures contracts.*/ \
X(LegComplexEventOptionsPriceValuation,                                  2609) /*!< 2609 (Boolean FIX.5.0SP2) Indicates whether the official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions. Applicable only to options contracts.*/ \
X(LegComplexEventPVFinalPriceElectionFallback,                           2610) /*!< 2610 (int FIX.5.0SP2) Specifies the fallback provisions for the hedging party in the determination of the final settlement price*/ \
X(UnderlyingComplexEventFuturesPriceValuation,                           2611) /*!< 2611 (Boolean FIX.5.0SP2) Indicates whether the official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions. Applicable only to futures contracts.*/ \
X(UnderlyingComplexEventOptionsPriceValuation,                           2612) /*!< 2612 (Boolean FIX.5.0SP2) Indicates whether the official settlement price as announced by the related exchange is applicable, in accordance with the ISDA 2002 definitions. Applicable only to options contracts.*/ \
X(UnderlyingComplexEventPVFinalPriceElectionFallback,                    2613) /*!< 2613 (int FIX.5.0SP2) Specifies the fallback provisions for the hedging party in the determination of the final settlement price*/ \
X(UnderlyingNotional,                                                    2614) /*!< 2614 (Amt FIX.5.0SP2) Notional value for the equity or bond underlier.*/ \
X(UnderlyingNotionalCurrency,                                            2615) /*!< 2615 (Currency FIX.5.0SP2) Specifies the currency denomination of the notional value. Uses ISO 4217 currency codes.*/ \
X(UnderlyingNotionalDeterminationMethod,                                 2616) /*!< 2616 (String FIX.5.0SP2) Specifies the method of determining the notional amount.  \
 \
See: http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(UnderlyingNotionalAdjustments,                                         2617) /*!< 2617 (int FIX.5.0SP2) Specifies the conditions that govern the adjustment to the number of units of the return swap.*/ \
X(PositionID,                                                            2618) /*!< 2618 (String FIX.5.0SP2) Unique identifier for a position entity. Refer to PosMaintRptID(721) for a unique identifier of a position report message.*/ \
X(UnderlyingNotionalXIDRef,                                              2619) /*!< 2619 (XIDREF FIX.5.0SP2) Cross reference to another notional amount for duplicating its properties.*/ \
X(UnderlyingFutureID,                                                    2620) /*!< 2620 (String FIX.5.0SP2) In the case of an index underlier specifies the unique identifier for the referenced futures contract.*/ \
X(UnderlyingFutureIDSource,                                              2621) /*!< 2621 (String FIX.5.0SP2) Identifies the source of the UnderlyingFutureID(2620).*/ \
X(UnderlyingStrikeIndexCurvePoint,                                       2622) /*!< 2622 (String FIX.5.0SP2) The point on the floating rate index curve. Sample values: \
 \
M = combination of a number between 1-12 and an "M" for month, e.g. 3M \
 \
Y = combination of number between 1-100 and a "Y" for year, e.g. 10Y \
 \
10Y-OLD = see above, then add "-OLD" when appropriate \
 \
INTERPOLATED = the point is mathematically derived \
 \
2/2031 5 3/8 = the point is stated via a combination of maturity month / year and coupon.*/ \
X(UnderlyingStrikeIndexQuote,                                            2623) /*!< 2623 (int FIX.5.0SP2) The quote side from which the index price is to be determined.*/ \
X(UnderlyingExtraordinaryEventAdjustmentMethod,                          2624) /*!< 2624 (int FIX.5.0SP2) Defines how adjustments will be made to the contract should one or more of the extraordinary events occur.*/ \
X(UnderlyingExchangeLookAlike,                                           2625) /*!< 2625 (Boolean FIX.5.0SP2) For a share option trade, indicates whether the instrument is to be treated as an 'exchange look-alike'. */ \
X(UnderlyingAverageVolumeLimitationPercentage,                           2626) /*!< 2626 (Amt FIX.5.0SP2) The limit of average percentage of individual securities traded in a day or a number of days.*/ \
X(UnderlyingAverageVolumeLimitationPeriodDays,                           2627) /*!< 2627 (int FIX.5.0SP2) Specifies the limitation period for average daily trading volume in number of days.*/ \
X(UnderlyingDepositoryReceiptIndicator,                                  2628) /*!< 2628 (Boolean FIX.5.0SP2) Indicates whether the underlier is a depository receipt.*/ \
X(UnderlyingOpenUnits,                                                   2629) /*!< 2629 (Qty FIX.5.0SP2) The number of units (units of the index or number of securities, par amount of a bond) that constitute the underlier. In the case of a basket swap, this is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.*/ \
X(UnderlyingBasketDivisor,                                               2630) /*!< 2630 (float FIX.5.0SP2) Specifies the basket divisor amount. This value is normally used to adjust the constituent weight for pricing or to adjust for dividends, or other corporate actions.*/ \
X(UnderlyingInstrumentXID,                                               2631) /*!< 2631 (XID FIX.5.0SP2) Identifier for referencing this UnderlyingInstrument from a parent instrument or a convertible instrument.*/ \
X(CollateralAmountType,                                                  2632) /*!< 2632 (int FIX.5.0SP2) The type of value in CurrentCollateralAmount(1704).*/ \
X(NoMiscFeeSubTypes,                                                     2633) /*!< 2633 (NumInGroup FIX.5.0SP2) Specifies the number of miscellaneous fee sub-types.*/ \
X(MiscFeeSubType,                                                        2634) /*!< 2634 (String FIX.5.0SP2) Used to provide more granular fee types related to a value of MiscFeeType(139). \
 \
See http://www.fixtradingcommunity.org/codelists#Misc_Fee_Sub_Types for code list of applicable fees. Other fee sub-types may be used by mutual agreement of the counterparties.*/ \
X(MiscFeeSubTypeAmt,                                                     2635) /*!< 2635 (Amt FIX.5.0SP2) The amount of the specified MiscFeeSubType(2634).*/ \
X(MiscFeeSubTypeDesc,                                                    2636) /*!< 2636 (String FIX.5.0SP2) Can be used to provide an optional textual description of the fee sub-type.*/ \
X(EncodedMiscFeeSubTypeDescLen,                                          2637) /*!< 2637 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedMiscFeeSubTypeDesc(2638) field.*/ \
X(EncodedMiscFeeSubTypeDesc,                                             2638) /*!< 2638 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the MiscFeeSubTypeDesc(2636) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the MiscFeeSubTypeDesc(2636) field.*/ \
X(NoCommissions,                                                         2639) /*!< 2639 (NumInGroup FIX.5.0SP2) Number of commissions in the repeating group.*/ \
X(CommissionAmount,                                                      2640) /*!< 2640 (Amt FIX.5.0SP2) The commission amount.*/ \
X(CommissionAmountType,                                                  2641) /*!< 2641 (int FIX.5.0SP2) Indicates what type of commission is being expressed in CommissionAmount(2640).*/ \
X(CommissionBasis,                                                       2642) /*!< 2642 (char FIX.5.0SP2) Specifies the basis or unit used to calculate the commission.*/ \
X(CommissionCurrency,                                                    2643) /*!< 2643 (Currency FIX.5.0SP2) Specifies the currency denomination of the commission amount if different from the trade's currency. Uses ISO 4217 currency codes.*/ \
X(CommissionUnitOfMeasure,                                               2644) /*!< 2644 (String FIX.5.0SP2) The commission rate unit of measure.*/ \
X(CommissionUnitOfMeasureCurrency,                                       2645) /*!< 2645 (Currency FIX.5.0SP2) Indicates the currency of the unit of measure. Conditionally required when CommissionUnitOfMeasure(2644) = Ccy (Amount of currency).*/ \
X(CommissionRate,                                                        2646) /*!< 2646 (float FIX.5.0SP2) The commission rate when CommissionAmount(2640) is based on a percentage of quantity, amount per unit or a factor of "unit of measure". If the rate is a percentage or expressed in basis points, use the decimalized form, e.g. "0.05" for a 5% commission or "0.005" for 50 basis points.*/ \
X(CommissionSharedIndicator,                                             2647) /*!< 2647 (Boolean FIX.5.0SP2) Indicates whether the amount in CommissionAmount(2640) is to be shared with a third party, e.g. as part of a directed brokerage commission sharing arrangement.*/ \
X(CommissionAmountShared,                                                2648) /*!< 2648 (Amt FIX.5.0SP2) Commission amount to be shared with a third party, e.g. as part of a directed brokerage commission sharing arrangement. If specified, this amount should not exceed the amount in CommissionAmount(2640).*/ \
X(CommissionLegRefID,                                                    2649) /*!< 2649 (String FIX.5.0SP2) Identifies the leg of the trade the entry applies to by referencing the leg's LegID(1788).*/ \
X(CommissionDesc,                                                        2650) /*!< 2650 (String FIX.5.0SP2) Description of the commission.*/ \
X(EncodedCommissionDescLen,                                              2651) /*!< 2651 (Length FIX.5.0SP2) Byte length of the encoded (non-ASCII characters) EncodedCommissionDesc(2652) field.*/ \
X(EncodedCommissionDesc,                                                 2652) /*!< 2652 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the CommissionDesc(2650) field in the encoded format specified via the MessageEncoding(347) field.  If used, the ASCII (English) representation should also be specified in the CommissionDesc(2650) field.*/ \
X(NoAllocCommissions,                                                    2653) /*!< 2653 (NumInGroup FIX.5.0SP2) Number of commissions in the repeating group.*/ \
X(AllocCommissionAmount,                                                 2654) /*!< 2654 (Amt FIX.5.0SP2) The commission amount.*/ \
X(AllocCommissionAmountType,                                             2655) /*!< 2655 (int FIX.5.0SP2) Indicates what type of commission is being expressed in AllocCommissionAmount(2654).*/ \
X(AllocCommissionBasis,                                                  2656) /*!< 2656 (char FIX.5.0SP2) Specifies the basis or unit used to calculate the commission.*/ \
X(AllocCommissionCurrency,                                               2657) /*!< 2657 (Currency FIX.5.0SP2) Specifies the currency denomination of the commission amount if different from the trade's currency. Uses ISO 4217 currency codes.*/ \
X(AllocCommissionUnitOfMeasure,                                          2658) /*!< 2658 (String FIX.5.0SP2) The commission rate unit of measure.*/ \
X(AllocCommissionUnitOfMeasureCurrency,                                  2659) /*!< 2659 (Currency FIX.5.0SP2) Indicates the currency of the unit of measure. Conditionally required when AllocCommissionUnitOfMeasure(2658) = Ccy (Currency).*/ \
X(AllocCommissionRate,                                                   2660) /*!< 2660 (float FIX.5.0SP2) The commission rate when AllocCommissionAmount(2654) is based on a percentage of quantity, amount per unit or a factor of "unit of measure". If the rate is a percentage or expressed in basis points, use the decimalized form, e.g. "0.05" for a 5% commission or "0.005" for 50 basis points.*/ \
X(AllocCommissionSharedIndicator,                                        2661) /*!< 2661 (Boolean FIX.5.0SP2) Indicates whether the amount in AllocCommissionAmount(2654) is to be shared with a third party, e.g. as part of a directed brokerage commission sharing arrangement.*/ \
X(AllocCommissionAmountShared,                                           2662) /*!< 2662 (Amt FIX.5.0SP2) Commission amount to be shared with a third party, e.g. as part of a directed brokerage commission sharing arrangement. If specified, this amount should not exceed the amount in AllocCommissionAmount(2654).*/ \
X(AllocCommissionLegRefID,                                               2663) /*!< 2663 (String FIX.5.0SP2) Identifies the leg of the trade the entry applies to by referencing the leg's LegID(1788).*/ \
X(AllocCommissionDesc,                                                   2664) /*!< 2664 (String FIX.5.0SP2) Description of the commission.*/ \
X(EncodedAllocCommissionDescLen,                                         2665) /*!< 2665 (Length FIX.5.0SP2) Byte length of the encoded (non-ASCII characters) EncodedAllocCommissionDesc(2666) field.*/ \
X(EncodedAllocCommissionDesc,                                            2666) /*!< 2666 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the AllocCommissionDesc(2664) field in the encoded format specified via the MessageEncoding(347) field.  If used, the ASCII (English) representation should also be specified in the AllocCommissionDesc(2664) field.*/ \
X(AlgorithmicTradeIndicator,                                             2667) /*!< 2667 (int FIX.5.0SP2) Indicates that the order or trade originates from a computer program or algorithm requiring little-to-no human intervention. */ \
X(NoTrdRegPublications,                                                  2668) /*!< 2668 (NumInGroup FIX.5.0SP2) Number of regulatory publication rules in repeating group.*/ \
X(TrdRegPublicationType,                                                 2669) /*!< 2669 (int FIX.5.0SP2) Specifies the type of regulatory trade publication. \
 \
Additional reasons for the publication type may be specified in TrdRegPublicationReason(2670).*/ \
X(TrdRegPublicationReason,                                               2670) /*!< 2670 (int FIX.5.0SP2) Additional reason for trade publication type specified in TrdRegPublicationType(2669). \
 \
Reasons may be specific to regulatory trade publication rules. \
 \
*/ \
X(SideTradeReportingIndicator,                                           2671) /*!< 2671 (int FIX.5.0SP2) Used between parties to convey trade reporting status.*/ \
X(CrossRequestID,                                                        2672) /*!< 2672 (String FIX.5.0SP2) Unique message identifier for a cross request as assigned by the submitter of the request.*/ \
X(FillMatchID,                                                           2673) /*!< 2673 (String FIX.5.0SP2) Identifier assigned by a matching system to a match event containing multiple executions.*/ \
X(FillMatchSubID,                                                        2674) /*!< 2674 (String FIX.5.0SP2) Identifier assigned by a matching system to a price level (e.g. match step, clip) within a match event containing multiple executions.*/ \
X(MassActionReason,                                                      2675) /*!< 2675 (int FIX.5.0SP2) Reason for submission of mass action.*/ \
X(MaximumPricePercentage,                                                2676) /*!< 2676 (Percentage FIX.5.0SP2) Maximum deviation, in percentage terms, of an execution price from a reference price, e.g. the initial price of a match event.*/ \
X(NotAffectedReason,                                                     2677) /*!< 2677 (int FIX.5.0SP2) Reason for order being unaffected by mass action even though it belongs to the orders covered by MassActionScope(1374).*/ \
X(TotalNotAffectedOrders,                                                2678) /*!< 2678 (int FIX.5.0SP2) Total number of orders unaffected by either the OrderMassActionRequest(35=CA) or OrderMassCancelRequest(35=Q).*/ \
X(OrderOwnershipIndicator,                                               2679) /*!< 2679 (int FIX.5.0SP2) Change of ownership of an order to a specific party.*/ \
X(LegAccount,                                                            2680) /*!< 2680 (String FIX.5.0SP2) Account mnemonic as agreed between buy and sell sides, e.g. broker and institution or investor/intermediary and fund manager.*/ \
X(InTheMoneyCondition,                                                   2681) /*!< 2681 (int FIX.5.0SP2) Specifies an option instrument's "in the money" condition.*/ \
X(LegInTheMoneyCondition,                                                2682) /*!< 2682 (int FIX.5.0SP2) Specifies an option instrument's "in the money" condition in general terms.*/ \
X(UnderlyingInTheMoneyCondition,                                         2683) /*!< 2683 (int FIX.5.0SP2) Specifies an option instrument's "in the money" condition in general terms.*/ \
X(DerivativeInTheMoneyCondition,                                         2684) /*!< 2684 (int FIX.5.0SP2) Specifies an option instrument's "in the money" condition in general terms.*/ \
X(ContraryInstructionEligibilityIndicator,                               2685) /*!< 2685 (Boolean FIX.5.0SP2) Identifies whether the option instrument is eligible for contrary instructions at the time of exercise.  The contrariness of an instruction will be determined in the context of InTheMoneyCondition(2681).  When not specified, the eligibility is undefined or not applicable.*/ \
X(LegContraryInstructionEligibilityIndicator,                            2686) /*!< 2686 (Boolean FIX.5.0SP2) Identifies whether the option instrument is eligible for contrary instructions at the time of exercise.  The contrariness of an instruction will be determined in the context of LegInTheMoneyCondition(2682).  When not specified, the eligibility is undefined or not applicable.*/ \
X(UnderlyingContraryInstructionEligibilityIndicator,                     2687) /*!< 2687 (Boolean FIX.5.0SP2) 	Identifies whether the option instrument is eligible for contrary instructions at the time of exercise.  The contrariness of an instruction will be determined in the context of UnderlyingInTheMoneyCondition(2683).  When not specified, the eligibility is undefined or not applicable.*/ \
X(DerivativeContraryInstructionEligibilityIndicator,                     2688) /*!< 2688 (Boolean FIX.5.0SP2) Identifies whether the option instrument is eligible for contrary instructions at the time of exercise.  The contrariness of an instruction will be determined in the context of DerivativeInTheMoneyCondition(2684).  When not specified, the eligibility is undefined or not applicable.*/ \
X(CollateralMarketPrice,                                                 2689) /*!< 2689 (Price FIX.5.0SP2) Market price of the collateral, either from market sources or pre-agreed by the counterparties.*/ \
X(CollateralPercentOverage,                                              2690) /*!< 2690 (Percentage FIX.5.0SP2) Percentage of over-collateralization particularly when CollateralAmountType(2632) = 4 (Additional collateral value)*/ \
X(NoSideCollateralAmounts,                                               2691) /*!< 2691 (NumInGroup FIX.5.0SP2) Number of side collateral amount entries.*/ \
X(SideCollateralAmountMarketID,                                          2692) /*!< 2692 (String FIX.5.0SP2) Market associated with the collateral amount.*/ \
X(SideCollateralAmountMarketSegmentID,                                   2693) /*!< 2693 (String FIX.5.0SP2) Market segment associated with the collateral amount.*/ \
X(SideCollateralAmountType,                                              2694) /*!< 2694 (int FIX.5.0SP2) The type of value in CurrentCollateralAmount(1704).*/ \
X(SideCollateralCurrency,                                                2695) /*!< 2695 (Currency FIX.5.0SP2) Specifies the currency of the collateral; optional, defaults to the settlement currency if not specified. Uses ISO 4217 Currency Code.*/ \
X(SideCollateralFXRate,                                                  2696) /*!< 2696 (float FIX.5.0SP2) Foreign exchange rate used to compute the SideCurrentCollateralAmount(2702) from the SideCollateralCurrency(2695) and the Currency(15).*/ \
X(SideCollateralFXRateCalc,                                              2697) /*!< 2697 (char FIX.5.0SP2) Specifies whether or not SideCollateralFXRate(2696) should be multiplied or divided.*/ \
X(SideCollateralMarketPrice,                                             2698) /*!< 2698 (Price FIX.5.0SP2) Market price of the collateral, either from market sources or pre-agreed by the counterparties.*/ \
X(SideCollateralPercentOverage,                                          2699) /*!< 2699 (Percentage FIX.5.0SP2) Percentage of over-collateralization particularly when SideCollateralAmountType(2694) = 4 (Additional collateral value).*/ \
X(SideCollateralPortfolioID,                                             2700) /*!< 2700 (String FIX.5.0SP2) Identifier of the collateral portfolio when reporting on a portfolio basis.*/ \
X(SideCollateralType,                                                    2701) /*!< 2701 (String FIX.5.0SP2) Type of collateral on deposit being reported.*/ \
X(SideCurrentCollateralAmount,                                           2702) /*!< 2702 (Amt FIX.5.0SP2) Currency value currently attributed to the collateral.*/ \
X(SideHaircutIndicator,                                                  2703) /*!< 2703 (Boolean FIX.5.0SP2) Indicates, if "Y", that a stated valuation includes a haircut, e.g. that the stated value reflects the subtraction of the haircut. Note that a value of "N" does not imply a haircut is not applicable, only that the haircut (if any) is not reflected in the stated valuation.*/ \
X(ExDestinationType,                                                     2704) /*!< 2704 (int FIX.5.0SP2) Identifies the type of execution destination for the order.*/ \
X(MarketCondition,                                                       2705) /*!< 2705 (int FIX.5.0SP2) Market condition. In the context of ESMA RTS 8 it is important that trading venues communicate the condition of the market, particularly "stressed" and "exceptional", in order to provide incentives for firms contributing to liquidity.*/ \
X(NoQuoteAttributes,                                                     2706) /*!< 2706 (NumInGroup FIX.5.0SP2) Number of quote attributes entries.*/ \
X(QuoteAttributeType,                                                    2707) /*!< 2707 (int FIX.5.0SP2) The type of attribute for the quote.*/ \
X(QuoteAttributeValue,                                                   2708) /*!< 2708 (String FIX.5.0SP2) The value associated with the quote attribute type specified in QuoteAttributeType(2707).*/ \
X(NoPriceQualifiers,                                                     2709) /*!< 2709 (NumInGroup FIX.5.0SP2) Number of price qualifiers in the repeating group.*/ \
X(PriceQualifier,                                                        2710) /*!< 2710 (int FIX.5.0SP2) Qualifier for price.  May be used when the price needs to be explicitly qualified. */ \
X(MDValueTier,                                                           2711) /*!< 2711 (int FIX.5.0SP2) Describes the reporting ranges for executed transactions.*/ \
X(MiscFeeQualifier,                                                      2712) /*!< 2712 (int FIX.5.0SP2) Identifies whether the current entry contributes to the trade or transaction economics, i.e. affects NetMoney(118).	*/ \
X(MiscFeeDesc,                                                           2713) /*!< 2713 (String FIX.5.0SP2) Can be used to provide a textual description of the fee type.*/ \
X(FinancialInstrumentFullName,                                           2714) /*!< 2714 (String FIX.5.0SP2) The full normative name of the financial instrument.*/ \
X(EncodedFinancialInstrumentFullNameLen,                                 2715) /*!< 2715 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedFinancialInstrumentFullName(2716) field.*/ \
X(EncodedFinancialInstrumentFullName,                                    2716) /*!< 2716 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the FinancialInstrumentFullName(2714) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the FinancialInstrumentFullName(2714) field.*/ \
X(LegFinancialInstrumentFullName,                                        2717) /*!< 2717 (String FIX.5.0SP2) The full normative name of the multileg's financial instrument.*/ \
X(EncodedLegFinancialInstrumentFullNameLen,                              2718) /*!< 2718 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) individual multileg instrument's EncodedLegFinancialInstrumentFullName(2719).*/ \
X(EncodedLegFinancialInstrumentFullName,                                 2719) /*!< 2719 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegFinancialInstrumentFullName(2717) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the LegFinancialInstrumentFullName(2717) field.*/ \
X(UnderlyingFinancialInstrumentFullName,                                 2720) /*!< 2720 (String FIX.5.0SP2) The full normative name of the underlying financial instrument.*/ \
X(EncodedUnderlyingFinancialInstrumentFullNameLen,                       2721) /*!< 2721 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) underlying instrument's EncodedUnderlyingFinancialInstrumentFullName(2722).*/ \
X(EncodedUnderlyingFinancialInstrumentFullName,                          2722) /*!< 2722 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingFinancialInstrumentFullName(2720) field in the encoded format specified via the MessageEncoding(347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingFinancialInstrumentFullName(2720) field.*/ \
X(UnderlyingIndexCurveUnit,                                              2723) /*!< 2723 (String FIX.5.0SP2) Curve time unit associated with the underlying index. \
 \
 \
 \
 \
 \
*/ \
X(UnderlyingIndexCurvePeriod,                                            2724) /*!< 2724 (int FIX.5.0SP2) Curve time multiplier for the underlying index.*/ \
X(CommissionAmountSubType,                                               2725) /*!< 2725 (int FIX.5.0SP2) Further sub classification of the CommissionAmountType(2641).*/ \
X(AllocCommissionAmountSubType,                                          2726) /*!< 2726 (int FIX.5.0SP2) Further sub classification of the AllocCommissionAmountType(2655).*/ \
X(AllocLegRefID,                                                         2727) /*!< 2727 (String FIX.5.0SP2) Unique identifier for a specific leg (uniqueness not defined as part of the FIX specification). AllocLegRefID(2727tbd) references the value from LegID(1788) in the current multileg order or trade message specifying to which leg the allocation instance applies.*/ \
X(FloatingRateIndexCurvePeriod,                                          2728) /*!< 2728 (int FIX.5.0SP2) Time unit multiplier for the floating rate index identified in FloatingRateIndexID(2731).*/ \
X(FloatingRateIndexCurveSpread,                                          2729) /*!< 2729 (PriceOffset FIX.5.0SP2) Spread from the floating rate index.*/ \
X(FloatingRateIndexCurveUnit,                                            2730) /*!< 2730 (String FIX.5.0SP2) Time unit associated with the floating rate index identified in FloatingRateIndexID(2731).*/ \
X(FloatingRateIndexID,                                                   2731) /*!< 2731 (String FIX.5.0SP2) Security identifier of the floating rate index.*/ \
X(FloatingRateIndexIDSource,                                             2732) /*!< 2732 (String FIX.5.0SP2) Source for the floating rate index identified in FloatingRateIndexID(2731).*/ \
X(IndexRollMonth,                                                        2733) /*!< 2733 (String FIX.5.0SP2) Month identified in the index roll.*/ \
X(NoIndexRollMonths,                                                     2734) /*!< 2734 (NumInGroup FIX.5.0SP2) Number of instances of the index roll month.*/ \
X(AssetSubType,                                                          2735) /*!< 2735 (String FIX.5.0SP2) Used to provide a more specific description of the asset specified in AssetType(1940).  \
 \
See https://www.fixtrading.org/codelists/AssetSubType for code list of applicable values. \
 \
*/ \
X(CommodityFinalPriceType,                                               2736) /*!< 2736 (int FIX.5.0SP2) Final price type of the commodity as specified by the trading venue. \
 \
*/ \
X(FinancialInstrumentShortName,                                          2737) /*!< 2737 (String FIX.5.0SP2) Short name of the financial instrument. Uses ISO 18774 (FINS) values. */ \
X(NextIndexRollDate,                                                     2738) /*!< 2738 (LocalMktDate FIX.5.0SP2) Next index roll date.*/ \
X(LegAssetSubType,                                                       2739) /*!< 2739 (String FIX.5.0SP2) Used to provide a more specific description of the asset specified in LegAssetType(2069).  \
 \
See https://www.fixtrading.org/codelists/AssetSubType for code list of applicable values.  \
 \
*/ \
X(LegFinancialInstrumentShortName,                                       2740) /*!< 2740 (String FIX.5.0SP2) Short name of the financial instrument. Uses ISO 18774 (FISN) values.*/ \
X(SecondaryAssetSubType,                                                 2741) /*!< 2741 (String FIX.5.0SP2) Used to provide a more specific description of the asset specified in SecondaryAssetType(1979).  \
 \
See https://www.fixtrading.org/codelists/AssetSubType for code list of applicable values.*/ \
X(UnderlyingFinancialInstrumentShortName,                                2742) /*!< 2742 (String FIX.5.0SP2) Short name of the financial instrument. Uses ISO 18774 (FINS) values.*/ \
X(LegSecondaryAssetSubType,                                              2743) /*!< 2743 (String FIX.5.0SP2) Used to provide a more specific description of the asset specified in LegSecondaryAssetType(2079).  \
 \
See https://www.fixtrading.org/codelists/AssetSubType for code list of applicable values. \
 \
*/ \
X(UnderlyingAssetSubType,                                                2744) /*!< 2744 (String FIX.5.0SP2) Used to provide a more specific description of the asset specified in UnderlyingAssetType(2015).  \
 \
See https://www.fixtrading.org/codelists/AssetSubType for code list of applicable values.*/ \
X(UnderlyingSecondaryAssetSubType,                                       2745) /*!< 2745 (String FIX.5.0SP2) May be used to provide a more specific description of the asset specified in UnderlyingSecondaryAssetType(2083).  \
 \
See https://www.fixtrading.org/codelists/AssetSubType for code list of applicable values.*/ \
X(NoReferenceDataDates,                                                  2746) /*!< 2746 (NumInGroup FIX.5.0SP2) Number of instances of reference data dates.*/ \
X(ReferenceDataDate,                                                     2747) /*!< 2747 (UTCTimestamp FIX.5.0SP2) Reference data entry's date-time of the type specified in ReferenceDataDateType(2748).*/ \
X(ReferenceDataDateType,                                                 2748) /*!< 2748 (int FIX.5.0SP2) Reference data entry's date-time type.*/ \
X(ExecutionTimestamp,                                                    2749) /*!< 2749 (UTCTimestamp FIX.5.0SP2) Time of the individual execution.*/ \
X(ReportingPx,                                                           2750) /*!< 2750 (Price FIX.5.0SP2) Represents the reportable price on fill when an instance of the Parties component with PartyRole(452) = 73 (Execution Venue) is present to prevent having to compute running totals.*/ \
X(ReportingQty,                                                          2751) /*!< 2751 (Qty FIX.5.0SP2) Represents the reportable quantity on fill when an instance of the Parties component with PartyRole(452) = 73 (Execution Venue) is present to prevent having to compute running totals.*/ \
X(DeliveryRouteOrCharter,                                                2752) /*!< 2752 (String FIX.5.0SP2) Specific delivery route or time charter average. Applicable to commodity freight contracts.*/ \
X(ReturnTrigger,                                                         2753) /*!< 2753 (int FIX.5.0SP2) Indicates the type of return or payout trigger for the swap or forward.*/ \
X(LegDeliveryRouteOrCharter,                                             2754) /*!< 2754 (String FIX.5.0SP2) Specific delivery route or time charter average. Applicable to commodity freight contracts.*/ \
X(LegReturnTrigger,                                                      2755) /*!< 2755 (int FIX.5.0SP2) Indicates the type of return or payout trigger for the swap or forward.*/ \
X(UnderlyingDeliveryRouteOrCharter,                                      2756) /*!< 2756 (String FIX.5.0SP2) Specific delivery route or time charter average. Applicable to commodity freight contracts.*/ \
X(UnderlyingReturnTrigger,                                               2757) /*!< 2757 (int FIX.5.0SP2) Indicates the type of return or payout trigger for the swap or forward.*/ \
X(AllocRequestID,                                                        2758) /*!< 2758 (String FIX.5.0SP2) Unique identifier for the request message.*/ \
X(GroupAmount,                                                           2759) /*!< 2759 (Amt FIX.5.0SP2) Indicates the total notional units or amount of an allocation group.  Includes any allocated units or amount.*/ \
X(GroupRemainingAmount,                                                  2760) /*!< 2760 (Amt FIX.5.0SP2) Indicates the remaining notional units or amount of an allocation group that has not yet been allocated.*/ \
X(AllocGroupAmount,                                                      2761) /*!< 2761 (Amt FIX.5.0SP2) Indicates the notional units or amount being allocated.*/ \
X(PriceMarkup,                                                           2762) /*!< 2762 (PriceOffset FIX.5.0SP2) Price offset of the markup denominated in the price type of the trade.*/ \
X(AveragePriceType,                                                      2763) /*!< 2763 (int FIX.5.0SP2) The average pricing model used for block trades.*/ \
X(AveragePriceStartTime,                                                 2764) /*!< 2764 (UTCTimestamp FIX.5.0SP2) Start of the time period during which price averaging occurred.*/ \
X(AveragePriceEndTime,                                                   2765) /*!< 2765 (UTCTimestamp FIX.5.0SP2) End of the time period during which price averaging occurred.*/ \
X(OrderPercentOfTotalVolume,                                             2766) /*!< 2766 (Percentage FIX.5.0SP2) For Percent-of-volume (POV) average pricing this is the target percentage this order quantity represents of the total trading volume of an instrument during the specified time period. This provides the data needed to ensure that the average price is fair based on the total sum of grouped POV trades. */ \
X(AllocGroupStatus,                                                      2767) /*!< 2767 (int FIX.5.0SP2) Status of the trade give-up relative to the group identified in AllocGroupID(1730).*/ \
X(NoAdditionalTermBondRefs,                                              40000) /*!< 40000 (NumInGroup FIX.5.0SP2) Number of bonds in the repeating group.*/ \
X(AdditionalTermBondSecurityID,                                          40001) /*!< 40001 (String FIX.5.0SP2) Security identifier of the bond.  */ \
X(AdditionalTermBondSecurityIDSource,                                    40002) /*!< 40002 (String FIX.5.0SP2) Identifies the source scheme of the AdditionalTermBondSecurityID(40001) value.  */ \
X(AdditionalTermBondDesc,                                                40003) /*!< 40003 (String FIX.5.0SP2) Description of the bond.*/ \
X(EncodedAdditionalTermBondDescLen,                                      40004) /*!< 40004 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedAdditionalTermBondDesc(40005) field.*/ \
X(EncodedAdditionalTermBondDesc,                                         40005) /*!< 40005 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the AdditionalTermBondDesc(40003) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the AdditionalTermBondDesc(40003) field.*/ \
X(AdditionalTermBondCurrency,                                            40006) /*!< 40006 (Currency FIX.5.0SP2) Specifies the currency the bond value is denominated in.  Uses ISO 4217 currency codes.*/ \
X(AdditionalTermBondIssuer,                                              40007) /*!< 40007 (String FIX.5.0SP2) Issuer of the bond.*/ \
X(EncodedAdditionalTermBondIssuerLen,                                    40008) /*!< 40008 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedAdditionalTermBondIssuer(40009) field.*/ \
X(EncodedAdditionalTermBondIssuer,                                       40009) /*!< 40009 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the AdditionalTermBondIssuer(40007) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the AdditionalTermBondIssuer(40007) field.*/ \
X(AdditionalTermBondSeniority,                                           40010) /*!< 40010 (String FIX.5.0SP2) Specifies the bond's payment priority in the event of a default.*/ \
X(AdditionalTermBondCouponType,                                          40011) /*!< 40011 (int FIX.5.0SP2) Coupon type of the bond.*/ \
X(AdditionalTermBondCouponRate,                                          40012) /*!< 40012 (Percentage FIX.5.0SP2) Coupon rate of the bond.  See also CouponRate(223).*/ \
X(AdditionalTermBondMaturityDate,                                        40013) /*!< 40013 (LocalMktDate FIX.5.0SP2) The maturity date of the bond.*/ \
X(AdditionalTermBondParValue,                                            40014) /*!< 40014 (Amt FIX.5.0SP2) The par value of the bond.*/ \
X(AdditionalTermBondCurrentTotalIssuedAmount,                            40015) /*!< 40015 (Amt FIX.5.0SP2) Total issued amount of the bond.*/ \
X(AdditionalTermBondCouponFrequencyPeriod,                               40016) /*!< 40016 (int FIX.5.0SP2) Time unit multiplier for the frequency of the bond's coupon payment. 			*/ \
X(AdditionalTermBondCouponFrequencyUnit,                                 40017) /*!< 40017 (String FIX.5.0SP2) Time unit associated with the frequency of the bond's coupon payment. */ \
X(AdditionalTermBondDayCount,                                            40018) /*!< 40018 (int FIX.5.0SP2) The day count convention used in interest calculations for a bond or an interest bearing security.*/ \
X(NoAdditionalTerms,                                                     40019) /*!< 40019 (NumInGroup FIX.5.0SP2) Number of additional terms in the repeating group.*/ \
X(AdditionalTermConditionPrecedentBondIndicator,                         40020) /*!< 40020 (Boolean FIX.5.0SP2) Indicates whether the condition precedent bond is applicable. The swap contract is only valid if the bond is issued and if there is any dispute over the terms of fixed stream then the bond terms would be used.*/ \
X(AdditionalTermDiscrepancyClauseIndicator,                              40021) /*!< 40021 (Boolean FIX.5.0SP2) Indicates whether the discrepancy clause is applicable.*/ \
X(NoCashSettlTerms,                                                      40022) /*!< 40022 (NumInGroup FIX.5.0SP2) Number of elements in the repeating group.*/ \
X(CashSettlCurrency,                                                     40023) /*!< 40023 (Currency FIX.5.0SP2) Specifies the currency the CashSettlAmount(40034) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(CashSettlValuationFirstBusinessDayOffset,                              40024) /*!< 40024 (int FIX.5.0SP2) The number of business days after settlement conditions have been satisfied, when the calculation agent is to obtain a price quotation on the reference obligation for the purpose of cash settlement.*/ \
X(CashSettlValuationTime,                                                40025) /*!< 40025 (LocalMktTime FIX.5.0SP2) The time of valuation.*/ \
X(CashSettlBusinessCenter,                                               40026) /*!< 40026 (String FIX.5.0SP2) Identifies the business center calendar used at valuation time for cash settlement purposes e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(CashSettlQuoteMethod,                                                  40027) /*!< 40027 (int FIX.5.0SP2) The type of quote used to determine the cash settlement price.*/ \
X(CashSettlQuoteAmount,                                                  40028) /*!< 40028 (Amt FIX.5.0SP2) When determining the cash settlement amount, if weighted average price quotes are to be obtained for the reference obligation, this is the upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained. If not specifed, the ISDA definitions provide for a fallback amount equal to floating rate payer calculation amount.*/ \
X(CashSettlQuoteCurrency,                                                40029) /*!< 40029 (Currency FIX.5.0SP2) Specifies the currency the CashSettlQuoteAmount(40028) is denominated in.  Uses ISO 4217 Currency Code.*/ \
X(CashSettlMinimumQuoteAmount,                                           40030) /*!< 40030 (Amt FIX.5.0SP2) When determining the cash settlement amount, if weighted average price quotes are to be obtained for the reference obligation, this is the minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained.  If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD1,000,000 (or its equivalent in the relevent obligation currency) or the (minimum) quoted amount.*/ \
X(CashSettlMinimumQuoteCurrency,                                         40031) /*!< 40031 (Currency FIX.5.0SP2) Specifies the currency the CashSettlMinimumQuoteAmount(40030) is denominated in.  Uses ISO 4217 Currency Code.*/ \
X(CashSettlDealer,                                                       40032) /*!< 40032 (String FIX.5.0SP2) Identifies the dealer from whom price quotations for the reference obligation are obtained for the purpose of cash settlement valuation calculation.*/ \
X(CashSettlBusinessDays,                                                 40033) /*!< 40033 (int FIX.5.0SP2) The number of business days used in the determination of the cash settlement payment date. */ \
X(CashSettlAmount,                                                       40034) /*!< 40034 (Amt FIX.5.0SP2) The amount paid between the trade parties, seller to the buyer, for cash settlement on the cash settlement date.*/ \
X(CashSettlRecoveryFactor,                                               40035) /*!< 40035 (float FIX.5.0SP2) Used for fixed recovery, this specifies the recovery level as determined at contract inception, to be applied in the event of a default. The factor is used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date. The amount calculated is (1 - CashSettlRecoveryFactor(40035)) x floating rate payer calculation amount. The currency is derived from the floating rate payer calculation amount.*/ \
X(CashSettlFixedTermIndicator,                                           40036) /*!< 40036 (Boolean FIX.5.0SP2) Indicates whether fixed settlement is applicable or not applicable in a recovery lock.*/ \
X(CashSettlAccruedInterestIndicator,                                     40037) /*!< 40037 (Boolean FIX.5.0SP2) Indicates whether accrued interest is included or not in the value provided in CashSettlAmount(40034).  For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest.  \
 \
For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. */ \
X(CashSettlValuationMethod,                                              40038) /*!< 40038 (int FIX.5.0SP2) The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement.*/ \
X(CashSettlTermXID,                                                      40039) /*!< 40039 (XID FIX.5.0SP2) A named string value referenced by UnderlyingSettlTermXIDRef(41315). */ \
X(NoContractualDefinitions,                                              40040) /*!< 40040 (NumInGroup FIX.5.0SP2) Number of financing definitions in the repeating group.*/ \
X(ContractualDefinition,                                                 40041) /*!< 40041 (String FIX.5.0SP2) Specifies which contract definition, such as those published by ISDA, will apply for the terms of the trade. See http://www.fpml.org/coding-scheme/contractual-definitions for values.*/ \
X(NoContractualMatrices,                                                 40042) /*!< 40042 (NumInGroup FIX.5.0SP2) Number of contractual matrices in the repeating group.*/ \
X(ContractualMatrixSource,                                               40043) /*!< 40043 (String FIX.5.0SP2) Identifies the applicable contract matrix. See http://www.fpml.org/coding-scheme/matrix-type-1-0.xml for values.*/ \
X(ContractualMatrixDate,                                                 40044) /*!< 40044 (LocalMktDate FIX.5.0SP2) The publication date of the applicable version of the contract matrix. If not specified, the ISDA Standard Terms Supplement defines rules for which version of the matrix is applicable.*/ \
X(ContractualMatrixTerm,                                                 40045) /*!< 40045 (String FIX.5.0SP2) Specifies the applicable key into the relevent contract matrix.  In the case of 2000 ISDA Definitions Settlement Matrix for Early Termination and Swaptions, the ContractualMatrixTerm(40045) is not applicable and is to be omitted. See http://www.fpml.org/coding-scheme/credit-matrix-transaction-type for values.*/ \
X(NoFinancingTermSupplements,                                            40046) /*!< 40046 (NumInGroup FIX.5.0SP2) Number of financing terms supplements in the repeating group.*/ \
X(FinancingTermSupplementDesc,                                           40047) /*!< 40047 (String FIX.5.0SP2) Identifies the applicable contractual supplement. See http://www.fpml.org/coding-scheme/contractual-supplement for values.*/ \
X(FinancingTermSupplementDate,                                           40048) /*!< 40048 (LocalMktDate FIX.5.0SP2) The publication date of the applicable version of the contractual supplement.*/ \
X(NoStreams,                                                             40049) /*!< 40049 (NumInGroup FIX.5.0SP2) Number of swap streams in the repeating group.*/ \
X(StreamType,                                                            40050) /*!< 40050 (int FIX.5.0SP2) Type of swap stream.*/ \
X(StreamDesc,                                                            40051) /*!< 40051 (String FIX.5.0SP2) A short descriptive name given to the payment stream. Eg. CDS, Fixed, Float, Float2, GBP. The description has no intrinsic meaning but should be arbitrarily chosen by the remitter as reference.*/ \
X(StreamPaySide,                                                         40052) /*!< 40052 (int FIX.5.0SP2) The side of the party paying the stream.*/ \
X(StreamReceiveSide,                                                     40053) /*!< 40053 (int FIX.5.0SP2) The side of the party receiving the stream.*/ \
X(StreamNotional,                                                        40054) /*!< 40054 (Amt FIX.5.0SP2) Notional, or initial notional value for the payment stream. Use the PaymentScheduleGrp component to specify the rate steps. */ \
X(StreamCurrency,                                                        40055) /*!< 40055 (Currency FIX.5.0SP2) Specifies the currency the StreamNotional(40054) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(StreamText,                                                            40056) /*!< 40056 (String FIX.5.0SP2) Free form text to specify additional information or enumeration description when a standard value does not apply.*/ \
X(UnderlyingStreamEffectiveDateUnadjusted,                               40057) /*!< 40057 (LocalMktDate FIX.5.0SP2) The unadjusted effective date. */ \
X(UnderlyingStreamEffectiveDateBusinessDayConvention,                    40058) /*!< 40058 (int FIX.5.0SP2) The business day convention used to adjust the underlying instrument's stream's effective, or relative effective, date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingStreamEffectiveDateBusinessCenter,                           40059) /*!< 40059 (String FIX.5.0SP2) The business center calendar used to adjust the underlying instrument's stream's effective, or relative effective, date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(UnderlyingStreamEffectiveDateRelativeTo,                               40060) /*!< 40060 (int FIX.5.0SP2) Specifies the anchor date when the effective date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingStreamEffectiveDateOffsetPeriod,                             40061) /*!< 40061 (int FIX.5.0SP2) Time unit multiplier for the relative effective date offset.*/ \
X(UnderlyingStreamEffectiveDateOffsetUnit,                               40062) /*!< 40062 (String FIX.5.0SP2) Time unit associated with the relative effective date offset.*/ \
X(UnderlyingStreamEffectiveDateOffsetDayType,                            40063) /*!< 40063 (int FIX.5.0SP2) Specifies the day type of the relative effective date offset.*/ \
X(UnderlyingStreamEffectiveDateAdjusted,                                 40064) /*!< 40064 (LocalMktDate FIX.5.0SP2) The adjusted effective date. */ \
X(StreamTerminationDateUnadjusted,                                       40065) /*!< 40065 (LocalMktDate FIX.5.0SP2) The unadjusted termination date.*/ \
X(StreamTerminationDateBusinessDayConvention,                            40066) /*!< 40066 (int FIX.5.0SP2) The business day convention used to adjust the instrument's stream's termination, or relative termination, date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(StreamTerminationDateBusinessCenter,                                   40067) /*!< 40067 (String FIX.5.0SP2) The business center calendar used to adjust the instrument's stream's termination, or relative termination, date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(StreamTerminationDateRelativeTo,                                       40068) /*!< 40068 (int FIX.5.0SP2) Specifies the anchor date when the termination date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(StreamTerminationDateOffsetPeriod,                                     40069) /*!< 40069 (int FIX.5.0SP2) Time unit multiplier for the relative termination date offset.*/ \
X(StreamTerminationDateOffsetUnit,                                       40070) /*!< 40070 (String FIX.5.0SP2) Time unit associated with the relative termination date offset.*/ \
X(StreamTerminationDateOffsetDayType,                                    40071) /*!< 40071 (int FIX.5.0SP2) Specifies the day type of the relative termination date offset.*/ \
X(StreamTerminationDateAdjusted,                                         40072) /*!< 40072 (LocalMktDate FIX.5.0SP2) The adjusted termination date.*/ \
X(StreamCalculationPeriodBusinessDayConvention,                          40073) /*!< 40073 (int FIX.5.0SP2) The business day convention used to adjust calculation periods. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(StreamCalculationPeriodBusinessCenter,                                 40074) /*!< 40074 (String FIX.5.0SP2) The business center calendar used to adjust calculation periods, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(StreamFirstPeriodStartDateUnadjusted,                                  40075) /*!< 40075 (LocalMktDate FIX.5.0SP2) The unadjusted first calculation period start date if before the effective date.*/ \
X(StreamFirstPeriodStartDateBusinessDayConvention,                       40076) /*!< 40076 (int FIX.5.0SP2) The business day convention used to adjust the instrument's stream's first calculation period start date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(StreamFirstPeriodStartDateBusinessCenter,                              40077) /*!< 40077 (String FIX.5.0SP2) The business center calendar used to adjust the instrument's stream's first calculation period start date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(StreamFirstPeriodStartDateAdjusted,                                    40078) /*!< 40078 (LocalMktDate FIX.5.0SP2) The adjusted first calculation period start date, if it is before the effective date.*/ \
X(StreamFirstRegularPeriodStartDateUnadjusted,                           40079) /*!< 40079 (LocalMktDate FIX.5.0SP2) The unadjusted first start date of the regular calculation period, if there is an initial stub period.*/ \
X(StreamFirstCompoundingPeriodEndDateUnadjusted,                         40080) /*!< 40080 (LocalMktDate FIX.5.0SP2) The unadjusted end date of the initial compounding period.*/ \
X(StreamLastRegularPeriodEndDateUnadjusted,                              40081) /*!< 40081 (LocalMktDate FIX.5.0SP2) The unadjusted last regular period end date if there is a final stub period.*/ \
X(StreamCalculationFrequencyPeriod,                                      40082) /*!< 40082 (int FIX.5.0SP2) Time unit multiplier for the frequency at which calculation period end dates occur.*/ \
X(StreamCalculationFrequencyUnit,                                        40083) /*!< 40083 (String FIX.5.0SP2) Time unit associated with the frequency at which calculation period end dates occur.*/ \
X(StreamCalculationRollConvention,                                       40084) /*!< 40084 (String FIX.5.0SP2) The convention for determining the sequence of end dates. It is used in conjunction with a specified frequency. Used only to override the roll convention specified in the DateAdjustment component within the Instrument component.*/ \
X(NoSettlRateFallbacks,                                                  40085) /*!< 40085 (NumInGroup FIX.5.0SP2) Number of settlement rate fallbacks in the repeating group*/ \
X(SettlRatePostponementMaximumDays,                                      40086) /*!< 40086 (int FIX.5.0SP2) The maximum number of days to wait for a quote from the disrupted settlement rate option before proceding to this method.*/ \
X(LegPaymentStreamNonDeliverableSettlRateSource,                         40087) /*!< 40087 (int FIX.5.0SP2) Identifies the source of the rate information.*/ \
X(SettlRatePostponementSurvey,                                           40088) /*!< 40088 (Boolean FIX.5.0SP2) Indicates whether to request a settlement rate quote from the market.*/ \
X(SettlRatePostponementCalculationAgent,                                 40089) /*!< 40089 (int FIX.5.0SP2) Used to identify the settlement rate postponement calculation agent.*/ \
X(NoProvisions,                                                          40090) /*!< 40090 (NumInGroup FIX.5.0SP2) Number of provisions in the repeating group.*/ \
X(ProvisionType,                                                         40091) /*!< 40091 (int FIX.5.0SP2) Type of provisions.*/ \
X(ProvisionDateUnadjusted,                                               40092) /*!< 40092 (LocalMktDate FIX.5.0SP2) The unadjusted date of the provision.*/ \
X(ProvisionDateBusinessDayConvention,                                    40093) /*!< 40093 (int FIX.5.0SP2) The business day convention used to adjust the instrument's provision's dates. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(ProvisionDateBusinessCenter,                                           40094) /*!< 40094 (String FIX.5.0SP2) The business center calendar used to adjust the instrument's provision's dates, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionDateAdjusted,                                                 40095) /*!< 40095 (LocalMktDate FIX.5.0SP2) The adjusted date of the provision.*/ \
X(ProvisionDateTenorPeriod,                                              40096) /*!< 40096 (int FIX.5.0SP2) Time unit multiplier for the provision's tenor period.*/ \
X(ProvisionDateTenorUnit,                                                40097) /*!< 40097 (String FIX.5.0SP2) Time unit associated with the provision's tenor period.*/ \
X(ProvisionCalculationAgent,                                             40098) /*!< 40098 (int FIX.5.0SP2) Used to identify the calculation agent.  The calculation agent may be identified in ProvisionCalculationAgent(40098) or in the ProvisionParties component.*/ \
X(ProvisionOptionSinglePartyBuyerSide,                                   40099) /*!< 40099 (int FIX.5.0SP2) If optional early termination is not available to both parties then this component identifies the buyer of the option through its side of the trade.*/ \
X(ProvisionOptionSinglePartySellerSide,                                  40100) /*!< 40100 (int FIX.5.0SP2) If optional early termination is not available to both parties then this component identifies the seller of the option through its side of the trade.*/ \
X(ProvisionOptionExerciseStyle,                                          40101) /*!< 40101 (int FIX.5.0SP2) The instrument provision option’s exercise style.*/ \
X(ProvisionOptionExerciseMultipleNotional,                               40102) /*!< 40102 (Amt FIX.5.0SP2) A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.*/ \
X(ProvisionOptionExerciseMinimumNotional,                                40103) /*!< 40103 (Amt FIX.5.0SP2) The minimum notional amount that can be exercised on a given exercise date.*/ \
X(ProvisionOptionExerciseMaximumNotional,                                40104) /*!< 40104 (Amt FIX.5.0SP2) The maximum notional amount that can be exercised on a given exercise date.*/ \
X(ProvisionOptionMinimumNumber,                                          40105) /*!< 40105 (int FIX.5.0SP2) The minimum number of options that can be exercised on a given exercise date.*/ \
X(ProvisionOptionMaximumNumber,                                          40106) /*!< 40106 (int FIX.5.0SP2) The maximum number of options that can be exercised on a given exercise date. If the number is not specified, it means that the maximum number of options corresponds to the remaining unexercised options.*/ \
X(ProvisionOptionExerciseConfirmation,                                   40107) /*!< 40107 (Boolean FIX.5.0SP2) Used to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.*/ \
X(ProvisionCashSettlMethod,                                              40108) /*!< 40108 (int FIX.5.0SP2) An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (e).*/ \
X(ProvisionCashSettlCurrency,                                            40109) /*!< 40109 (Currency FIX.5.0SP2) Specifies the currency of settlement.  Uses ISO 4217 currency codes.*/ \
X(ProvisionCashSettlCurrency2,                                           40110) /*!< 40110 (Currency FIX.5.0SP2) Specifies the currency of settlement for a cross-currency provision.  Uses ISO 4217 currency codes.*/ \
X(ProvisionCashSettlQuoteType,                                           40111) /*!< 40111 (int FIX.5.0SP2) Identifies the type of quote to be used. */ \
X(ProvisionCashSettlQuoteSource,                                         40112) /*!< 40112 (int FIX.5.0SP2) Identifies the source of quote information. */ \
X(ProvisionText,                                                         40113) /*!< 40113 (String FIX.5.0SP2) Free form text to specify additional information or  enumeration description when a standard value does not apply.*/ \
X(ProvisionCashSettlValueTime,                                           40114) /*!< 40114 (LocalMktTime FIX.5.0SP2) A time specified in 24-hour format, e.g. 11am would be represented as 11:00:00. The time of the cash settlement valuation date when the cash settlement amount will be determined according to the cash settlement method if the parties have not otherwise been able to agree to the cash settlement amount.*/ \
X(ProvisionCashSettlValueTimeBusinessCenter,                             40115) /*!< 40115 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's cash settlement valuation time. See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionCashSettlValueDateBusinessDayConvention,                      40116) /*!< 40116 (int FIX.5.0SP2) The cash settlement valuation date adjustment business day convention. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(ProvisionCashSettlValueDateBusinessCenter,                             40117) /*!< 40117 (String FIX.5.0SP2) The business center calendar used to adjust the provision's cash settlement valuation date, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionCashSettlValueDateRelativeTo,                                 40118) /*!< 40118 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement value date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values*/ \
X(ProvisionCashSettlValueDateOffsetPeriod,                               40119) /*!< 40119 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement value date offset.*/ \
X(ProvisionCashSettlValueDateOffsetUnit,                                 40120) /*!< 40120 (String FIX.5.0SP2) Time unit associated with the relative cash settlement value date offset.*/ \
X(ProvisionCashSettlValueDateOffsetDayType,                              40121) /*!< 40121 (int FIX.5.0SP2) Specifies the day type of the provision's relative cash settlement value date offset.*/ \
X(ProvisionCashSettlValueDateAdjusted,                                   40122) /*!< 40122 (LocalMktDate FIX.5.0SP2) The adjusted cash settlement value date.*/ \
X(ProvisionOptionExerciseBusinessDayConvention,                          40123) /*!< 40123 (int FIX.5.0SP2) The business day convention used to adjust the instrument's provision's option exercise date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(ProvisionOptionExerciseBusinessCenter,                                 40124) /*!< 40124 (String FIX.5.0SP2) The business center calendar used to adjust the instrument's provision's option exercise date, e.g. "GBLO". \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionOptionExerciseEarliestDateOffsetPeriod,                       40125) /*!< 40125 (int FIX.5.0SP2) Time unit multiplier for the interval to the first (and possibly only) exercise date in the exercise period.*/ \
X(ProvisionOptionExerciseEarliestDateOffsetUnit,                         40126) /*!< 40126 (String FIX.5.0SP2) Time unit associated with the interval to the first (and possibly only) exercise date in the exercise period.*/ \
X(ProvisionOptionExerciseFrequencyPeriod,                                40127) /*!< 40127 (int FIX.5.0SP2) Time unit multiplier for the frequency of subsequent exercise dates in the exercise period following the earliest exercise date. An interval of 1 day should be used to indicate an American style exercise period.*/ \
X(ProvisionOptionExerciseFrequencyUnit,                                  40128) /*!< 40128 (String FIX.5.0SP2) Time unit associated with the frequency of subsequent exercise dates in the exercise period following the earliest exercise date.*/ \
X(ProvisionOptionExerciseStartDateUnadjusted,                            40129) /*!< 40129 (LocalMktDate FIX.5.0SP2) The unadjusted first day of the exercise period for an American style option.*/ \
X(ProvisionOptionExerciseStartDateRelativeTo,                            40130) /*!< 40130 (int FIX.5.0SP2) Specifies the anchor date when the option exercise start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ProvisionOptionExerciseStartDateOffsetPeriod,                          40131) /*!< 40131 (int FIX.5.0SP2) Time unit multiplier for the relative option exercise start date offset.*/ \
X(ProvisionOptionExerciseStartDateOffsetUnit,                            40132) /*!< 40132 (String FIX.5.0SP2) Time unit associated with the relative option exercise start date offset.*/ \
X(ProvisionOptionExerciseStartDateOffsetDayType,                         40133) /*!< 40133 (int FIX.5.0SP2) Specifies the day type of the provision's relative option exercise start date offset.*/ \
X(ProvisionOptionExerciseStartDateAdjusted,                              40134) /*!< 40134 (LocalMktDate FIX.5.0SP2) The adjusted first day of the exercise period for an American style option.*/ \
X(ProvisionOptionExercisePeriodSkip,                                     40135) /*!< 40135 (int FIX.5.0SP2) The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.*/ \
X(ProvisionOptionExerciseBoundsFirstDateUnadjusted,                      40136) /*!< 40136 (LocalMktDate FIX.5.0SP2) The unadjusted first date of a schedule. This can be used to restrict the range of exercise dates when they are relative.*/ \
X(ProvisionOptionExerciseBoundsLastDateUnadjusted,                       40137) /*!< 40137 (LocalMktDate FIX.5.0SP2) The unadjusted last date of a schedule. This can be used to restrict the range of exercise dates when they are relative.*/ \
X(ProvisionOptionExerciseEarliestTime,                                   40138) /*!< 40138 (LocalMktTime FIX.5.0SP2) The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date, in the case of an American option.*/ \
X(ProvisionOptionExerciseEarliestTimeBusinessCenter,                     40139) /*!< 40139 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's earliest time for notice of exercise.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionOptionExerciseLatestTime,                                     40140) /*!< 40140 (LocalMktTime FIX.5.0SP2) For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller's agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.*/ \
X(ProvisionOptionExerciseLatestTimeBusinessCenter,                       40141) /*!< 40141 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's latest time for notice of exercise.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoProvisionOptionExerciseFixedDates,                                   40142) /*!< 40142 (NumInGroup FIX.5.0SP2) Number of provision option exercise fixed dates in the repeating group.*/ \
X(ProvisionOptionExerciseFixedDate,                                      40143) /*!< 40143 (LocalMktDate FIX.5.0SP2) A predetermined option exercise date, unadjusted or adjusted depending on ProvisionOptionExerciseFixedDateType(40144).*/ \
X(ProvisionOptionExerciseFixedDateType,                                  40144) /*!< 40144 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(ProvisionOptionExpirationDateUnadjusted,                               40145) /*!< 40145 (LocalMktDate FIX.5.0SP2) The unadjusted last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.*/ \
X(ProvisionOptionExpirationDateBusinessDayConvention,                    40146) /*!< 40146 (int FIX.5.0SP2) The business day convention used to adjust the instrument's provision's option expiration date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(ProvisionOptionExpirationDateBusinessCenter,                           40147) /*!< 40147 (String FIX.5.0SP2) The business center calendar used to adjust the instrument's provision's option expiration date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionOptionExpirationDateRelativeTo,                               40148) /*!< 40148 (int FIX.5.0SP2) Specifies the anchor date when the option expiration date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ProvisionOptionExpirationDateOffsetPeriod,                             40149) /*!< 40149 (int FIX.5.0SP2) Time unit multiplier for the relative option expiration date offset.*/ \
X(ProvisionOptionExpirationDateOffsetUnit,                               40150) /*!< 40150 (String FIX.5.0SP2) Time unit associated with the relative option expiration date offset.*/ \
X(ProvisionOptionExpirationDateOffsetDayType,                            40151) /*!< 40151 (int FIX.5.0SP2) Specifies the day type of the provision's relative option expiration date offset.*/ \
X(ProvisionOptionExpirationDateAdjusted,                                 40152) /*!< 40152 (LocalMktDate FIX.5.0SP2) The adjusted last date within an exercise period for an American style option. For a European style option it is the only date within the exercise period.*/ \
X(ProvisionOptionExpirationTime,                                         40153) /*!< 40153 (LocalMktTime FIX.5.0SP2) The latest time for exercise on the expiration date.*/ \
X(ProvisionOptionExpirationTimeBusinessCenter,                           40154) /*!< 40154 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's latest exercise time on expiration date.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionOptionRelevantUnderlyingDateUnadjusted,                       40155) /*!< 40155 (LocalMktDate FIX.5.0SP2) The unadjusted date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).*/ \
X(ProvisionOptionRelevantUnderlyingDateBusinessDayConvention,            40156) /*!< 40156 (int FIX.5.0SP2) The business day convention used to adjust the instrument's provision's option underlying date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(ProvisionOptionRelevantUnderlyingDateBusinessCenter,                   40157) /*!< 40157 (String FIX.5.0SP2) The business center calendar used to adjust the instrument's provision's option underlying date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionOptionRelevantUnderlyingDateRelativeTo,                       40158) /*!< 40158 (int FIX.5.0SP2) Specifies the anchor date when the date relevant to the underlying trade on exercise is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ProvisionOptionRelevantUnderlyingDateOffsetPeriod,                     40159) /*!< 40159 (int FIX.5.0SP2) Time unit multiplier for the relative option relevant underlying date offset.*/ \
X(ProvisionOptionRelevantUnderlyingDateOffsetUnit,                       40160) /*!< 40160 (String FIX.5.0SP2) Time unit associated with the relative option relevant underlying date offset.*/ \
X(ProvisionOptionRelevantUnderlyingDateOffsetDayType,                    40161) /*!< 40161 (int FIX.5.0SP2) Specifies the day type of the provision's relative option relevant underlying date offset.*/ \
X(ProvisionOptionRelevantUnderlyingDateAdjusted,                         40162) /*!< 40162 (LocalMktDate FIX.5.0SP2) The adjusted date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).*/ \
X(ProvisionCashSettlPaymentDateBusinessDayConvention,                    40163) /*!< 40163 (int FIX.5.0SP2) The business day convention used to adjust the provisional cash settlement payment's termination or relative termination date.  Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(ProvisionCashSettlPaymentDateBusinessCenter,                           40164) /*!< 40164 (String FIX.5.0SP2) The business center calendar used to adjust the provisional cash settlement payment's termination or relative termination date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionCashSettlPaymentDateRelativeTo,                               40165) /*!< 40165 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ProvisionCashSettlPaymentDateOffsetPeriod,                             40166) /*!< 40166 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement payment date offset.*/ \
X(ProvisionCashSettlPaymentDateOffsetUnit,                               40167) /*!< 40167 (String FIX.5.0SP2) Time unit associated with the relative cash settlement payment date offset.*/ \
X(ProvisionCashSettlPaymentDateOffsetDayType,                            40168) /*!< 40168 (int FIX.5.0SP2) Specifies the day type of the provision's relative cash settlement payment date offset.*/ \
X(ProvisionCashSettlPaymentDateRangeFirst,                               40169) /*!< 40169 (LocalMktDate FIX.5.0SP2) First date in range when a settlement date range is provided.*/ \
X(ProvisionCashSettlPaymentDateRangeLast,                                40170) /*!< 40170 (LocalMktDate FIX.5.0SP2) The last date in range when a settlement date range is provided.*/ \
X(NoProvisionCashSettlPaymentDates,                                      40171) /*!< 40171 (NumInGroup FIX.5.0SP2) Number of provision cash settlement payment dates in the repeating group.*/ \
X(ProvisionCashSettlPaymentDate,                                         40172) /*!< 40172 (LocalMktDate FIX.5.0SP2) The cash settlement payment date, unadjusted or adjusted depending on ProvisionCashSettlPaymentDateType(40173).*/ \
X(ProvisionCashSettlPaymentDateType,                                     40173) /*!< 40173 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(NoProvisionPartyIDs,                                                   40174) /*!< 40174 (NumInGroup FIX.5.0SP2) Number of parties identified in the contract provision.*/ \
X(ProvisionPartyID,                                                      40175) /*!< 40175 (String FIX.5.0SP2) The party identifier/code for the payment settlement party. */ \
X(ProvisionPartyIDSource,                                                40176) /*!< 40176 (char FIX.5.0SP2) Identifies class or source of the ProvisionPartyID(40175) value. */ \
X(ProvisionPartyRole,                                                    40177) /*!< 40177 (int FIX.5.0SP2) Identifies the type or role of ProvisionPartyID(40175) specified. */ \
X(NoProvisionPartySubIDs,                                                40178) /*!< 40178 (NumInGroup FIX.5.0SP2) Number of sub-party IDs to be reported for the party.*/ \
X(ProvisionPartySubID,                                                   40179) /*!< 40179 (String FIX.5.0SP2) Party sub-identifier, if applicable, for ProvisionPartyID(40175). */ \
X(ProvisionPartySubIDType,                                               40180) /*!< 40180 (int FIX.5.0SP2) The type of ProvisionPartySubID(40179). */ \
X(NoProtectionTerms,                                                     40181) /*!< 40181 (NumInGroup FIX.5.0SP2) Number of protection terms in the repeating group.*/ \
X(ProtectionTermNotional,                                                40182) /*!< 40182 (Amt FIX.5.0SP2) The notional amount of protection coverage. */ \
X(ProtectionTermCurrency,                                                40183) /*!< 40183 (Currency FIX.5.0SP2) The currency of ProtectionTermNotional(40182).  Uses ISO 4217 currency codes.*/ \
X(ProtectionTermSellerNotifies,                                          40184) /*!< 40184 (Boolean FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring.  \
 \
ProtectionTermSellerNotifies(40184)=Y indicates that the seller notifies.*/ \
X(ProtectionTermBuyerNotifies,                                           40185) /*!< 40185 (Boolean FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring.  \
 \
ProtectionTermBuyerNotifies(40185)=Y indicates that the buyer notifies. */ \
X(ProtectionTermEventBusinessCenter,                                     40186) /*!< 40186 (String FIX.5.0SP2) When used, the business center indicates the local time of the business center that replaces the Greenwich Mean Time  in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions. See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProtectionTermStandardSources,                                         40187) /*!< 40187 (Boolean FIX.5.0SP2) Indicates whether ISDA defined Standard Public Sources are applicable (ProtectionTermStandardSources(40187)=Y) or not.*/ \
X(ProtectionTermEventMinimumSources,                                     40188) /*!< 40188 (int FIX.5.0SP2) The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two. */ \
X(ProtectionTermEventNewsSource,                                         40189) /*!< 40189 (String FIX.5.0SP2) Newspaper or electronic news service or source that may publish relevant information used in the determination of whether or not a credit event has occurred.*/ \
X(ProtectionTermXID,                                                     40190) /*!< 40190 (XID FIX.5.0SP2) A named string value referenced by UnderlyingProtectionTermXIDRef(41314).*/ \
X(NoProtectionTermEvents,                                                40191) /*!< 40191 (NumInGroup FIX.5.0SP2) Number of protection term events in the repeating group.*/ \
X(ProtectionTermEventType,                                               40192) /*!< 40192 (String FIX.5.0SP2) Specifies the type of credit event applicable to the protection terms.  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Event_Types for code list of applicable event types. */ \
X(ProtectionTermEventValue,                                              40193) /*!< 40193 (String FIX.5.0SP2) Protection term event value appropriate to ProtectionTermEvenType(40192).  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Event_Types for applicable event type values. */ \
X(ProtectionTermEventCurrency,                                           40194) /*!< 40194 (Currency FIX.5.0SP2) Applicable currency if ProtectionTermEventValue(40193) is an amount.  Uses ISO 4217 currency codes.*/ \
X(ProtectionTermEventPeriod,                                             40195) /*!< 40195 (int FIX.5.0SP2) Time unit multiplier for protection term events.*/ \
X(ProtectionTermEventUnit,                                               40196) /*!< 40196 (String FIX.5.0SP2) Time unit associated with protection term events.*/ \
X(ProtectionTermEventDayType,                                            40197) /*!< 40197 (int FIX.5.0SP2) Day type for events that specify a period and unit. */ \
X(ProtectionTermEventRateSource,                                         40198) /*!< 40198 (String FIX.5.0SP2) Rate source for events that specify a rate source, e.g. Floating rate interest shortfall.*/ \
X(NoProtectionTermEventQualifiers,                                       40199) /*!< 40199 (NumInGroup FIX.5.0SP2) Number of qualifiers in the repeating group.*/ \
X(ProtectionTermEventQualifier,                                          40200) /*!< 40200 (char FIX.5.0SP2) Protection term event qualifier.  Used to further qualify ProtectionTermEventType(40192). */ \
X(NoProtectionTermObligations,                                           40201) /*!< 40201 (NumInGroup FIX.5.0SP2) Number of obligations in the repeating group.*/ \
X(ProtectionTermObligationType,                                          40202) /*!< 40202 (String FIX.5.0SP2) Specifies the type of obligation applicable to the protection terms.  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Obligation_Types for code list of applicable obligation types.*/ \
X(ProtectionTermObligationValue,                                         40203) /*!< 40203 (String FIX.5.0SP2) Protection term obligation value appropriate to ProtectionTermObligationType(40202).  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Obligation_Types for applicable obligation type values. */ \
X(NoPhysicalSettlTerms,                                                  40204) /*!< 40204 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(PhysicalSettlCurrency,                                                 40205) /*!< 40205 (Currency FIX.5.0SP2) Specifies the currency of physical settlement.  Uses ISO 4217 currency codes.*/ \
X(PhysicalSettlBusinessDays,                                             40206) /*!< 40206 (int FIX.5.0SP2) The number of business days used in the determination of physical settlement. Its precise meaning is dependant on the context in which this element is used. */ \
X(PhysicalSettlMaximumBusinessDays,                                      40207) /*!< 40207 (int FIX.5.0SP2) A maximum number of business days. Its precise meaning is dependant on the context in which this element is used. Intended to be used to limit a particular ISDA fallback provision.*/ \
X(PhysicalSettlTermXID,                                                  40208) /*!< 40208 (XID FIX.5.0SP2) A named string value referenced by UnderlyingSettlTermXIDRef(41315). */ \
X(NoPhysicalSettlDeliverableObligations,                                 40209) /*!< 40209 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(PhysicalSettlDeliverableObligationType,                                40210) /*!< 40210 (String FIX.5.0SP2) Specifies the type of deliverable obligation applicable for physical settlement. See http://www.fixtradingcommunity.org/codelists#Deliverable_Obligation_Types for code list for applicable deliverable obligation types.*/ \
X(PhysicalSettlDeliverableObligationValue,                               40211) /*!< 40211 (String FIX.5.0SP2) Physical settlement deliverable obligation value appropriate to PhysicalSettlDeliverableObligationType(40210). See http://www.fixtradingcommunity.org/codelists#Deliverable_Obligation_Types for applicable obligation type values.*/ \
X(NoPayments,                                                            40212) /*!< 40212 (NumInGroup FIX.5.0SP2) Number of additional settlement or bullet payments.*/ \
X(PaymentType,                                                           40213) /*!< 40213 (int FIX.5.0SP2) Type of payment.*/ \
X(PaymentPaySide,                                                        40214) /*!< 40214 (int FIX.5.0SP2) The side of the party paying the payment.*/ \
X(PaymentReceiveSide,                                                    40215) /*!< 40215 (int FIX.5.0SP2) The side of the party receiving the payment.*/ \
X(PaymentCurrency,                                                       40216) /*!< 40216 (Currency FIX.5.0SP2) Specifies the currency in which PaymentAmount(40217)  is denominated.  Uses ISO 4271 currency codes.*/ \
X(PaymentAmount,                                                         40217) /*!< 40217 (Amt FIX.5.0SP2) The total payment amount.*/ \
X(PaymentPrice,                                                          40218) /*!< 40218 (Price FIX.5.0SP2) The price determining the payment amount expressed in terms specified in PaymentPriceType(40919) and expressed in market format. */ \
X(PaymentDateUnadjusted,                                                 40219) /*!< 40219 (LocalMktDate FIX.5.0SP2) The unadjusted payment date.*/ \
X(PaymentBusinessDayConvention,                                          40220) /*!< 40220 (int FIX.5.0SP2) The business day convention used to adjust the payment date.  Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentBusinessCenter,                                                 40221) /*!< 40221 (String FIX.5.0SP2) The business center calendar used to adjust the payment date, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentDateAdjusted,                                                   40222) /*!< 40222 (LocalMktDate FIX.5.0SP2) The adjusted payment date.*/ \
X(LegMarketDisruptionValue,                                              40223) /*!< 40223 (String FIX.5.0SP2) Applicable value for LegMarketDisruptionEvent(41468).*/ \
X(PaymentDiscountFactor,                                                 40224) /*!< 40224 (float FIX.5.0SP2) The value representing the discount factor used to calculate the present value of the cash flow.*/ \
X(PaymentPresentValueAmount,                                             40225) /*!< 40225 (Amt FIX.5.0SP2) The amount representing the present value of the forecast payment.*/ \
X(PaymentPresentValueCurrency,                                           40226) /*!< 40226 (Currency FIX.5.0SP2) Specifies the currency the PaymentPresentValueAmount(40225) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(PaymentSettlStyle,                                                     40227) /*!< 40227 (int FIX.5.0SP2) Payment settlement style.*/ \
X(LegPaymentStreamNonDeliverableSettlReferencePage,                      40228) /*!< 40228 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
When LegPaymentStreamNonDeliverableSettlRateSource(40087) = 3 (ISDA Settlement Rate Option) this contains a value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(PaymentText,                                                           40229) /*!< 40229 (String FIX.5.0SP2) Free form text to specify additional information or enumeration description when a sdtandard value does not apply.  Identifies the payment type when PaymentType(40213) = 99 (Other).*/ \
X(NoPaymentSettls,                                                       40230) /*!< 40230 (NumInGroup FIX.5.0SP2) Number of additional settlements or bullet payments. */ \
X(PaymentSettlAmount,                                                    40231) /*!< 40231 (Amt FIX.5.0SP2) The payment settlement amount.*/ \
X(PaymentSettlCurrency,                                                  40232) /*!< 40232 (Currency FIX.5.0SP2) Specifies the currency the PaymentSettlAmount(40231) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(NoPaymentSettlPartyIDs,                                                40233) /*!< 40233 (NumInGroup FIX.5.0SP2) Number of parties identified in the additional settlement or bullet payment.*/ \
X(PaymentSettlPartyID,                                                   40234) /*!< 40234 (String FIX.5.0SP2) The payment settlement party identifier. */ \
X(PaymentSettlPartyIDSource,                                             40235) /*!< 40235 (char FIX.5.0SP2) Identifies the class or source of PaymentSettlPartyID(40234) value (e.g. BIC). */ \
X(PaymentSettlPartyRole,                                                 40236) /*!< 40236 (int FIX.5.0SP2) Identifies the role of PaymentSettlPartyID(40234) (e.g. the beneficiary's bank or depository institution).*/ \
X(PaymentSettlPartyRoleQualifier,                                        40237) /*!< 40237 (int FIX.5.0SP2) Qualifies the value of PaymentSettlPartyRole(40236).*/ \
X(NoPaymentSettlPartySubIDs,                                             40238) /*!< 40238 (NumInGroup FIX.5.0SP2) Number of sub-party IDs to be reported for the party.*/ \
X(PaymentSettlPartySubID,                                                40239) /*!< 40239 (String FIX.5.0SP2) Party sub-identifier, if applicable, for PaymentSettlPartyRole(40236). */ \
X(PaymentSettlPartySubIDType,                                            40240) /*!< 40240 (int FIX.5.0SP2) The type of PaymentSettlPartySubID(40239) value. */ \
X(NoLegStreams,                                                          40241) /*!< 40241 (NumInGroup FIX.5.0SP2) Number of swap streams in the repeating group.*/ \
X(LegStreamType,                                                         40242) /*!< 40242 (int FIX.5.0SP2) Type of swap stream.*/ \
X(LegStreamDesc,                                                         40243) /*!< 40243 (String FIX.5.0SP2) A short descriptive name given to the payment stream, e.g. CDS, Fixed, Float, Float2, GBP. The description has no intrinsic meaning but should be arbitrarily chosen by the remitter as a reference.*/ \
X(LegStreamPaySide,                                                      40244) /*!< 40244 (int FIX.5.0SP2) The side of the party paying the stream.*/ \
X(LegStreamReceiveSide,                                                  40245) /*!< 40245 (int FIX.5.0SP2) The side of the party receiving the stream.*/ \
X(LegStreamNotional,                                                     40246) /*!< 40246 (Amt FIX.5.0SP2) Notional, or initial notional value for the payment stream. The LegPaymentSchedule component should be used for specifying the steps.*/ \
X(LegStreamCurrency,                                                     40247) /*!< 40247 (Currency FIX.5.0SP2) Specifies the currency the LegStreamNotional(40246) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(LegStreamText,                                                         40248) /*!< 40248 (String FIX.5.0SP2) Free form text to specify additional information or enumeration description when a standard value does not apply.*/ \
X(LegStreamEffectiveDateUnadjusted,                                      40249) /*!< 40249 (LocalMktDate FIX.5.0SP2) The unadjusted effective date.*/ \
X(LegStreamEffectiveDateBusinessDayConvention,                           40250) /*!< 40250 (int FIX.5.0SP2) The business day convention used to adjust the instrument leg's stream's effective date or relative effective date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegStreamEffectiveDateBusinessCenter,                                  40251) /*!< 40251 (String FIX.5.0SP2) The business center calendar used to adjust the instrument leg's stream's effective date or relative effective date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegStreamEffectiveDateRelativeTo,                                      40252) /*!< 40252 (int FIX.5.0SP2) Specifies the anchor date when the effective date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values*/ \
X(LegStreamEffectiveDateOffsetPeriod,                                    40253) /*!< 40253 (int FIX.5.0SP2) Time unit multiplier for the relative effective date offset.  */ \
X(LegStreamEffectiveDateOffsetUnit,                                      40254) /*!< 40254 (String FIX.5.0SP2) Time unit associated with the relative effective date offset. */ \
X(LegStreamEffectiveDateOffsetDayType,                                   40255) /*!< 40255 (int FIX.5.0SP2) Specifies the day type of the relative effective date offset.*/ \
X(LegStreamEffectiveDateAdjusted,                                        40256) /*!< 40256 (LocalMktDate FIX.5.0SP2) The adjusted effective date.*/ \
X(LegStreamTerminationDateUnadjusted,                                    40257) /*!< 40257 (LocalMktDate FIX.5.0SP2) The unadjusted termination date.*/ \
X(LegStreamTerminationDateBusinessDayConvention,                         40258) /*!< 40258 (int FIX.5.0SP2) The business day convention used to adjust the instrument leg's stream's termination, or relative termination, date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegStreamTerminationDateBusinessCenter,                                40259) /*!< 40259 (String FIX.5.0SP2) The business center calendar used to adjust the instrument leg's stream's termination, or relative termination, date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegStreamTerminationDateRelativeTo,                                    40260) /*!< 40260 (int FIX.5.0SP2) Specifies the anchor date when the termination date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegStreamTerminationDateOffsetPeriod,                                  40261) /*!< 40261 (int FIX.5.0SP2) Time unit multiplier for the relative termination date offset.*/ \
X(LegStreamTerminationDateOffsetUnit,                                    40262) /*!< 40262 (String FIX.5.0SP2) Time unit associated with the relative termination date offset.*/ \
X(LegStreamTerminationDateOffsetDayType,                                 40263) /*!< 40263 (int FIX.5.0SP2) Specifies the day type of the relative termination date offset.*/ \
X(LegStreamTerminationDateAdjusted,                                      40264) /*!< 40264 (LocalMktDate FIX.5.0SP2) The adjusted termination date.*/ \
X(LegStreamCalculationPeriodBusinessDayConvention,                       40265) /*!< 40265 (int FIX.5.0SP2) The business day convention used to adjust calculation periods.  Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegStreamCalculationPeriodBusinessCenter,                              40266) /*!< 40266 (String FIX.5.0SP2) The business center calendar used to adjust calculation periods, e.g. "GLBO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegStreamFirstPeriodStartDateUnadjusted,                               40267) /*!< 40267 (LocalMktDate FIX.5.0SP2) The unadjusted first calculation period start date if before the effective date.*/ \
X(LegStreamFirstPeriodStartDateBusinessDayConvention,                    40268) /*!< 40268 (int FIX.5.0SP2) The business day convention used to adjust the instrument leg's stream's first calculation period start date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegStreamFirstPeriodStartDateBusinessCenter,                           40269) /*!< 40269 (String FIX.5.0SP2) The business center calendar used to adjust the instrument leg's stream's first calculation period start date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(LegStreamFirstPeriodStartDateAdjusted,                                 40270) /*!< 40270 (LocalMktDate FIX.5.0SP2) The adjusted first calculation period start date, if it is before the effective date.*/ \
X(LegStreamFirstRegularPeriodStartDateUnadjusted,                        40271) /*!< 40271 (LocalMktDate FIX.5.0SP2) The unadjusted first start date of the regular calculation period, if there is an initial stub period.*/ \
X(LegStreamFirstCompoundingPeriodEndDateUnadjusted,                      40272) /*!< 40272 (LocalMktDate FIX.5.0SP2) The unadjusted end date of the initial compounding period.*/ \
X(LegStreamLastRegularPeriodEndDateUnadjusted,                           40273) /*!< 40273 (LocalMktDate FIX.5.0SP2) The unadjusted last regular period end date if there is a final stub period.*/ \
X(LegStreamCalculationFrequencyPeriod,                                   40274) /*!< 40274 (int FIX.5.0SP2) Time unit multiplier for the frequency at which calculation period end dates occur. */ \
X(LegStreamCalculationFrequencyUnit,                                     40275) /*!< 40275 (String FIX.5.0SP2) Time unit associated with the frequency at which calculation period end dates occur. */ \
X(LegStreamCalculationRollConvention,                                    40276) /*!< 40276 (String FIX.5.0SP2) The convention for determining the sequence of end dates. It is used in conjunction with a specified frequency.  Used only to override the roll convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(NoCashSettlDealers,                                                    40277) /*!< 40277 (NumInGroup FIX.5.0SP2) Number of dealers in the repeating group.*/ \
X(NoBusinessCenters,                                                     40278) /*!< 40278 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegPaymentStreamType,                                                  40279) /*!< 40279 (int FIX.5.0SP2) Identifies the type of payment stream applicable to the swap stream associated with the instrument leg.*/ \
X(LegPaymentStreamMarketRate,                                            40280) /*!< 40280 (int FIX.5.0SP2) Used only for credit index trade. This contains the credit spread ("fair value") at which the trade was executed. The market rate varies over the life of the index depending on market conditions. This is the price of the index as quoted by trading desks.*/ \
X(LegPaymentStreamDelayIndicator,                                        40281) /*!< 40281 (Boolean FIX.5.0SP2) Applicable to credit default swaps on mortgage backed securities to specify whether payment delays are applicable to the fixed amount.  \
 \
Residential mortgage backed securities typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap.  \
 \
Commercial mortage backed securities  do not typically have a payment delay, with both payment dates (the coupon date of the reference obligation and the payment date of the synthetic swap) being on the 25th of each month.*/ \
X(LegPaymentStreamSettlCurrency,                                         40282) /*!< 40282 (Currency FIX.5.0SP2) Specifies the currency that the stream settles in (to support swaps that settle in a currency different from the notional currency).  Uses ISO 4217 currency codes.*/ \
X(LegPaymentStreamDayCount,                                              40283) /*!< 40283 (int FIX.5.0SP2) The day count convention used in the payment stream calculations.*/ \
X(LegPaymentStreamAccrualDays,                                           40284) /*!< 40284 (int FIX.5.0SP2) The number of days from the adjusted calculation period start date to the adjusted value date, calculated in accordance with the applicable day count fraction.*/ \
X(LegPaymentStreamDiscountType,                                          40285) /*!< 40285 (int FIX.5.0SP2) The method of calculating discounted payment amounts.*/ \
X(LegPaymentStreamDiscountRate,                                          40286) /*!< 40286 (Percentage FIX.5.0SP2) Discount rate. The rate is expressed in decimal, e.g. 5% is expressed as 0.05.*/ \
X(LegPaymentStreamDiscountRateDayCount,                                  40287) /*!< 40287 (int FIX.5.0SP2) The day count convention applied to the LegPaymentStreamDiscountRate(40286).*/ \
X(LegPaymentStreamCompoundingMethod,                                     40288) /*!< 40288 (int FIX.5.0SP2) Compounding method.*/ \
X(LegPaymentStreamInitialPrincipalExchangeIndicator,                     40289) /*!< 40289 (Boolean FIX.5.0SP2) Indicates whether there is an initial exchange of principal on the effective date.*/ \
X(LegPaymentStreamInterimPrincipalExchangeIndicator,                     40290) /*!< 40290 (Boolean FIX.5.0SP2) Indicates whether there are intermediate or interim exchanges of principal during the term of the swap.*/ \
X(LegPaymentStreamFinalPrincipalExchangeIndicator,                       40291) /*!< 40291 (Boolean FIX.5.0SP2) Indicates whether there is a final exchange of principal on the termination date.*/ \
X(LegPaymentStreamPaymentDateBusinessDayConvention,                      40292) /*!< 40292 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's payment date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentStreamPaymentDateBusinessCenter,                             40293) /*!< 40293 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's payment date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(LegPaymentStreamPaymentFrequencyPeriod,                                40294) /*!< 40294 (int FIX.5.0SP2) Time unit multiplier for the frequency of payments. */ \
X(LegPaymentStreamPaymentFrequencyUnit,                                  40295) /*!< 40295 (String FIX.5.0SP2) Time unit associated with the frequency of payments. */ \
X(LegPaymentStreamPaymentRollConvention,                                 40296) /*!< 40296 (String FIX.5.0SP2) The convention for determining the sequence of end dates. It is used in conjunction with a specified frequency.  Used only to override the roll convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentStreamFirstPaymentDateUnadjusted,                            40297) /*!< 40297 (LocalMktDate FIX.5.0SP2) The unadjusted first payment date.*/ \
X(LegPaymentStreamLastRegularPaymentDateUnadjusted,                      40298) /*!< 40298 (LocalMktDate FIX.5.0SP2) The unadjusted last regular payment date.*/ \
X(LegPaymentStreamPaymentDateRelativeTo,                                 40299) /*!< 40299 (int FIX.5.0SP2) Specifies the anchor date when payment dates are relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamPaymentDateOffsetPeriod,                               40300) /*!< 40300 (int FIX.5.0SP2) Time unit multiplier for the relative payment date offset.  */ \
X(LegPaymentStreamPaymentDateOffsetUnit,                                 40301) /*!< 40301 (String FIX.5.0SP2) Time unit associated with the relative payment date offset. */ \
X(LegPaymentStreamPaymentDateOffsetDayType,                              40302) /*!< 40302 (int FIX.5.0SP2) Specifies the day type of the relative payment date offset.*/ \
X(LegPaymentStreamResetDateRelativeTo,                                   40303) /*!< 40303 (int FIX.5.0SP2) Specifies the anchor date when the reset dates are relative to an anchor date.  \
 \
If the reset frequency is specified as daily this element must not be included.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamResetDateBusinessDayConvention,                        40304) /*!< 40304 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's reset date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentStreamResetDateBusinessCenter,                               40305) /*!< 40305 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's reset date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(LegPaymentStreamResetFrequencyPeriod,                                  40306) /*!< 40306 (int FIX.5.0SP2) Time unit multiplier for frequency of resets.*/ \
X(LegPaymentStreamResetFrequencyUnit,                                    40307) /*!< 40307 (String FIX.5.0SP2) Time unit associated with frequency of resets.*/ \
X(LegPaymentStreamResetWeeklyRollConvention,                             40308) /*!< 40308 (String FIX.5.0SP2) Used to specify the day of the week in which the reset occurs for payments that reset on a weekly basis.*/ \
X(LegPaymentStreamInitialFixingDateRelativeTo,                           40309) /*!< 40309 (int FIX.5.0SP2) Specifies the anchor date when the initial fixing date is relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamInitialFixingDateBusinessDayConvention,                40310) /*!< 40310 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's initial fixing date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentStreamInitialFixingDateBusinessCenter,                       40311) /*!< 40311 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's initial fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(LegPaymentStreamInitialFixingDateOffsetPeriod,                         40312) /*!< 40312 (int FIX.5.0SP2) Time unit multiplier for the relative initial fixing date offset.*/ \
X(LegPaymentStreamInitialFixingDateOffsetUnit,                           40313) /*!< 40313 (String FIX.5.0SP2) Time unit associated with the relative initial fixing date offset.*/ \
X(LegPaymentStreamInitialFixingDateOffsetDayType,                        40314) /*!< 40314 (int FIX.5.0SP2) Specifies the day type of the relative initial fixing date offset.*/ \
X(LegPaymentStreamInitialFixingDateAdjusted,                             40315) /*!< 40315 (LocalMktDate FIX.5.0SP2) The adjusted initial fixing date.*/ \
X(LegPaymentStreamFixingDateRelativeTo,                                  40316) /*!< 40316 (int FIX.5.0SP2) Specifies the anchor date when the fixing date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamFixingDateBusinessDayConvention,                       40317) /*!< 40317 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's fixing date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentStreamFixingDateBusinessCenter,                              40318) /*!< 40318 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(LegPaymentStreamFixingDateOffsetPeriod,                                40319) /*!< 40319 (int FIX.5.0SP2) Time unit multiplier for the relative fixing date offset.*/ \
X(LegPaymentStreamFixingDateOffsetUnit,                                  40320) /*!< 40320 (String FIX.5.0SP2) Time unit associated with the relative fixing date offset.*/ \
X(LegPaymentStreamFixingDateOffsetDayType,                               40321) /*!< 40321 (int FIX.5.0SP2) Specifies the day type of the relative fixing date offset.*/ \
X(LegPaymentStreamFixingDateAdjusted,                                    40322) /*!< 40322 (LocalMktDate FIX.5.0SP2) The adjusted fixing date.*/ \
X(LegPaymentStreamRateCutoffDateOffsetPeriod,                            40323) /*!< 40323 (int FIX.5.0SP2) Time unit multiplier for the relative rate cut-off date offset.*/ \
X(LegPaymentStreamRateCutoffDateOffsetUnit,                              40324) /*!< 40324 (String FIX.5.0SP2) Time unit associated with the relative rate cut-off date offset.*/ \
X(LegPaymentStreamRateCutoffDateOffsetDayType,                           40325) /*!< 40325 (int FIX.5.0SP2) Specifies the day type of the relative rate cut-off date offset.*/ \
X(LegPaymentStreamRate,                                                  40326) /*!< 40326 (Percentage FIX.5.0SP2) The rate applicable to the fixed rate payment stream.*/ \
X(LegPaymentStreamFixedAmount,                                           40327) /*!< 40327 (Amt FIX.5.0SP2) The leg instrument payment stream's fixed payment amount. In a CDS, this can be an alternative to LegPaymentStreamRate(40326).*/ \
X(LegPaymentStreamRateOrAmountCurrency,                                  40328) /*!< 40328 (Currency FIX.5.0SP2) Specifies the currency in which LegPaymentStreamFixedAmount(40327) or LegPaymentStreamRate(40326) is denominated.  Uses ISO 4217 currency codes.*/ \
X(LegPaymentStreamFutureValueNotional,                                   40329) /*!< 40329 (Amt FIX.5.0SP2) The future value notional is normally only required for certain non-deliverable interest rate swaps (e.g. Brazillian Real (BRL) vs. CETIP Interbank Deposit Rate (CDI)). The value is calculated as follows: Future Value Notional = Notional Amount * (1 + Fixed Rate) ^ (Fixed Rate Day Count Fraction). The currency is the same as the stream notional.*/ \
X(LegPaymentStreamFutureValueDateAdjusted,                               40330) /*!< 40330 (LocalMktDate FIX.5.0SP2) The adjusted value date of the future value amount.*/ \
X(LegPaymentStreamRateIndex,                                             40331) /*!< 40331 (String FIX.5.0SP2) The payment stream floating rate index.*/ \
X(LegPaymentStreamRateIndexSource,                                       40332) /*!< 40332 (int FIX.5.0SP2) The source of the payment stream floating rate index.*/ \
X(LegPaymentStreamRateIndexCurveUnit,                                    40333) /*!< 40333 (String FIX.5.0SP2) Time unit associated with the payment stream's floating rate index curve period. */ \
X(LegPaymentStreamRateIndexCurvePeriod,                                  40334) /*!< 40334 (int FIX.5.0SP2) Time unit multiplier for the payment stream's floating rate index curve period. */ \
X(LegPaymentStreamRateMultiplier,                                        40335) /*!< 40335 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(LegPaymentStreamRateSpread,                                            40336) /*!< 40336 (PriceOffset FIX.5.0SP2) The basis points spread from the index specified in LegPaymentStreamRateIndex(40331).*/ \
X(LegPaymentStreamRateSpreadPositionType,                                40337) /*!< 40337 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(LegPaymentStreamRateTreatment,                                         40338) /*!< 40338 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(LegPaymentStreamCapRate,                                               40339) /*!< 40339 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. It is only required where the floating rate on a swap stream is capped at a certain level The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(LegPaymentStreamCapRateBuySide,                                        40340) /*!< 40340 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(LegPaymentStreamCapRateSellSide,                                       40341) /*!< 40341 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(LegPaymentStreamFloorRate,                                             40342) /*!< 40342 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level The floor rate is assumed to be exclusive of any spread and is a per annum rate. The rate is expressed as a decimal, e.g. 5% is represented as 0.05.*/ \
X(LegPaymentStreamFloorRateBuySide,                                      40343) /*!< 40343 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(LegPaymentStreamFloorRateSellSide,                                     40344) /*!< 40344 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(LegPaymentStreamInitialRate,                                           40345) /*!< 40345 (Percentage FIX.5.0SP2) The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. The initial rate is expressed in decimal form, e.g. 5% is represented as 0.05.*/ \
X(LegPaymentStreamFinalRateRoundingDirection,                            40346) /*!< 40346 (char FIX.5.0SP2) Specifies the rounding direction.*/ \
X(LegPaymentStreamFinalRatePrecision,                                    40347) /*!< 40347 (int FIX.5.0SP2) Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(LegPaymentStreamAveragingMethod,                                       40348) /*!< 40348 (int FIX.5.0SP2) When averaging is applicable, used to specify whether a weighted or unweighted average method of calculation is to be used. */ \
X(LegPaymentStreamNegativeRateTreatment,                                 40349) /*!< 40349 (int FIX.5.0SP2) The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(LegPaymentStreamInflationLagPeriod,                                    40350) /*!< 40350 (int FIX.5.0SP2) Time unit multiplier for the inflation lag period.  The lag period is the offsetting period from the payment date which determineds the reference period for which the inflation index is observed.  */ \
X(LegPaymentStreamInflationLagUnit,                                      40351) /*!< 40351 (String FIX.5.0SP2) Time unit associated with the inflation lag period. */ \
X(LegPaymentStreamInflationLagDayType,                                   40352) /*!< 40352 (int FIX.5.0SP2) The inflation lag period day type.*/ \
X(LegPaymentStreamInflationInterpolationMethod,                          40353) /*!< 40353 (int FIX.5.0SP2) The method used when calculating the inflation index level from multiple points. The most common is linear method.*/ \
X(LegPaymentStreamInflationIndexSource,                                  40354) /*!< 40354 (int FIX.5.0SP2) The inflation index reference source. */ \
X(LegPaymentStreamInflationPublicationSource,                            40355) /*!< 40355 (String FIX.5.0SP2) The publication source, such as relevant web site, news publication or a government body, where inflation information is obtained.*/ \
X(LegPaymentStreamInflationInitialIndexLevel,                            40356) /*!< 40356 (float FIX.5.0SP2) Initial known index level for the first calculation period.*/ \
X(LegPaymentStreamInflationFallbackBondApplicable,                       40357) /*!< 40357 (Boolean FIX.5.0SP2) Indicates whether a fallback bond as defined in the 2006 ISDA Inflation Derivatives Definitions, sections 1.3 and 1.8, is applicable or not. If not specified, the default value is "Y" (True/Yes).*/ \
X(LegPaymentStreamFRADiscounting,                                        40358) /*!< 40358 (int FIX.5.0SP2) The method of Forward Rate Agreement (FRA) discounting, if any, that will apply.*/ \
X(LegPaymentStreamNonDeliverableRefCurrency,                             40359) /*!< 40359 (Currency FIX.5.0SP2) Non-deliverable settlement reference currency.  Uses ISO 4217 currency codes.*/ \
X(LegPaymentStreamNonDeliverableFixingDatesBusinessDayConvention,        40360) /*!< 40360 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's fixing date for the non-deliverable settlement terms. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentStreamNonDeliverableFixingDatesBusinessCenter,               40361) /*!< 40361 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's fixing date for the non-deliverable terms, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(LegPaymentStreamNonDeliverableFixingDatesRelativeTo,                   40362) /*!< 40362 (int FIX.5.0SP2) Specifies the anchor date when the non-deliverable fixing dates are relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamNonDeliverableFixingDatesOffsetPeriod,                 40363) /*!< 40363 (int FIX.5.0SP2) Time unit multiplier for the relative non-deliverable fixing date offset.*/ \
X(LegPaymentStreamNonDeliverableFixingDatesOffsetUnit,                   40364) /*!< 40364 (String FIX.5.0SP2) Time unit associated with the relative non-deliverable fixing date offset.*/ \
X(LegPaymentStreamNonDeliverableFixingDatesOffsetDayType,                40365) /*!< 40365 (int FIX.5.0SP2) Specifies the day type of the relative non-deliverable fixing date offset.*/ \
X(LegSettlRateFallbackRateSource,                                        40366) /*!< 40366 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(NoLegNonDeliverableFixingDates,                                        40367) /*!< 40367 (NumInGroup FIX.5.0SP2) Number of fixing dates in the repeating group.*/ \
X(LegNonDeliverableFixingDate,                                           40368) /*!< 40368 (LocalMktDate FIX.5.0SP2) The non-deliverable fixing date.  Type of date is specified in LegNonDeliverableFixingDateType(40369).*/ \
X(LegNonDeliverableFixingDateType,                                       40369) /*!< 40369 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(LegSettlRateFallbackReferencePage,                                     40370) /*!< 40370 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
When LegSettlRateFallbackRateSource(40366) = 3(ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(PaymentStreamNonDeliverableSettlRateSource,                            40371) /*!< 40371 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(PaymentStreamNonDeliverableSettlReferencePage,                         40372) /*!< 40372 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
When PaymentStreamNonDeliverableSettlRateSource(40371) = 3(ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(SettlRateFallbackRateSource,                                           40373) /*!< 40373 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(NoLegPaymentSchedules,                                                 40374) /*!< 40374 (NumInGroup FIX.5.0SP2) Number of swap schedules in the repeating group*/ \
X(LegPaymentScheduleType,                                                40375) /*!< 40375 (int FIX.5.0SP2) Specifies the type of schedule. */ \
X(LegPaymentScheduleStubType,                                            40376) /*!< 40376 (int FIX.5.0SP2) Indicates to which stub this schedule applies. */ \
X(LegPaymentScheduleStartDateUnadjusted,                                 40377) /*!< 40377 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the value is adjusted, or calculated if a future value notional for certain non-deliverable interest rate swaps (e.g. Brazillian Real (BRL) vs. CETIP Interbank Deposit Rate (CDI)), or the start date of a cashflow payment.*/ \
X(LegPaymentScheduleEndDateUnadjusted,                                   40378) /*!< 40378 (LocalMktDate FIX.5.0SP2) The unadjusted end date of a cashflow payment.*/ \
X(LegPaymentSchedulePaySide,                                             40379) /*!< 40379 (int FIX.5.0SP2) The side of the party paying the step schedule.*/ \
X(LegPaymentScheduleReceiveSide,                                         40380) /*!< 40380 (int FIX.5.0SP2) The side of the party receiving the step schedule.*/ \
X(LegPaymentScheduleNotional,                                            40381) /*!< 40381 (Amt FIX.5.0SP2) The notional value for this step schedule, or amount of a cashflow payment.*/ \
X(LegPaymentScheduleCurrency,                                            40382) /*!< 40382 (Currency FIX.5.0SP2) The currency for this step schedule.  Uses ISO 4217 currency codes.*/ \
X(LegPaymentScheduleRate,                                                40383) /*!< 40383 (Percentage FIX.5.0SP2) The rate value for this step schedule.*/ \
X(LegPaymentScheduleRateMultiplier,                                      40384) /*!< 40384 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(LegPaymentScheduleRateSpread,                                          40385) /*!< 40385 (PriceOffset FIX.5.0SP2) The spread value for this step schedule.*/ \
X(LegPaymentScheduleRateSpreadPositionType,                              40386) /*!< 40386 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or a short position.*/ \
X(LegPaymentScheduleRateTreatment,                                       40387) /*!< 40387 (int FIX.5.0SP2) Specifies the yield calculation treatment for the step schedule.*/ \
X(LegPaymentScheduleFixedAmount,                                         40388) /*!< 40388 (Amt FIX.5.0SP2) The explicit payment amount for this step schedule.*/ \
X(LegPaymentScheduleFixedCurrency,                                       40389) /*!< 40389 (Currency FIX.5.0SP2) The currency of the fixed amount.  Uses ISO 4217 currency codes.*/ \
X(LegPaymentScheduleStepFrequencyPeriod,                                 40390) /*!< 40390 (int FIX.5.0SP2) Time unit multiplier for the step frequency.*/ \
X(LegPaymentScheduleStepFrequencyUnit,                                   40391) /*!< 40391 (String FIX.5.0SP2) Time unit associated with the step frequency. */ \
X(LegPaymentScheduleStepOffsetValue,                                     40392) /*!< 40392 (Amt FIX.5.0SP2) The explicit amount that the notional changes on each step date. This can be a positive or negative amount.*/ \
X(LegPaymentScheduleStepRate,                                            40393) /*!< 40393 (Percentage FIX.5.0SP2) The percentage by which the notional changes on each step date. The percentage is either a percentage applied to the initial notional amount or the previous outstanding notional, depending on the value specified in LegPaymentScheduleStepRelativeTo(40395). The percentage can be either positive or negative.*/ \
X(LegPaymentScheduleStepOffsetRate,                                      40394) /*!< 40394 (Percentage FIX.5.0SP2) The explicit amount that the rate changes on each step date. This can be a positive or negative value.*/ \
X(LegPaymentScheduleStepRelativeTo,                                      40395) /*!< 40395 (int FIX.5.0SP2) Specifies whether the LegPaymentScheduleStepRate(40393) or LegPaymentScheduleStepOffsetValue(40392) should be applied to the initial notional or the previous notional in order to calculate the notional step change amount.*/ \
X(LegPaymentScheduleFixingDateUnadjusted,                                40396) /*!< 40396 (LocalMktDate FIX.5.0SP2) The unadjusted fixing date.*/ \
X(LegPaymentScheduleWeight,                                              40397) /*!< 40397 (float FIX.5.0SP2) Floating rate observation weight for cashflow payment.*/ \
X(LegPaymentScheduleFixingDateRelativeTo,                                40398) /*!< 40398 (int FIX.5.0SP2) Specifies the anchor date when the fixing date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values. */ \
X(LegPaymentScheduleFixingDateBusinessDayConvention,                     40399) /*!< 40399 (int FIX.5.0SP2) The business day convention used to adjust the payment schedule's fixing date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentScheduleFixingDateBusinessCenter,                            40400) /*!< 40400 (String FIX.5.0SP2) The business center calendar used to adjust the payment schedule's fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegPaymentScheduleFixingDateOffsetPeriod,                              40401) /*!< 40401 (int FIX.5.0SP2) Time unit multiplier for the relative fixing date offset.*/ \
X(LegPaymentScheduleFixingDateOffsetUnit,                                40402) /*!< 40402 (String FIX.5.0SP2) Time unit associated with the relative fixing date offset.*/ \
X(LegPaymentScheduleFixingDateOffsetDayType,                             40403) /*!< 40403 (int FIX.5.0SP2) Specifies the day type of the relative fixing date offset.*/ \
X(LegPaymentScheduleFixingDateAdjusted,                                  40404) /*!< 40404 (LocalMktDate FIX.5.0SP2) The adjusted fixing date.*/ \
X(LegPaymentScheduleFixingTime,                                          40405) /*!< 40405 (LocalMktTime FIX.5.0SP2) The fxing time associated with the step schedule.*/ \
X(LegPaymentScheduleFixingTimeBusinessCenter,                            40406) /*!< 40406 (String FIX.5.0SP2) Business center for determining fixing time.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegPaymentScheduleInterimExchangePaymentDateRelativeTo,                40407) /*!< 40407 (int FIX.5.0SP2) Specifies the anchor date when the interim exchange payment date is relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentScheduleInterimExchangeDatesBusinessDayConvention,           40408) /*!< 40408 (int FIX.5.0SP2) The business day convention used to adjust the payment schedule's interim exchange date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPaymentScheduleInterimExchangeDatesBusinessCenter,                  40409) /*!< 40409 (String FIX.5.0SP2) The business center calendar used to adjust the payment schedule's interim exchange date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(LegPaymentScheduleInterimExchangeDatesOffsetPeriod,                    40410) /*!< 40410 (int FIX.5.0SP2) Time unit multiplier for the relative interim exchange date offset.*/ \
X(LegPaymentScheduleInterimExchangeDatesOffsetUnit,                      40411) /*!< 40411 (String FIX.5.0SP2) Time unit associated with the relative interim exchange date offset.*/ \
X(LegPaymentScheduleInterimExchangeDatesOffsetDayType,                   40412) /*!< 40412 (int FIX.5.0SP2) Specifies the day type of the relative interim exchange date offset.*/ \
X(LegPaymentScheduleInterimExchangeDateAdjusted,                         40413) /*!< 40413 (LocalMktDate FIX.5.0SP2) The adjusted interim exchange date.*/ \
X(NoLegPaymentScheduleRateSources,                                       40414) /*!< 40414 (NumInGroup FIX.5.0SP2) Number of rate sources in the repeating group*/ \
X(LegPaymentScheduleRateSource,                                          40415) /*!< 40415 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(LegPaymentScheduleRateSourceType,                                      40416) /*!< 40416 (int FIX.5.0SP2) Rate source type.*/ \
X(LegPaymentScheduleReferencePage,                                       40417) /*!< 40417 (String FIX.5.0SP2) Identifies the reference "page" from the rate source.  \
 \
 \
 \
For FX, the reference page to the spot rate to be used for the reference FX spot rate. \
 \
 \
 \
When RateSource(1446) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(NoLegPaymentStubs,                                                     40418) /*!< 40418 (NumInGroup FIX.5.0SP2) Number of stubs in the repeating group*/ \
X(LegPaymentStubType,                                                    40419) /*!< 40419 (int FIX.5.0SP2) Stub type.*/ \
X(LegPaymentStubLength,                                                  40420) /*!< 40420 (int FIX.5.0SP2) Optional indication whether stub is shorter or longer than the regular swap period.*/ \
X(LegPaymentStubRate,                                                    40421) /*!< 40421 (Percentage FIX.5.0SP2) The agreed upon fixed rate for this stub.*/ \
X(LegPaymentStubFixedAmount,                                             40422) /*!< 40422 (Amt FIX.5.0SP2) A fixed payment amount for the stub.*/ \
X(LegPaymentStubFixedCurrency,                                           40423) /*!< 40423 (Currency FIX.5.0SP2) The currency of the fixed payment amount.  Uses ISO 4217 currency codes.*/ \
X(LegPaymentStubIndex,                                                   40424) /*!< 40424 (String FIX.5.0SP2) The stub floating rate index.*/ \
X(LegPaymentStubIndexSource,                                             40425) /*!< 40425 (int FIX.5.0SP2) The source for the stub floating rate index.*/ \
X(LegPaymentStubIndexCurvePeriod,                                        40426) /*!< 40426 (int FIX.5.0SP2) Time unit multiplier for the floating rate index.*/ \
X(LegPaymentStubIndexCurveUnit,                                          40427) /*!< 40427 (String FIX.5.0SP2) Time unit associated with the floating rate index.*/ \
X(LegPaymentStubIndexRateMultiplier,                                     40428) /*!< 40428 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(LegPaymentStubIndexRateSpread,                                         40429) /*!< 40429 (PriceOffset FIX.5.0SP2) Spread from floating rate index.*/ \
X(LegPaymentStubIndexRateSpreadPositionType,                             40430) /*!< 40430 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or a short position.*/ \
X(LegPaymentStubIndexRateTreatment,                                      40431) /*!< 40431 (int FIX.5.0SP2) Specifies the yield calculation treatment for the stub index.*/ \
X(LegPaymentStubIndexCapRate,                                            40432) /*!< 40432 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(LegPaymentStubIndexCapRateBuySide,                                     40433) /*!< 40433 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(LegPaymentStubIndexCapRateSellSide,                                    40434) /*!< 40434 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(LegPaymentStubIndexFloorRate,                                          40435) /*!< 40435 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(LegPaymentStubIndexFloorRateBuySide,                                   40436) /*!< 40436 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(LegPaymentStubIndexFloorRateSellSide,                                  40437) /*!< 40437 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(LegPaymentStubIndex2,                                                  40438) /*!< 40438 (String FIX.5.0SP2) The second stub floating rate index.*/ \
X(LegPaymentStubIndex2Source,                                            40439) /*!< 40439 (int FIX.5.0SP2) The source for the second stub floating rate index.*/ \
X(LegPaymentStubIndex2CurvePeriod,                                       40440) /*!< 40440 (int FIX.5.0SP2) Secondary time unit multiplier for the stub floating rate index curve.*/ \
X(LegPaymentStubIndex2CurveUnit,                                         40441) /*!< 40441 (String FIX.5.0SP2) Secondary time unit associated with the stub floating rate index curve.*/ \
X(LegPaymentStubIndex2RateMultiplier,                                    40442) /*!< 40442 (float FIX.5.0SP2) A rate multiplier to apply to the second floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(LegPaymentStubIndex2RateSpread,                                        40443) /*!< 40443 (PriceOffset FIX.5.0SP2) Spread from the second floating rate index.*/ \
X(LegPaymentStubIndex2RateSpreadPositionType,                            40444) /*!< 40444 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or a short position.*/ \
X(LegPaymentStubIndex2RateTreatment,                                     40445) /*!< 40445 (int FIX.5.0SP2) Specifies the yield calculation treatment for the second stub index.*/ \
X(LegPaymentStubIndex2CapRate,                                           40446) /*!< 40446 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the second floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(LegPaymentStubIndex2FloorRate,                                         40447) /*!< 40447 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the second floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(NoLegProvisions,                                                       40448) /*!< 40448 (NumInGroup FIX.5.0SP2) Number of provisions in the repeating group.*/ \
X(LegProvisionType,                                                      40449) /*!< 40449 (int FIX.5.0SP2) Type of provisions.*/ \
X(LegProvisionDateUnadjusted,                                            40450) /*!< 40450 (LocalMktDate FIX.5.0SP2) The unadjusted date of the provision.*/ \
X(LegProvisionDateBusinessDayConvention,                                 40451) /*!< 40451 (int FIX.5.0SP2) The business day convention used to adjust the instrument leg's provision's date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegProvisionDateBusinessCenter,                                        40452) /*!< 40452 (String FIX.5.0SP2) The business center calendar used to adjust the instrument leg's provision's date, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionDateAdjusted,                                              40453) /*!< 40453 (LocalMktDate FIX.5.0SP2) The adjusted date of the provision.*/ \
X(LegProvisionDateTenorPeriod,                                           40454) /*!< 40454 (int FIX.5.0SP2) Time unit multiplier for the leg provision's tenor period.*/ \
X(LegProvisionDateTenorUnit,                                             40455) /*!< 40455 (String FIX.5.0SP2) Time unit associated with the leg provision's tenor period.*/ \
X(LegProvisionCalculationAgent,                                          40456) /*!< 40456 (int FIX.5.0SP2) Used to identify the calculation agent.  The calculation agent may be identified in LegProvisionCalculationAgent(40456) or in the ProvisionParties component.*/ \
X(LegProvisionOptionSinglePartyBuyerSide,                                40457) /*!< 40457 (int FIX.5.0SP2) If optional early termination is not available to both parties then this component identifies the buyer of the option through its side of the trade.*/ \
X(LegProvisionOptionSinglePartySellerSide,                               40458) /*!< 40458 (int FIX.5.0SP2) If optional early termination is not available to both parties then this component identifies the seller of the option through its side of the trade.*/ \
X(LegProvisionOptionExerciseStyle,                                       40459) /*!< 40459 (int FIX.5.0SP2) The instrument provision option exercise style.*/ \
X(LegProvisionOptionExerciseMultipleNotional,                            40460) /*!< 40460 (Amt FIX.5.0SP2) A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.*/ \
X(LegProvisionOptionExerciseMinimumNotional,                             40461) /*!< 40461 (Amt FIX.5.0SP2) The minimum notional amount that can be exercised on a given exercise date.*/ \
X(LegProvisionOptionExerciseMaximumNotional,                             40462) /*!< 40462 (Amt FIX.5.0SP2) The maximum notional amount that can be exercised on a given exercise date.*/ \
X(LegProvisionOptionMinimumNumber,                                       40463) /*!< 40463 (int FIX.5.0SP2) The minimum number of options that can be exercised on a given exercise date.*/ \
X(LegProvisionOptionMaximumNumber,                                       40464) /*!< 40464 (int FIX.5.0SP2) The maximum number of options that can be exercised on a given exercise date. If the number is not specified, it means that the maximum number of options corresponds to the remaining unexercised options.*/ \
X(LegProvisionOptionExerciseConfirmation,                                40465) /*!< 40465 (Boolean FIX.5.0SP2) Used to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.*/ \
X(LegProvisionCashSettlMethod,                                           40466) /*!< 40466 (int FIX.5.0SP2) An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (e).*/ \
X(LegProvisionCashSettlCurrency,                                         40467) /*!< 40467 (Currency FIX.5.0SP2) Specifies the currency of settlement.  Uses ISO 4217 currency codes.*/ \
X(LegProvisionCashSettlCurrency2,                                        40468) /*!< 40468 (Currency FIX.5.0SP2) Specifies the currency of settlement for a cross-currency provision.  Uses ISO 4217 currency codes.*/ \
X(LegProvisionCashSettlQuoteType,                                        40469) /*!< 40469 (int FIX.5.0SP2) Identifies the type of quote to be used.  */ \
X(LegProvisionCashSettlQuoteSource,                                      40470) /*!< 40470 (int FIX.5.0SP2) Identifies the source of quote information. */ \
X(BusinessCenter,                                                        40471) /*!< 40471 (String FIX.5.0SP2) A business center whose calendar is used for date adjustment, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionText,                                                      40472) /*!< 40472 (String FIX.5.0SP2) Free form text to specify additional information or enumeration description when a standard value does not apply.*/ \
X(NoLegProvisionCashSettlPaymentDates,                                   40473) /*!< 40473 (NumInGroup FIX.5.0SP2) Number of provision cash settlement payment dates in the repeating group.*/ \
X(LegProvisionCashSettlPaymentDate,                                      40474) /*!< 40474 (LocalMktDate FIX.5.0SP2) The cash settlement payment date, unadjusted or adjusted depending on LegProvisionCashSettlPaymentDateType(40521).*/ \
X(LegProvisionCashSettlPaymentDateType,                                  40475) /*!< 40475 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(LegProvisionOptionExerciseBusinessDayConvention,                       40476) /*!< 40476 (int FIX.5.0SP2) The business day convention used to adjust the instrument leg's provision's option exercise date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegProvisionOptionExerciseBusinessCenter,                              40477) /*!< 40477 (String FIX.5.0SP2) The business center calendar used to adjust the instrument leg's provision's option exercise date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionOptionExerciseEarliestDateOffsetPeriod,                    40478) /*!< 40478 (int FIX.5.0SP2) Time unit multiplier for the interval to the first (and possibly only) exercise date in the exercise period.*/ \
X(LegProvisionOptionExerciseEarliestDateOffsetUnit,                      40479) /*!< 40479 (String FIX.5.0SP2) Time unit associated with the interval to the first (and possibly only) exercise date in the exercise period.*/ \
X(LegProvisionOptionExerciseFrequencyPeriod,                             40480) /*!< 40480 (int FIX.5.0SP2) Time unit multiplier for subsequent exercise dates in the exercise period following the earliest exercise date. An interval of 1 day should be used to indicate an American style exercise period.*/ \
X(LegProvisionOptionExerciseFrequencyUnit,                               40481) /*!< 40481 (String FIX.5.0SP2) Time unit associated with subsequent exercise dates in the exercise period following the earliest exercise date.*/ \
X(LegProvisionOptionExerciseStartDateUnadjusted,                         40482) /*!< 40482 (LocalMktDate FIX.5.0SP2) The unadjusted first day of the exercise period for an American style option.*/ \
X(LegProvisionOptionExerciseStartDateRelativeTo,                         40483) /*!< 40483 (int FIX.5.0SP2) Specifies the anchor date when the option exercise start date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegProvisionOptionExerciseStartDateOffsetPeriod,                       40484) /*!< 40484 (int FIX.5.0SP2) Time unit multiplier for the relative option exercise start date offset.*/ \
X(LegProvisionOptionExerciseStartDateOffsetUnit,                         40485) /*!< 40485 (String FIX.5.0SP2) Time unit associated with the relative option exercise start date offset.*/ \
X(LegProvisionOptionExerciseStartDateOffsetDayType,                      40486) /*!< 40486 (int FIX.5.0SP2) Specifies the day type of the provision's relative option exercise start date offset.*/ \
X(LegProvisionOptionExerciseStartDateAdjusted,                           40487) /*!< 40487 (LocalMktDate FIX.5.0SP2) The adjusted first day of the exercise period for an American style option.*/ \
X(LegProvisionOptionExercisePeriodSkip,                                  40488) /*!< 40488 (int FIX.5.0SP2) The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.*/ \
X(LegProvisionOptionExerciseBoundsFirstDateUnadjusted,                   40489) /*!< 40489 (LocalMktDate FIX.5.0SP2) The unadjusted first date of a schedule. This can be used to restrict the range of exercise dates when they are relative.*/ \
X(LegProvisionOptionExerciseBoundsLastDateUnadjusted,                    40490) /*!< 40490 (LocalMktDate FIX.5.0SP2) The unadjusted last date of a schedule. This can be used to restrict the range of exercise dates when they are relative.*/ \
X(LegProvisionOptionExerciseEarliestTime,                                40491) /*!< 40491 (LocalMktTime FIX.5.0SP2) The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) (i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date, in the case of an American option.*/ \
X(LegProvisionOptionExerciseEarliestTimeBusinessCenter,                  40492) /*!< 40492 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's earliest time for notice of exercise.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionOptionExerciseLatestTime,                                  40493) /*!< 40493 (LocalMktTime FIX.5.0SP2) For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller's agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.*/ \
X(LegProvisionOptionExerciseLatestTimeBusinessCenter,                    40494) /*!< 40494 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's latest time for notice of exercise.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegProvisionOptionExerciseFixedDates,                                40495) /*!< 40495 (NumInGroup FIX.5.0SP2) Number of provision option exercise fixed dates in the repeating group.*/ \
X(LegProvisionOptionExerciseFixedDate,                                   40496) /*!< 40496 (LocalMktDate FIX.5.0SP2) A predetermined option exercise date unadjusted or adjusted depending on LegProvisionOptionExerciseFixedDateType(40497).*/ \
X(LegProvisionOptionExerciseFixedDateType,                               40497) /*!< 40497 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(LegProvisionOptionExpirationDateUnadjusted,                            40498) /*!< 40498 (LocalMktDate FIX.5.0SP2) The unadjusted last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.*/ \
X(LegProvisionOptionExpirationDateBusinessDayConvention,                 40499) /*!< 40499 (int FIX.5.0SP2) The business day convention used to adjust the instrument leg's provision's option expiration date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegProvisionOptionExpirationDateBusinessCenter,                        40500) /*!< 40500 (String FIX.5.0SP2) The business center calendar used to adjust the instrument leg's provision's option expiration date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionOptionExpirationDateRelativeTo,                            40501) /*!< 40501 (int FIX.5.0SP2) Specifies the anchor date when the option expiration date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegProvisionOptionExpirationDateOffsetPeriod,                          40502) /*!< 40502 (int FIX.5.0SP2) Time unit multiplier for the relative option expiration date offset.*/ \
X(LegProvisionOptionExpirationDateOffsetUnit,                            40503) /*!< 40503 (String FIX.5.0SP2) Time unit associated with the relative option expiration date offset.*/ \
X(LegProvisionOptionExpirationDateOffsetDayType,                         40504) /*!< 40504 (int FIX.5.0SP2) Specifies the day type of the provision's relative option expiration date offset.*/ \
X(LegProvisionOptionExpirationDateAdjusted,                              40505) /*!< 40505 (LocalMktDate FIX.5.0SP2) The adjusted last date within an exercise period for an American style option. For a European style option it is the only date within the exercise period.*/ \
X(LegProvisionOptionExpirationTime,                                      40506) /*!< 40506 (LocalMktTime FIX.5.0SP2) The latest time for exercise on the expiration date.*/ \
X(LegProvisionOptionExpirationTimeBusinessCenter,                        40507) /*!< 40507 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's latest exercise time on expiration date.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionOptionRelevantUnderlyingDateUnadjusted,                    40508) /*!< 40508 (LocalMktDate FIX.5.0SP2) The unadjusted date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).*/ \
X(LegProvisionOptionRelevantUnderlyingDateBusinessDayConvention,         40509) /*!< 40509 (int FIX.5.0SP2) The business day convention used to adjust the instrument leg's provision's option relevant underlying date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegProvisionOptionRelevantUnderlyingDateBusinessCenter,                40510) /*!< 40510 (String FIX.5.0SP2) The business center calendar used to adjust the instrument leg's provision's option underlying date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionOptionRelevantUnderlyingDateRelativeTo,                    40511) /*!< 40511 (int FIX.5.0SP2) Specifies the anchor date when the date relevant to the underlying trade on exercise is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegProvisionOptionRelevantUnderlyingDateOffsetPeriod,                  40512) /*!< 40512 (int FIX.5.0SP2) Time unit multiplier for the relative option relevant underlying date offset.*/ \
X(LegProvisionOptionRelevantUnderlyingDateOffsetUnit,                    40513) /*!< 40513 (String FIX.5.0SP2) Time unit associated with the relative option relevant underlying date offset.*/ \
X(LegProvisionOptionRelevantUnderlyingDateOffsetDayType,                 40514) /*!< 40514 (int FIX.5.0SP2) Specifies the day type of the provision's relative option relevant underlying date offset.*/ \
X(LegProvisionOptionRelevantUnderlyingDateAdjusted,                      40515) /*!< 40515 (LocalMktDate FIX.5.0SP2) The adjusted date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).*/ \
X(LegProvisionCashSettlPaymentDateBusinessDayConvention,                 40516) /*!< 40516 (int FIX.5.0SP2) The business day convention used to adjust the provisional cash settlement payment's termination, or relative termination, date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegProvisionCashSettlPaymentDateBusinessCenter,                        40517) /*!< 40517 (String FIX.5.0SP2) The business center calendar used to adjust the provisional cash settlement payment's termination, or relative termination, date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionCashSettlPaymentDateRelativeTo,                            40518) /*!< 40518 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement payment date is relative to an anchor date.   \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegProvisionCashSettlPaymentDateOffsetPeriod,                          40519) /*!< 40519 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement payment date offset.*/ \
X(LegProvisionCashSettlPaymentDateOffsetUnit,                            40520) /*!< 40520 (String FIX.5.0SP2) Time unit associated with the relative cash settlement payment date offset.*/ \
X(LegProvisionCashSettlPaymentDateOffsetDayType,                         40521) /*!< 40521 (int FIX.5.0SP2) Specifies the day type of the provision's relative cash settlement payment date offset.*/ \
X(LegProvisionCashSettlPaymentDateRangeFirst,                            40522) /*!< 40522 (LocalMktDate FIX.5.0SP2) The first date in range when a settlement date range is provided.*/ \
X(LegProvisionCashSettlPaymentDateRangeLast,                             40523) /*!< 40523 (LocalMktDate FIX.5.0SP2) The last date in range when a settlement date range is provided.*/ \
X(LegProvisionCashSettlValueTime,                                        40524) /*!< 40524 (LocalMktTime FIX.5.0SP2) A time specified in 24-hour format, e.g. 11am would be represented as 11:00:00. The time of the cash settlement valuation date when the cash settlement amount will be determined according to the cash settlement method if the parties have not otherwise been able to agree to the cash settlement amount.*/ \
X(LegProvisionCashSettlValueTimeBusinessCenter,                          40525) /*!< 40525 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's cash settlement valuation time.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionCashSettlValueDateBusinessDayConvention,                   40526) /*!< 40526 (int FIX.5.0SP2) The business day convention used to adjust the provision's cash settlement valuation date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegProvisionCashSettlValueDateBusinessCenter,                          40527) /*!< 40527 (String FIX.5.0SP2) The business center calendar used to adjust the provision's cash settlement valuation date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionCashSettlValueDateRelativeTo,                              40528) /*!< 40528 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement value date is relative to an anchor date.   \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegProvisionCashSettlValueDateOffsetPeriod,                            40529) /*!< 40529 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement value date offset.*/ \
X(LegProvisionCashSettlValueDateOffsetUnit,                              40530) /*!< 40530 (String FIX.5.0SP2) Time unit associated with the relative cash settlement value date offset.*/ \
X(LegProvisionCashSettlValueDateOffsetDayType,                           40531) /*!< 40531 (int FIX.5.0SP2) Specifies the day type of the provision's relative cash settlement value date offset.*/ \
X(LegProvisionCashSettlValueDateAdjusted,                                40532) /*!< 40532 (LocalMktDate FIX.5.0SP2) The adjusted cash settlement value date.*/ \
X(NoLegProvisionPartyIDs,                                                40533) /*!< 40533 (NumInGroup FIX.5.0SP2) Number of parties identified in the contract provision.*/ \
X(LegProvisionPartyID,                                                   40534) /*!< 40534 (String FIX.5.0SP2) The party identifier/code for the payment settlement party. */ \
X(LegProvisionPartyIDSource,                                             40535) /*!< 40535 (char FIX.5.0SP2) Identifies the class or source of LegProvisionPartyID(40534). */ \
X(LegProvisionPartyRole,                                                 40536) /*!< 40536 (int FIX.5.0SP2) Identifies the type or role of LegProvisionPartyID(40534) specified. */ \
X(NoLegProvisionPartySubIDs,                                             40537) /*!< 40537 (NumInGroup FIX.5.0SP2) Number of sub-party IDs to be reported for the party.*/ \
X(LegProvisionPartySubID,                                                40538) /*!< 40538 (String FIX.5.0SP2) Party sub-identifier, if applicable, for LegProvisionPartyRole(40536). */ \
X(LegProvisionPartySubIDType,                                            40539) /*!< 40539 (int FIX.5.0SP2) The type of LegProvisionPartySubID(40538) value. */ \
X(NoUnderlyingStreams,                                                   40540) /*!< 40540 (NumInGroup FIX.5.0SP2) Number of swap streams in the repeating group.*/ \
X(UnderlyingStreamType,                                                  40541) /*!< 40541 (int FIX.5.0SP2) Type of swap stream.*/ \
X(UnderlyingStreamDesc,                                                  40542) /*!< 40542 (String FIX.5.0SP2) A short descriptive name given to payment stream. Eg. CDS, Fixed, Float, Float2, GBP. The description has no intrinsic meaning but should be arbitrarily chosen by the remitter as a reference.*/ \
X(UnderlyingStreamPaySide,                                               40543) /*!< 40543 (int FIX.5.0SP2) The side of the party paying the stream.*/ \
X(UnderlyingStreamReceiveSide,                                           40544) /*!< 40544 (int FIX.5.0SP2) The side of the party receiving the stream.*/ \
X(UnderlyingStreamNotional,                                              40545) /*!< 40545 (Amt FIX.5.0SP2) Notional, or initial notional value for the payment stream. Use SwapSchedule for steps.*/ \
X(UnderlyingStreamCurrency,                                              40546) /*!< 40546 (Currency FIX.5.0SP2) Specifies the currency the UnderlyingStreamNotional(40545) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingStreamText,                                                  40547) /*!< 40547 (String FIX.5.0SP2) Free form text to specify additional information or enumeration description when a standard value does not apply.*/ \
X(UnderlyingStreamTerminationDateUnadjusted,                             40548) /*!< 40548 (LocalMktDate FIX.5.0SP2) The unadjusted termination date.*/ \
X(UnderlyingStreamTerminationDateBusinessDayConvention,                  40549) /*!< 40549 (int FIX.5.0SP2) The business day convention used to adjust the underlying instrument's stream's termination, or relative termination, date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingStreamTerminationDateBusinessCenter,                         40550) /*!< 40550 (String FIX.5.0SP2) The business center calendar used to adjust the underlying instrument's stream's termination, or relative termination, date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingStreamTerminationDateRelativeTo,                             40551) /*!< 40551 (int FIX.5.0SP2) Specifies the anchor date when the termination date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingStreamTerminationDateOffsetPeriod,                           40552) /*!< 40552 (int FIX.5.0SP2) Time unit multiplier for the relative termination date offset.*/ \
X(UnderlyingStreamTerminationDateOffsetUnit,                             40553) /*!< 40553 (String FIX.5.0SP2) Time unit associated with the relative termination date offset.*/ \
X(UnderlyingStreamTerminationDateOffsetDayType,                          40554) /*!< 40554 (int FIX.5.0SP2) Specifies the day type of the relative termination date offset.*/ \
X(UnderlyingStreamTerminationDateAdjusted,                               40555) /*!< 40555 (LocalMktDate FIX.5.0SP2) The adjusted termination date.*/ \
X(UnderlyingStreamCalculationPeriodBusinessDayConvention,                40556) /*!< 40556 (int FIX.5.0SP2) The business day convention used to adjust the calculation periods. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingStreamCalculationPeriodBusinessCenter,                       40557) /*!< 40557 (String FIX.5.0SP2) The business center calendar used to adjust the calculation periods, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingStreamFirstPeriodStartDateUnadjusted,                        40558) /*!< 40558 (LocalMktDate FIX.5.0SP2) The unadjusted first calculation period start date if before the effective date.*/ \
X(UnderlyingStreamFirstPeriodStartDateBusinessDayConvention,             40559) /*!< 40559 (int FIX.5.0SP2) The business day convention used to adjust the underlying instrument's stream's first calculation period start date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingStreamFirstPeriodStartDateBusinessCenter,                    40560) /*!< 40560 (String FIX.5.0SP2) The business center calendar used to adjust the underlying instrument's stream's first calculation period start date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingStreamFirstPeriodStartDateAdjusted,                          40561) /*!< 40561 (LocalMktDate FIX.5.0SP2) The adjusted first calculation period start date, if it is before the effective date.*/ \
X(UnderlyingStreamFirstRegularPeriodStartDateUnadjusted,                 40562) /*!< 40562 (LocalMktDate FIX.5.0SP2) The unadjusted first start date of the regular calculation period, if there is an initial stub period.*/ \
X(UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted,               40563) /*!< 40563 (LocalMktDate FIX.5.0SP2) The unadjusted end date of the initial compounding period.*/ \
X(UnderlyingStreamLastRegularPeriodEndDateUnadjusted,                    40564) /*!< 40564 (LocalMktDate FIX.5.0SP2) The unadjusted last regular period end date if there is a final stub period.*/ \
X(UnderlyingStreamCalculationFrequencyPeriod,                            40565) /*!< 40565 (int FIX.5.0SP2) Time unit multiplier for the frequency at which calculation period end dates occur.*/ \
X(UnderlyingStreamCalculationFrequencyUnit,                              40566) /*!< 40566 (String FIX.5.0SP2) Time unit associated with the frequency at which calculation period end dates occur.*/ \
X(UnderlyingStreamCalculationRollConvention,                             40567) /*!< 40567 (String FIX.5.0SP2) The convention for determining the sequence of end dates. It is used in conjunction with a specified frequency. Used only to override the roll convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamType,                                           40568) /*!< 40568 (int FIX.5.0SP2) Identifies the type of payment stream applicable to the swap stream associated with the underlying instrument. */ \
X(UnderlyingPaymentStreamMarketRate,                                     40569) /*!< 40569 (int FIX.5.0SP2) Used only for credit index trade. This contains the credit spread ("fair value") at which the trade was executed. The market rate varies over the life of the index depending on market conditions. This is the price of the index as quoted by trading desks.*/ \
X(UnderlyingPaymentStreamDelayIndicator,                                 40570) /*!< 40570 (Boolean FIX.5.0SP2) Applicable to credit default swaps on mortgage backed securities to specify whether payment delays are applicable to the fixed amount.  \
 \
Residential mortgage backed securities typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap.  \
 \
Commercial mortage backed securities  do not typically have a payment delay, with both payment dates (the coupon date of the reference obligation and the payment date of the synthetic swap) being on the 25th of each month.*/ \
X(UnderlyingPaymentStreamSettlCurrency,                                  40571) /*!< 40571 (Currency FIX.5.0SP2) Specifies the currency that the stream settles in (to support swaps that settle in a currency different from the notional currency).  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentStreamDayCount,                                       40572) /*!< 40572 (int FIX.5.0SP2) The day count convention used in the payment stream calculations.*/ \
X(UnderlyingPaymentStreamAccrualDays,                                    40573) /*!< 40573 (int FIX.5.0SP2) The number of days from the adjusted calculation period start date to the adjusted value date, calculated in accordance with the applicable day count fraction.*/ \
X(UnderlyingPaymentStreamDiscountType,                                   40574) /*!< 40574 (int FIX.5.0SP2) The method of calculating discounted payment amounts*/ \
X(UnderlyingPaymentStreamDiscountRate,                                   40575) /*!< 40575 (Percentage FIX.5.0SP2) Discount rate.  The rate is expressed in decimal, e.g. 5% is expressed as 0.05.*/ \
X(UnderlyingPaymentStreamDiscountRateDayCount,                           40576) /*!< 40576 (int FIX.5.0SP2) The day count convention applied to the UnderlyingPaymentStreamDiscountRate(40575).*/ \
X(UnderlyingPaymentStreamCompoundingMethod,                              40577) /*!< 40577 (int FIX.5.0SP2) Compounding Method.*/ \
X(UnderlyingPaymentStreamInitialPrincipalExchangeIndicator,              40578) /*!< 40578 (Boolean FIX.5.0SP2) Indicates whether there is an initial exchange of principal on the effective date.*/ \
X(UnderlyingPaymentStreamInterimPrincipalExchangeIndicator,              40579) /*!< 40579 (Boolean FIX.5.0SP2) Indicates whether there are intermediate or interim exchanges of principal during the term of the swap.*/ \
X(UnderlyingPaymentStreamFinalPrincipalExchangeIndicator,                40580) /*!< 40580 (Boolean FIX.5.0SP2) Indicates whether there is a final exchange of principal on the termination date.*/ \
X(UnderlyingPaymentStreamPaymentDateBusinessDayConvention,               40581) /*!< 40581 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's payment date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamPaymentDateBusinessCenter,                      40582) /*!< 40582 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's payment date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentStreamPaymentFrequencyPeriod,                         40583) /*!< 40583 (int FIX.5.0SP2) Time unit multiplier for the frequency of payments.*/ \
X(UnderlyingPaymentStreamPaymentFrequencyUnit,                           40584) /*!< 40584 (String FIX.5.0SP2) Time unit associated with the frequency of payments.*/ \
X(UnderlyingPaymentStreamPaymentRollConvention,                          40585) /*!< 40585 (String FIX.5.0SP2) The convention for determining the sequence of end dates. It is used in conjunction with a specified frequency. Used only to override the roll convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamFirstPaymentDateUnadjusted,                     40586) /*!< 40586 (LocalMktDate FIX.5.0SP2) The unadjusted first payment date.*/ \
X(UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted,               40587) /*!< 40587 (LocalMktDate FIX.5.0SP2) The unadjusted last regular payment date.*/ \
X(UnderlyingPaymentStreamPaymentDateRelativeTo,                          40588) /*!< 40588 (int FIX.5.0SP2) Specifies the anchor date when payment dates are relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamPaymentDateOffsetPeriod,                        40589) /*!< 40589 (int FIX.5.0SP2) Time unit multiplier for the relative payment date offset.*/ \
X(UnderlyingPaymentStreamPaymentDateOffsetUnit,                          40590) /*!< 40590 (String FIX.5.0SP2) Time unit associated with the relative payment date offset.*/ \
X(UnderlyingPaymentStreamPaymentDateOffsetDayType,                       40591) /*!< 40591 (int FIX.5.0SP2) Specifies the day type of the relative payment date offset.*/ \
X(UnderlyingPaymentStreamResetDateRelativeTo,                            40592) /*!< 40592 (int FIX.5.0SP2) Specifies the anchor date when the reset dates are relative to an anchor date.  \
 \
If the reset frequency is specified as daily this element must not be included.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamResetDateBusinessDayConvention,                 40593) /*!< 40593 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's reset date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamResetDateBusinessCenter,                        40594) /*!< 40594 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's reset date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentStreamResetFrequencyPeriod,                           40595) /*!< 40595 (int FIX.5.0SP2) Time unit multiplier for frequency of resets.*/ \
X(UnderlyingPaymentStreamResetFrequencyUnit,                             40596) /*!< 40596 (String FIX.5.0SP2) Time unit associated with frequency of resets.*/ \
X(UnderlyingPaymentStreamResetWeeklyRollConvention,                      40597) /*!< 40597 (String FIX.5.0SP2) Used to specify the day of the week in which the reset occurs for payments that reset on a weekly basis.  */ \
X(UnderlyingPaymentStreamInitialFixingDateRelativeTo,                    40598) /*!< 40598 (int FIX.5.0SP2) Specifies the anchor date when the initial fixing date is relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention,         40599) /*!< 40599 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's initial fixing date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamInitialFixingDateBusinessCenter,                40600) /*!< 40600 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's initial fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentStreamInitialFixingDateOffsetPeriod,                  40601) /*!< 40601 (int FIX.5.0SP2) Time unit multiplier for the relative initial fixing date offset.*/ \
X(UnderlyingPaymentStreamInitialFixingDateOffsetUnit,                    40602) /*!< 40602 (String FIX.5.0SP2) Time unit associated with the relative initial fixing date offset.*/ \
X(UnderlyingPaymentStreamInitialFixingDateOffsetDayType,                 40603) /*!< 40603 (int FIX.5.0SP2) Specifies the day type of the relative initial fixing date offset.*/ \
X(UnderlyingPaymentStreamInitialFixingDateAdjusted,                      40604) /*!< 40604 (LocalMktDate FIX.5.0SP2) The adjusted initial fixing date.*/ \
X(UnderlyingPaymentStreamFixingDateRelativeTo,                           40605) /*!< 40605 (int FIX.5.0SP2) Specifies the anchor date when the fixing date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values. */ \
X(UnderlyingPaymentStreamFixingDateBusinessDayConvention,                40606) /*!< 40606 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's fixing date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamFixingDateBusinessCenter,                       40607) /*!< 40607 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values. */ \
X(UnderlyingPaymentStreamFixingDateOffsetPeriod,                         40608) /*!< 40608 (int FIX.5.0SP2) Time unit multiplier for the relative fixing date offset.*/ \
X(UnderlyingPaymentStreamFixingDateOffsetUnit,                           40609) /*!< 40609 (String FIX.5.0SP2) Time unit associated with the relative fixing date offset.*/ \
X(UnderlyingPaymentStreamFixingDateOffsetDayType,                        40610) /*!< 40610 (int FIX.5.0SP2) Specifies the day type of the relative fixing date offset.*/ \
X(UnderlyingPaymentStreamFixingDateAdjusted,                             40611) /*!< 40611 (LocalMktDate FIX.5.0SP2) The adjusted fixing date.*/ \
X(UnderlyingPaymentStreamRateCutoffDateOffsetPeriod,                     40612) /*!< 40612 (int FIX.5.0SP2) Time unit multiplier for the relative rate cut-off date offset.*/ \
X(UnderlyingPaymentStreamRateCutoffDateOffsetUnit,                       40613) /*!< 40613 (String FIX.5.0SP2) Time unit associated with the relative rate cut-off date offset.*/ \
X(UnderlyingPaymentStreamRateCutoffDateOffsetDayType,                    40614) /*!< 40614 (int FIX.5.0SP2) Specifies the day type of the relative rate cut-off date offset.*/ \
X(UnderlyingPaymentStreamRate,                                           40615) /*!< 40615 (Percentage FIX.5.0SP2) The rate applicable to the fixed rate payment stream. */ \
X(UnderlyingPaymentStreamFixedAmount,                                    40616) /*!< 40616 (Amt FIX.5.0SP2) The underlying payment stream's fixed payment amount. In CDS an alternative to UnderlyingPaymentStreamRate(40615).*/ \
X(UnderlyingPaymentStreamRateOrAmountCurrency,                           40617) /*!< 40617 (Currency FIX.5.0SP2) Specifies the currency in which UnderlyingPaymentStreamFixedAmount(40616) or UnderlyingPaymentStreamRate(40615) is denominated.  Users ISO 4271 currency codes.*/ \
X(UnderlyingPaymentStreamFutureValueNotional,                            40618) /*!< 40618 (Amt FIX.5.0SP2) The future value notional is normally only required for certain non-deliverable interest rate swaps (e.g. Brazillian Real (BRL) vs. CETIP Interbank Deposit Rate (CDI)). The value is calculated as follows: Future Value Notional = Notional Amount * (1 + Fixed Rate) ^ (Fixed Rate Day Count Fraction). The currency is the same as the stream notional.*/ \
X(UnderlyingPaymentStreamFutureValueDateAdjusted,                        40619) /*!< 40619 (LocalMktDate FIX.5.0SP2) The adjusted value date of the future value amount.*/ \
X(UnderlyingPaymentStreamRateIndex,                                      40620) /*!< 40620 (String FIX.5.0SP2) The payment stream's floating rate index.*/ \
X(UnderlyingPaymentStreamRateIndexSource,                                40621) /*!< 40621 (int FIX.5.0SP2) The source of the payment stream floating rate index.*/ \
X(UnderlyingPaymentStreamRateIndexCurveUnit,                             40622) /*!< 40622 (String FIX.5.0SP2) Time unit associated with the underlying instrument’s floating rate index.*/ \
X(UnderlyingPaymentStreamRateIndexCurvePeriod,                           40623) /*!< 40623 (int FIX.5.0SP2) Time unit multiplier for the underlying instrument’s floating rate index.*/ \
X(UnderlyingPaymentStreamRateMultiplier,                                 40624) /*!< 40624 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(UnderlyingPaymentStreamRateSpread,                                     40625) /*!< 40625 (PriceOffset FIX.5.0SP2) Spread from floating rate index.*/ \
X(UnderlyingPaymentStreamRateSpreadPositionType,                         40626) /*!< 40626 (int FIX.5.0SP2) Identifies a short or long spread value.*/ \
X(UnderlyingPaymentStreamRateTreatment,                                  40627) /*!< 40627 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(UnderlyingPaymentStreamCapRate,                                        40628) /*!< 40628 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(UnderlyingPaymentStreamCapRateBuySide,                                 40629) /*!< 40629 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(UnderlyingPaymentStreamCapRateSellSide,                                40630) /*!< 40630 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(UnderlyingPaymentStreamFloorRate,                                      40631) /*!< 40631 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(UnderlyingPaymentStreamFloorRateBuySide,                               40632) /*!< 40632 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(UnderlyingPaymentStreamFloorRateSellSide,                              40633) /*!< 40633 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(UnderlyingPaymentStreamInitialRate,                                    40634) /*!< 40634 (Percentage FIX.5.0SP2) The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.*/ \
X(UnderlyingPaymentStreamFinalRateRoundingDirection,                     40635) /*!< 40635 (char FIX.5.0SP2) Specifies the rounding direction.*/ \
X(UnderlyingPaymentStreamFinalRatePrecision,                             40636) /*!< 40636 (int FIX.5.0SP2) Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(UnderlyingPaymentStreamAveragingMethod,                                40637) /*!< 40637 (int FIX.5.0SP2) When rate averaging is applicable, used to specify whether a weighted or unweighted average calculation method is to be used. */ \
X(UnderlyingPaymentStreamNegativeRateTreatment,                          40638) /*!< 40638 (int FIX.5.0SP2) The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(UnderlyingPaymentStreamInflationLagPeriod,                             40639) /*!< 40639 (int FIX.5.0SP2) Time unit multiplier for the inflation lag period.  The lag period is the offsetting period from the payment date which determines the reference period for which the inflation index is observed.*/ \
X(UnderlyingPaymentStreamInflationLagUnit,                               40640) /*!< 40640 (String FIX.5.0SP2) Time unit associated with the inflation lag period.*/ \
X(UnderlyingPaymentStreamInflationLagDayType,                            40641) /*!< 40641 (int FIX.5.0SP2) The inflation lag period day type.*/ \
X(UnderlyingPaymentStreamInflationInterpolationMethod,                   40642) /*!< 40642 (int FIX.5.0SP2) The method used when calculating the Inflation Index Level from multiple points - the most common is Linear.*/ \
X(UnderlyingPaymentStreamInflationIndexSource,                           40643) /*!< 40643 (int FIX.5.0SP2) The inflation index reference source. */ \
X(UnderlyingPaymentStreamInflationPublicationSource,                     40644) /*!< 40644 (String FIX.5.0SP2) The current main publication source such as relevant web site or a government body.*/ \
X(UnderlyingPaymentStreamInflationInitialIndexLevel,                     40645) /*!< 40645 (float FIX.5.0SP2) Initial known index level for the first calculation period.*/ \
X(UnderlyingPaymentStreamInflationFallbackBondApplicable,                40646) /*!< 40646 (Boolean FIX.5.0SP2) Indicates whether a fallback bond as defined in the 2006 ISDA Inflation Derivatives Definitions, sections 1.3 and 1.8, is applicable or not.  If not specified, the default value is "Y" (True/Yes).*/ \
X(UnderlyingPaymentStreamFRADiscounting,                                 40647) /*!< 40647 (int FIX.5.0SP2) The method of Forward Rate Agreement (FRA) discounting, if any, that will apply.*/ \
X(UnderlyingPaymentStreamNonDeliverableRefCurrency,                      40648) /*!< 40648 (Currency FIX.5.0SP2) The non-deliverable settlement reference currency.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention, 40649) /*!< 40649 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's fixing date for the non-deliverable terms. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter,        40650) /*!< 40650 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's fixing date for the non-deliverable terms, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo,            40651) /*!< 40651 (int FIX.5.0SP2) Specifies the anchor date when the non-deliverable fixing dates are relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod,          40652) /*!< 40652 (int FIX.5.0SP2) Time unit multiplier for the relative non-deliverable fixing date offset.*/ \
X(UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit,            40653) /*!< 40653 (String FIX.5.0SP2) Time unit associated with the relative non-deliverable fixing date offset.*/ \
X(UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType,         40654) /*!< 40654 (int FIX.5.0SP2) Specifies the day type of the relative non-deliverable fixing date offset.*/ \
X(SettlRateFallbackReferencePage,                                        40655) /*!< 40655 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
When SettlRateFallbackRateSource(40373) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(NoUnderlyingNonDeliverableFixingDates,                                 40656) /*!< 40656 (NumInGroup FIX.5.0SP2) Number of Fixing dates in the repeating group*/ \
X(UnderlyingNonDeliverableFixingDate,                                    40657) /*!< 40657 (LocalMktDate FIX.5.0SP2) The non-deliverable fixing date unadjusted or adjusted depending on UnderlyingNonDeliverableFixingDateType(40658).*/ \
X(UnderlyingNonDeliverableFixingDateType,                                40658) /*!< 40658 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(NoUnderlyingSettlRateFallbacks,                                        40659) /*!< 40659 (NumInGroup FIX.5.0SP2) Number of settlement rate fallbacks in the repeating group*/ \
X(UnderlyingSettlRatePostponementMaximumDays,                            40660) /*!< 40660 (int FIX.5.0SP2) The maximum number of days to wait for a quote from the disrupted settlement rate option before proceding to this method.*/ \
X(UnderlyingPaymentStreamNonDeliverableSettlRateSource,                  40661) /*!< 40661 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(UnderlyingSettlRatePostponementSurvey,                                 40662) /*!< 40662 (Boolean FIX.5.0SP2) Indicates whether to request a settlement rate quote from the market.*/ \
X(UnderlyingSettlRatePostponementCalculationAgent,                       40663) /*!< 40663 (int FIX.5.0SP2) Used to identify the settlement rate postponement calculation agent.*/ \
X(NoUnderlyingPaymentSchedules,                                          40664) /*!< 40664 (NumInGroup FIX.5.0SP2) Number of swap schedules in the repeating group*/ \
X(UnderlyingPaymentScheduleType,                                         40665) /*!< 40665 (int FIX.5.0SP2) Type of schedule. */ \
X(UnderlyingPaymentScheduleStubType,                                     40666) /*!< 40666 (int FIX.5.0SP2) Indicates to which stub this schedule applies. */ \
X(UnderlyingPaymentScheduleStartDateUnadjusted,                          40667) /*!< 40667 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the value is adjusted, or calculated if a future value notional for certain non-deliverable interest rate swaps (e.g. Brazillian Real (BRL) vs. CETIP Interbank Deposit Rate (CDI)), or the start date of a cashflow payment.*/ \
X(UnderlyingPaymentScheduleEndDateUnadjusted,                            40668) /*!< 40668 (LocalMktDate FIX.5.0SP2) The unadjusted end date of a cashflow payment.*/ \
X(UnderlyingPaymentSchedulePaySide,                                      40669) /*!< 40669 (int FIX.5.0SP2) The side of the party paying the step schedule.*/ \
X(UnderlyingPaymentScheduleReceiveSide,                                  40670) /*!< 40670 (int FIX.5.0SP2) The side of the party receiving the step schedule.*/ \
X(UnderlyingPaymentScheduleNotional,                                     40671) /*!< 40671 (Amt FIX.5.0SP2) The notional value for this step, or amount of a cashflow payment.*/ \
X(UnderlyingPaymentScheduleCurrency,                                     40672) /*!< 40672 (Currency FIX.5.0SP2) The currency for this step.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentScheduleRate,                                         40673) /*!< 40673 (Percentage FIX.5.0SP2) The rate value for this step.*/ \
X(UnderlyingPaymentScheduleRateMultiplier,                               40674) /*!< 40674 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(UnderlyingPaymentScheduleRateSpread,                                   40675) /*!< 40675 (PriceOffset FIX.5.0SP2) The spread value for this step.*/ \
X(UnderlyingPaymentScheduleRateSpreadPositionType,                       40676) /*!< 40676 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(UnderlyingPaymentScheduleRateTreatment,                                40677) /*!< 40677 (int FIX.5.0SP2) Specifies the yield calculation treatment for the step schedule.*/ \
X(UnderlyingPaymentScheduleFixedAmount,                                  40678) /*!< 40678 (Amt FIX.5.0SP2) The explicit payment amount for this step.*/ \
X(UnderlyingPaymentScheduleFixedCurrency,                                40679) /*!< 40679 (Currency FIX.5.0SP2) The currency of the fixed amount.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentScheduleStepFrequencyPeriod,                          40680) /*!< 40680 (int FIX.5.0SP2) Time unit multiplier for the step frequency.*/ \
X(UnderlyingPaymentScheduleStepFrequencyUnit,                            40681) /*!< 40681 (String FIX.5.0SP2) Time unit associated with the step frequency. */ \
X(UnderlyingPaymentScheduleStepOffsetValue,                              40682) /*!< 40682 (Amt FIX.5.0SP2) The explicit amount that the notional changes on each step date. This can be a positive or negative amount.*/ \
X(UnderlyingPaymentScheduleStepRate,                                     40683) /*!< 40683 (Percentage FIX.5.0SP2) The percentage by which the notional changes on each step date. The percentage is either a percentage applied to the initial notional amount or the previous outstanding notional, depending on the value specified in UnderlyingPaymentScheduleStepRelativeTo(40685). The percentage can be either positive or negative.*/ \
X(UnderlyingPaymentScheduleStepOffsetRate,                               40684) /*!< 40684 (Percentage FIX.5.0SP2) The explicit amount that the rate changes on each step date. This can be a positive or negative value.*/ \
X(UnderlyingPaymentScheduleStepRelativeTo,                               40685) /*!< 40685 (int FIX.5.0SP2) Specifies whether the UnderlyingPaymentScheduleStepRate(40683) or UnderlyingPaymentScheduleStepOffsetValue(40682) should be applied to the initial notional or the previous notional in order to calculate the notional step change amount.*/ \
X(UnderlyingPaymentScheduleFixingDateUnadjusted,                         40686) /*!< 40686 (LocalMktDate FIX.5.0SP2) The unadjusted fixing date.*/ \
X(UnderlyingPaymentScheduleWeight,                                       40687) /*!< 40687 (float FIX.5.0SP2) Floating rate observation weight for cashflow payment.*/ \
X(UnderlyingPaymentScheduleFixingDateRelativeTo,                         40688) /*!< 40688 (int FIX.5.0SP2) Specifies the anchor date when the fixing date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values. */ \
X(UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn,                   40689) /*!< 40689 (int FIX.5.0SP2) The business day convention used to adjust the payment schedule's fixing date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentScheduleFixingDateBusinessCenter,                     40690) /*!< 40690 (String FIX.5.0SP2) The business center calendar used to adjust the payment schedule's fixing date, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentScheduleFixingDateOffsetPeriod,                       40691) /*!< 40691 (int FIX.5.0SP2) Time unit multiplier for the relative fixing date offset.*/ \
X(UnderlyingPaymentScheduleFixingDateOffsetUnit,                         40692) /*!< 40692 (String FIX.5.0SP2) Time unit associated with the relative fixing date offset.*/ \
X(UnderlyingPaymentScheduleFixingDateOffsetDayType,                      40693) /*!< 40693 (int FIX.5.0SP2) Specifies the day type of the relative fixing date offset.*/ \
X(UnderlyingPaymentScheduleFixingDateAdjusted,                           40694) /*!< 40694 (LocalMktDate FIX.5.0SP2) The adjusted fixing date.*/ \
X(UnderlyingPaymentScheduleFixingTime,                                   40695) /*!< 40695 (LocalMktTime FIX.5.0SP2) The fixing time.*/ \
X(UnderlyingPaymentScheduleFixingTimeBusinessCenter,                     40696) /*!< 40696 (String FIX.5.0SP2) Business center for determining fixing time. See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo,         40697) /*!< 40697 (int FIX.5.0SP2) Specifies the anchor date when the interim exchange payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention,    40698) /*!< 40698 (int FIX.5.0SP2) The business day convention used to adjust the payment schedule's interim exchange date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter,           40699) /*!< 40699 (String FIX.5.0SP2) The business center calendar used to adjust the payment schedule's interim exchange date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod,             40700) /*!< 40700 (int FIX.5.0SP2) Time unit multiplier for the relative interim exchange date offset.*/ \
X(UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit,               40701) /*!< 40701 (String FIX.5.0SP2) Time unit associated with the relative interim exchange date offset.*/ \
X(UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType,            40702) /*!< 40702 (int FIX.5.0SP2) Specifies the day type of the relative interim exchange date offset.*/ \
X(UnderlyingPaymentScheduleInterimExchangeDateAdjusted,                  40703) /*!< 40703 (LocalMktDate FIX.5.0SP2) The adjusted interim exchange date.*/ \
X(NoUnderlyingPaymentScheduleRateSources,                                40704) /*!< 40704 (NumInGroup FIX.5.0SP2) Number of rate sources in the repeating group*/ \
X(UnderlyingPaymentScheduleRateSource,                                   40705) /*!< 40705 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(UnderlyingPaymentScheduleRateSourceType,                               40706) /*!< 40706 (int FIX.5.0SP2) Rate source type.*/ \
X(UnderlyingPaymentScheduleReferencePage,                                40707) /*!< 40707 (String FIX.5.0SP2) Identifies the reference “page” from the rate source.  \
 \
 \
 \
For FX, the reference page to the spot rate to be used for the reference FX spot rate. \
 \
 \
 \
When RateSource(1446) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(NoUnderlyingPaymentStubs,                                              40708) /*!< 40708 (NumInGroup FIX.5.0SP2) Number of stubs in the repeating group*/ \
X(UnderlyingPaymentStubType,                                             40709) /*!< 40709 (int FIX.5.0SP2) Stub type.*/ \
X(UnderlyingPaymentStubLength,                                           40710) /*!< 40710 (int FIX.5.0SP2) Optional indication whether stub is shorter or longer than the regular swap period.*/ \
X(UnderlyingPaymentStubRate,                                             40711) /*!< 40711 (Percentage FIX.5.0SP2) The agreed upon fixed rate for this stub.*/ \
X(UnderlyingPaymentStubFixedAmount,                                      40712) /*!< 40712 (Amt FIX.5.0SP2) A fixed payment amount for the stub.*/ \
X(UnderlyingPaymentStubFixedCurrency,                                    40713) /*!< 40713 (Currency FIX.5.0SP2) The currency of the fixed payment amount.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentStubIndex,                                            40714) /*!< 40714 (String FIX.5.0SP2) The stub floating rate index.*/ \
X(UnderlyingPaymentStubIndexSource,                                      40715) /*!< 40715 (int FIX.5.0SP2) The source for the underlying payment stub floating rate index.*/ \
X(UnderlyingPaymentStubIndexCurvePeriod,                                 40716) /*!< 40716 (int FIX.5.0SP2) Time unit multiplier for the underlying payment stub floating rate index.*/ \
X(UnderlyingPaymentStubIndexCurveUnit,                                   40717) /*!< 40717 (String FIX.5.0SP2) Time unit associated with the underlying payment stub floating rate index.*/ \
X(UnderlyingPaymentStubIndexRateMultiplier,                              40718) /*!< 40718 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(UnderlyingPaymentStubIndexRateSpread,                                  40719) /*!< 40719 (PriceOffset FIX.5.0SP2) Spread from floating rate index.*/ \
X(UnderlyingPaymentStubIndexRateSpreadPositionType,                      40720) /*!< 40720 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position. */ \
X(UnderlyingPaymentStubIndexRateTreatment,                               40721) /*!< 40721 (int FIX.5.0SP2) Specifies the yield calculation treatment for the stub index.*/ \
X(UnderlyingPaymentStubIndexCapRate,                                     40722) /*!< 40722 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(UnderlyingPaymentStubIndexCapRateBuySide,                              40723) /*!< 40723 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(UnderlyingPaymentStubIndexCapRateSellSide,                             40724) /*!< 40724 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(UnderlyingPaymentStubIndexFloorRate,                                   40725) /*!< 40725 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(UnderlyingPaymentStubIndexFloorRateBuySide,                            40726) /*!< 40726 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(UnderlyingPaymentStubIndexFloorRateSellSide,                           40727) /*!< 40727 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(UnderlyingPaymentStubIndex2,                                           40728) /*!< 40728 (String FIX.5.0SP2) The second stub floating rate index.*/ \
X(UnderlyingPaymentStubIndex2Source,                                     40729) /*!< 40729 (int FIX.5.0SP2) The source of the second stub floating rate index.*/ \
X(UnderlyingPaymentStubIndex2CurvePeriod,                                40730) /*!< 40730 (int FIX.5.0SP2) Secondary time unit multiplier for the stub floating rate index curve.*/ \
X(UnderlyingPaymentStubIndex2CurveUnit,                                  40731) /*!< 40731 (String FIX.5.0SP2) Secondary time unit associated with the stub floating rate index curve.*/ \
X(UnderlyingPaymentStubIndex2RateMultiplier,                             40732) /*!< 40732 (float FIX.5.0SP2) A rate multiplier to apply to the second floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(UnderlyingPaymentStubIndex2RateSpread,                                 40733) /*!< 40733 (PriceOffset FIX.5.0SP2) Spread from the second floating rate index.*/ \
X(UnderlyingPaymentStubIndex2RateSpreadPositionType,                     40734) /*!< 40734 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position. */ \
X(UnderlyingPaymentStubIndex2RateTreatment,                              40735) /*!< 40735 (int FIX.5.0SP2) Specifies the yield calculation treatment for the second stub index.*/ \
X(UnderlyingPaymentStubIndex2CapRate,                                    40736) /*!< 40736 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the second floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(UnderlyingPaymentStubIndex2FloorRate,                                  40737) /*!< 40737 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the second floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(PaymentStreamType,                                                     40738) /*!< 40738 (int FIX.5.0SP2) Identifies the type of payment stream associated with the swap.*/ \
X(PaymentStreamMarketRate,                                               40739) /*!< 40739 (int FIX.5.0SP2) Used only for credit index trade. This contains the credit spread ("fair value") at which the trade was executed. The market rate varies over the life of the index depending on market conditions. This is the price of the index as quoted by trading desks.*/ \
X(PaymentStreamDelayIndicator,                                           40740) /*!< 40740 (Boolean FIX.5.0SP2) Applicable to credit default swaps on mortgage backed securities to specify whether payment delays are applicable to the fixed amount.  \
 \
Residential mortgage backed securities typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap.  \
 \
Commercial mortgage backed securities do not typically have a payment delay,  with both payment dates (the coupon date of the reference obligation and the payment date of the synthetic swap) being on the 25th of each month.*/ \
X(PaymentStreamSettlCurrency,                                            40741) /*!< 40741 (Currency FIX.5.0SP2) Specifies the currency that the stream settles in (to support swaps that settle in a currency different from the notional currency).  Uses ISO 4217 currency codes.*/ \
X(PaymentStreamDayCount,                                                 40742) /*!< 40742 (int FIX.5.0SP2) The day count convention used in the payment stream calculations.*/ \
X(PaymentStreamAccrualDays,                                              40743) /*!< 40743 (int FIX.5.0SP2) The number of days from the adjusted calculation period start date to the adjusted value date, calculated in accordance with the applicable day count fraction.*/ \
X(PaymentStreamDiscountType,                                             40744) /*!< 40744 (int FIX.5.0SP2) The method of calculating discounted payment amounts*/ \
X(PaymentStreamDiscountRate,                                             40745) /*!< 40745 (Percentage FIX.5.0SP2) Discount rate.  The rate is expressed in decimal, e.g. 5% is expressed as 0.05.*/ \
X(PaymentStreamDiscountRateDayCount,                                     40746) /*!< 40746 (int FIX.5.0SP2) The day count convention applied to the PaymentStreamDiscountRate(40745). */ \
X(PaymentStreamCompoundingMethod,                                        40747) /*!< 40747 (int FIX.5.0SP2) Compounding method.*/ \
X(PaymentStreamInitialPrincipalExchangeIndicator,                        40748) /*!< 40748 (Boolean FIX.5.0SP2) Indicates whether there is an initial exchange of principal on the effective date.*/ \
X(PaymentStreamInterimPrincipalExchangeIndicator,                        40749) /*!< 40749 (Boolean FIX.5.0SP2) Indicates whether there are intermediate or interim exchanges of principal during the term of the swap.*/ \
X(PaymentStreamFinalPrincipalExchangeIndicator,                          40750) /*!< 40750 (Boolean FIX.5.0SP2) Indicates whether there is a final exchange of principal on the termination date.*/ \
X(PaymentStreamPaymentDateBusinessDayConvention,                         40751) /*!< 40751 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's payment date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentStreamPaymentDateBusinessCenter,                                40752) /*!< 40752 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's payment date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStreamPaymentFrequencyPeriod,                                   40753) /*!< 40753 (int FIX.5.0SP2) Time unit multiplier for the frequency of payments.*/ \
X(PaymentStreamPaymentFrequencyUnit,                                     40754) /*!< 40754 (String FIX.5.0SP2) Time unit associated with the frequency of payments. */ \
X(PaymentStreamPaymentRollConvention,                                    40755) /*!< 40755 (String FIX.5.0SP2) The convention for determining the sequence of end dates. It is used in conjunction with a specified frequency. Used only to override the roll convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentStreamFirstPaymentDateUnadjusted,                               40756) /*!< 40756 (LocalMktDate FIX.5.0SP2) The unadjusted first payment date.*/ \
X(PaymentStreamLastRegularPaymentDateUnadjusted,                         40757) /*!< 40757 (LocalMktDate FIX.5.0SP2) The unadjusted last regular payment date.*/ \
X(PaymentStreamPaymentDateRelativeTo,                                    40758) /*!< 40758 (int FIX.5.0SP2) Specifies the anchor date when payment dates are relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamPaymentDateOffsetPeriod,                                  40759) /*!< 40759 (int FIX.5.0SP2) Time unit multiplier for the relative payment date offset.*/ \
X(PaymentStreamPaymentDateOffsetUnit,                                    40760) /*!< 40760 (String FIX.5.0SP2) Time unit multiplier for the relative initial fixing date offset.*/ \
X(PaymentStreamResetDateRelativeTo,                                      40761) /*!< 40761 (int FIX.5.0SP2) Specifies the anchor date when the reset dates are relative to an anchor date.  \
 \
If the reset frequency is specified as daily this element must not be included.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamResetDateBusinessDayConvention,                           40762) /*!< 40762 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's reset date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentStreamResetDateBusinessCenter,                                  40763) /*!< 40763 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's reset date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStreamResetFrequencyPeriod,                                     40764) /*!< 40764 (int FIX.5.0SP2) Time unit multiplier for the frequency of resets.*/ \
X(PaymentStreamResetFrequencyUnit,                                       40765) /*!< 40765 (String FIX.5.0SP2) Time unit associated with the frequency of resets.*/ \
X(PaymentStreamResetWeeklyRollConvention,                                40766) /*!< 40766 (String FIX.5.0SP2) Used to specify the day of the week in which the reset occurs for payments that reset on a weekly basis.  */ \
X(PaymentStreamInitialFixingDateRelativeTo,                              40767) /*!< 40767 (int FIX.5.0SP2) Specifies the anchor date when the initial fixing date is relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamInitialFixingDateBusinessDayConvention,                   40768) /*!< 40768 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's initial fixing date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentStreamInitialFixingDateBusinessCenter,                          40769) /*!< 40769 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's initial fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStreamInitialFixingDateOffsetPeriod,                            40770) /*!< 40770 (int FIX.5.0SP2) Time unit multiplier for the relative initial fixing date offset.*/ \
X(PaymentStreamInitialFixingDateOffsetUnit,                              40771) /*!< 40771 (String FIX.5.0SP2) Time unit associated with the relative initial fixing date offset.*/ \
X(PaymentStreamInitialFixingDateOffsetDayType,                           40772) /*!< 40772 (int FIX.5.0SP2) Specifies the day type of the relative initial fixing date offset.*/ \
X(PaymentStreamInitialFixingDateAdjusted,                                40773) /*!< 40773 (LocalMktDate FIX.5.0SP2) The adjusted initial fixing date.*/ \
X(PaymentStreamFixingDateRelativeTo,                                     40774) /*!< 40774 (int FIX.5.0SP2) Specifies the anchor date when the fixing date is relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamFixingDateBusinessDayConvention,                          40775) /*!< 40775 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's fixing date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentStreamFixingDateBusinessCenter,                                 40776) /*!< 40776 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStreamFixingDateOffsetPeriod,                                   40777) /*!< 40777 (int FIX.5.0SP2) Time unit multiplier for the relative fixing date offset.*/ \
X(PaymentStreamFixingDateOffsetUnit,                                     40778) /*!< 40778 (String FIX.5.0SP2) Time unit associated with the relative fixing date offset.*/ \
X(PaymentStreamFixingDateOffsetDayType,                                  40779) /*!< 40779 (int FIX.5.0SP2) Specifies the day type of the relative fixing date offset.*/ \
X(PaymentStreamFixingDateAdjusted,                                       40780) /*!< 40780 (LocalMktDate FIX.5.0SP2) The adjusted fixing date.*/ \
X(PaymentStreamRateCutoffDateOffsetPeriod,                               40781) /*!< 40781 (int FIX.5.0SP2) Time unit multiplier for the relative rate cut-off date offset.*/ \
X(PaymentStreamRateCutoffDateOffsetUnit,                                 40782) /*!< 40782 (String FIX.5.0SP2) Time unit associated with the relative rate cut-off date offset.*/ \
X(PaymentStreamRateCutoffDateOffsetDayType,                              40783) /*!< 40783 (int FIX.5.0SP2) Specifies the day type of the relative rate cut-off date offset.*/ \
X(PaymentStreamRate,                                                     40784) /*!< 40784 (Percentage FIX.5.0SP2) The rate applicable to the fixed rate payment stream. */ \
X(PaymentStreamFixedAmount,                                              40785) /*!< 40785 (Amt FIX.5.0SP2) The payment stream's fixed payment amount. In CDS an alternative to PaymentStreamRate(40784).*/ \
X(PaymentStreamRateOrAmountCurrency,                                     40786) /*!< 40786 (Currency FIX.5.0SP2) Specifies the currency in which PaymentStreamFixedAmount(40785) or PaymentStreamRate(40784) is denominated.  Uses ISO 4271 currency codes.*/ \
X(PaymentStreamFutureValueNotional,                                      40787) /*!< 40787 (Amt FIX.5.0SP2) The future value notional is normally only required for certain non-deliverable interest rate swaps (e.g. Brazillian Real (BRL) vs. CETIP Interbank Deposit Rate (CDI)). The value is calculated as follows: Future Value Notional = Notional Amount * (1 + Fixed Rate) ^ (Fixed Rate Day Count Fraction). The currency is the same as the stream notional.*/ \
X(PaymentStreamFutureValueDateAdjusted,                                  40788) /*!< 40788 (LocalMktDate FIX.5.0SP2) The adjusted value date of the future value amount.*/ \
X(PaymentStreamRateIndex,                                                40789) /*!< 40789 (String FIX.5.0SP2) The payment stream floating rate index.*/ \
X(PaymentStreamRateIndexSource,                                          40790) /*!< 40790 (int FIX.5.0SP2) The source of the payment stream floating rate index.*/ \
X(PaymentStreamRateIndexCurveUnit,                                       40791) /*!< 40791 (String FIX.5.0SP2) Time unit associated with the floating rate index.*/ \
X(PaymentStreamRateIndexCurvePeriod,                                     40792) /*!< 40792 (int FIX.5.0SP2) Time unit multiplier for the floating rate index.*/ \
X(PaymentStreamRateMultiplier,                                           40793) /*!< 40793 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(PaymentStreamRateSpread,                                               40794) /*!< 40794 (PriceOffset FIX.5.0SP2) Spread from floating rate index.*/ \
X(PaymentStreamRateSpreadPositionType,                                   40795) /*!< 40795 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(PaymentStreamRateTreatment,                                            40796) /*!< 40796 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(PaymentStreamCapRate,                                                  40797) /*!< 40797 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(PaymentStreamCapRateBuySide,                                           40798) /*!< 40798 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(PaymentStreamCapRateSellSide,                                          40799) /*!< 40799 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(PaymentStreamFloorRate,                                                40800) /*!< 40800 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(PaymentStreamFloorRateBuySide,                                         40801) /*!< 40801 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(PaymentStreamFloorRateSellSide,                                        40802) /*!< 40802 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(PaymentStreamInitialRate,                                              40803) /*!< 40803 (Percentage FIX.5.0SP2) The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.*/ \
X(PaymentStreamFinalRateRoundingDirection,                               40804) /*!< 40804 (char FIX.5.0SP2) Specifies the rounding direction.*/ \
X(PaymentStreamFinalRatePrecision,                                       40805) /*!< 40805 (int FIX.5.0SP2) Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(PaymentStreamAveragingMethod,                                          40806) /*!< 40806 (int FIX.5.0SP2) When rate averaging is applicable, used to specify whether a weighted or unweighted average calculation method is to be used.*/ \
X(PaymentStreamNegativeRateTreatment,                                    40807) /*!< 40807 (int FIX.5.0SP2) The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(PaymentStreamInflationLagPeriod,                                       40808) /*!< 40808 (int FIX.5.0SP2) Time unit multiplier for the inflation lag period.  The lag period is the offsetting period from the payment date which determines the reference period for which the inflation index is observed.*/ \
X(PaymentStreamInflationLagUnit,                                         40809) /*!< 40809 (String FIX.5.0SP2) Time unit associated with the inflation lag period.*/ \
X(PaymentStreamInflationLagDayType,                                      40810) /*!< 40810 (int FIX.5.0SP2) The inflation lag period day type.*/ \
X(PaymentStreamInflationInterpolationMethod,                             40811) /*!< 40811 (int FIX.5.0SP2) The method used when calculating the Inflation Index Level from multiple points - the most common is Linear.*/ \
X(PaymentStreamInflationIndexSource,                                     40812) /*!< 40812 (int FIX.5.0SP2) The inflation index reference source. */ \
X(PaymentStreamInflationPublicationSource,                               40813) /*!< 40813 (String FIX.5.0SP2) The current main publication source such as relevant web site or a government body.*/ \
X(PaymentStreamInflationInitialIndexLevel,                               40814) /*!< 40814 (float FIX.5.0SP2) Initial known index level for the first calculation period.*/ \
X(PaymentStreamInflationFallbackBondApplicable,                          40815) /*!< 40815 (Boolean FIX.5.0SP2) Indicates whether a fallback bond as defined in the 2006 ISDA Inflation Derivatives Definitions, sections 1.3 and 1.8, is applicable or not.  If not specified, the default value is "Y" (True/Yes).*/ \
X(PaymentStreamFRADiscounting,                                           40816) /*!< 40816 (int FIX.5.0SP2) The method of Forward Rate Agreement (FRA) discounting, if any, that will apply.*/ \
X(PaymentStreamNonDeliverableRefCurrency,                                40817) /*!< 40817 (Currency FIX.5.0SP2) The non-deliverable settlement reference currency.  Uses ISO 4217 currency codes.*/ \
X(PaymentStreamNonDeliverableFixingDatesBusinessDayConvention,           40818) /*!< 40818 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's fixing date for the non-deliverable settlement terms. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component*/ \
X(PaymentStreamNonDeliverableFixingDatesBusinessCenter,                  40819) /*!< 40819 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's fixing date for the non-deliverable terms, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStreamNonDeliverableFixingDatesRelativeTo,                      40820) /*!< 40820 (int FIX.5.0SP2) Specifies the anchor date when the non-deliverable fixing dates are relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamNonDeliverableFixingDatesOffsetPeriod,                    40821) /*!< 40821 (int FIX.5.0SP2) Time unit multiplier for the relative non-deliverable fixing date offset.*/ \
X(PaymentStreamNonDeliverableFixingDatesOffsetUnit,                      40822) /*!< 40822 (String FIX.5.0SP2) Time unit associated with the relative non-deliverable fixing date offset.*/ \
X(PaymentStreamNonDeliverableFixingDatesOffsetDayType,                   40823) /*!< 40823 (int FIX.5.0SP2) Specifies the day type of the relative non-deliverable fixing date offset.*/ \
X(UnderlyingPaymentStreamNonDeliverableSettlReferencePage,               40824) /*!< 40824 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
When UnderlyingPaymentStreamNonDeliverableSettlRateSource(40661) = 3(ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(NoNonDeliverableFixingDates,                                           40825) /*!< 40825 (NumInGroup FIX.5.0SP2) Number of Fixing dates in the repeating group*/ \
X(NonDeliverableFixingDate,                                              40826) /*!< 40826 (LocalMktDate FIX.5.0SP2) Non-deliverable fixing date unadjusted or adjusted depending on NonDeliverableFixingDateType(40827).*/ \
X(NonDeliverableFixingDateType,                                          40827) /*!< 40827 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(NoPaymentSchedules,                                                    40828) /*!< 40828 (NumInGroup FIX.5.0SP2) Number of swap schedules in the repeating group*/ \
X(PaymentScheduleType,                                                   40829) /*!< 40829 (int FIX.5.0SP2) Type of schedule.*/ \
X(PaymentScheduleStubType,                                               40830) /*!< 40830 (int FIX.5.0SP2) Indicates to which stub this schedule applies. */ \
X(PaymentScheduleStartDateUnadjusted,                                    40831) /*!< 40831 (LocalMktDate FIX.5.0SP2) The date on which the value is adjusted, or calculated if a future value notional for certain non-deliverable interest rate swaps (e.g. Brazillian Real (BRL) vs. CETIP Interbank Deposit Rate (CDI)), or the start date of a cashflow payment.*/ \
X(PaymentScheduleEndDateUnadjusted,                                      40832) /*!< 40832 (LocalMktDate FIX.5.0SP2) The unadjusted end date of a cash flow payment.*/ \
X(PaymentSchedulePaySide,                                                40833) /*!< 40833 (int FIX.5.0SP2) The side of the party paying the step schedule.*/ \
X(PaymentScheduleReceiveSide,                                            40834) /*!< 40834 (int FIX.5.0SP2) The side of the party receiving the stepf schedule.*/ \
X(PaymentScheduleNotional,                                               40835) /*!< 40835 (Amt FIX.5.0SP2) The notional value for this step, or amount of a cashflow payment.*/ \
X(PaymentScheduleCurrency,                                               40836) /*!< 40836 (Currency FIX.5.0SP2) The currency for this step.  Uses ISO 4217 currency codes.*/ \
X(PaymentScheduleRate,                                                   40837) /*!< 40837 (Percentage FIX.5.0SP2) The rate value for this step schedule.*/ \
X(PaymentScheduleRateMultiplier,                                         40838) /*!< 40838 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(PaymentScheduleRateSpread,                                             40839) /*!< 40839 (PriceOffset FIX.5.0SP2) The spread value for this step schedule.*/ \
X(PaymentScheduleRateSpreadPositionType,                                 40840) /*!< 40840 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(PaymentScheduleRateTreatment,                                          40841) /*!< 40841 (int FIX.5.0SP2) Specifies the yield calculation treatment for the step schedule.*/ \
X(PaymentScheduleFixedAmount,                                            40842) /*!< 40842 (Amt FIX.5.0SP2) The explicit payment amount for this step schedule.*/ \
X(PaymentScheduleFixedCurrency,                                          40843) /*!< 40843 (Currency FIX.5.0SP2) The currency of the fixed amount.  Uses ISO 4217 currency codes.*/ \
X(PaymentScheduleStepFrequencyPeriod,                                    40844) /*!< 40844 (int FIX.5.0SP2) Time unit multiplier for the step frequency.*/ \
X(PaymentScheduleStepFrequencyUnit,                                      40845) /*!< 40845 (String FIX.5.0SP2) Time unit associated with the step frequency. */ \
X(PaymentScheduleStepOffsetValue,                                        40846) /*!< 40846 (Amt FIX.5.0SP2) The explicit amount that the notional changes on each step date. This can be a positive or negative amount.*/ \
X(PaymentScheduleStepRate,                                               40847) /*!< 40847 (Percentage FIX.5.0SP2) The percentage by which the notional changes on each step date. The percentage is either a percentage applied to the initial notional amount or the previous outstanding notional, depending on the value specified in PaymentScheduleStepRelativeTo(40849). The percentage can be either positive or negative.*/ \
X(PaymentScheduleStepOffsetRate,                                         40848) /*!< 40848 (Percentage FIX.5.0SP2) The explicit amount that the rate changes on each step date. This can be a positive or negative value.*/ \
X(PaymentScheduleStepRelativeTo,                                         40849) /*!< 40849 (int FIX.5.0SP2) Specifies whether the PaymentScheduleStepRate(40847) or PaymentScheduleStepOffsetValue(40846) should be applied to the initial notional or the previous notional in order to calculate the notional step change amount. */ \
X(PaymentScheduleFixingDateUnadjusted,                                   40850) /*!< 40850 (LocalMktDate FIX.5.0SP2) The unadjusted fixing date.*/ \
X(PaymentScheduleWeight,                                                 40851) /*!< 40851 (float FIX.5.0SP2) Floating rate observation weight for cashflow payment.*/ \
X(PaymentScheduleFixingDateRelativeTo,                                   40852) /*!< 40852 (int FIX.5.0SP2) Specifies the anchor date when the fixing date is relative to an anchor date.   \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentScheduleFixingDateBusinessDayConvention,                        40853) /*!< 40853 (int FIX.5.0SP2) The business day convention used to adjust the payment schedule's fixing date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentScheduleFixingDateBusinessCenter,                               40854) /*!< 40854 (String FIX.5.0SP2) The business center calendar used to adjust the payment schedule's fixing date, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentScheduleFixingDateOffsetPeriod,                                 40855) /*!< 40855 (int FIX.5.0SP2) Time unit multiplier for the relative fixing date offset.*/ \
X(PaymentScheduleFixingDateOffsetUnit,                                   40856) /*!< 40856 (String FIX.5.0SP2) Time unit associated with the relative fixing date offset.*/ \
X(PaymentScheduleFixingDateOffsetDayType,                                40857) /*!< 40857 (int FIX.5.0SP2) Specifies the day type of the relative fixing date offset.*/ \
X(PaymentScheduleFixingDateAdjusted,                                     40858) /*!< 40858 (LocalMktDate FIX.5.0SP2) The adjusted fixing date.*/ \
X(PaymentScheduleFixingTime,                                             40859) /*!< 40859 (LocalMktTime FIX.5.0SP2) The fixing time associated with the step schedule.*/ \
X(PaymentScheduleFixingTimeBusinessCenter,                               40860) /*!< 40860 (String FIX.5.0SP2) Business center for determining fixing time.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentScheduleInterimExchangePaymentDateRelativeTo,                   40861) /*!< 40861 (int FIX.5.0SP2) Specifies the anchor date when the interim exchange payment date is relative to an anchor date.     \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values. */ \
X(PaymentScheduleInterimExchangeDatesBusinessDayConvention,              40862) /*!< 40862 (int FIX.5.0SP2) The business day convention used to adjust the payment schedule's interim exchange date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(PaymentScheduleInterimExchangeDatesBusinessCenter,                     40863) /*!< 40863 (String FIX.5.0SP2) The business center calendar used to adjust the payment schedule's interim exchange date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentScheduleInterimExchangeDatesOffsetPeriod,                       40864) /*!< 40864 (int FIX.5.0SP2) Time unit multiplier for the relative interim exchange date offset.*/ \
X(PaymentScheduleInterimExchangeDatesOffsetUnit,                         40865) /*!< 40865 (String FIX.5.0SP2) Time unit associated with the relative interim exchange date offset.*/ \
X(PaymentScheduleInterimExchangeDatesOffsetDayType,                      40866) /*!< 40866 (int FIX.5.0SP2) Specifies the day type of the relative interim exchange date offset.*/ \
X(PaymentScheduleInterimExchangeDateAdjusted,                            40867) /*!< 40867 (LocalMktDate FIX.5.0SP2) The adjusted interim exchange date.*/ \
X(NoPaymentScheduleRateSources,                                          40868) /*!< 40868 (NumInGroup FIX.5.0SP2) Number of swap schedule rate sources.*/ \
X(PaymentScheduleRateSource,                                             40869) /*!< 40869 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(PaymentScheduleRateSourceType,                                         40870) /*!< 40870 (int FIX.5.0SP2) Rate source type.*/ \
X(PaymentScheduleReferencePage,                                          40871) /*!< 40871 (String FIX.5.0SP2) Identifies the reference “page” from the rate source.  \
 \
 \
 \
For FX, the reference page to the spot rate to be used for the reference FX spot rate. \
 \
 \
 \
When RateSource(1446) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(NoPaymentStubs,                                                        40872) /*!< 40872 (NumInGroup FIX.5.0SP2) Number of stubs in the repeating group*/ \
X(PaymentStubType,                                                       40873) /*!< 40873 (int FIX.5.0SP2) Stub type.*/ \
X(PaymentStubLength,                                                     40874) /*!< 40874 (int FIX.5.0SP2) Optional indication whether stub is shorter or longer than the regular swap period.*/ \
X(PaymentStubRate,                                                       40875) /*!< 40875 (Percentage FIX.5.0SP2) The agreed upon fixed rate for this stub.*/ \
X(PaymentStubFixedAmount,                                                40876) /*!< 40876 (Amt FIX.5.0SP2) A fixed payment amount for the stub.*/ \
X(PaymentStubFixedCurrency,                                              40877) /*!< 40877 (Currency FIX.5.0SP2) The currency of the fixed payment amount.  Uses ISO 4217 currency codes.*/ \
X(PaymentStubIndex,                                                      40878) /*!< 40878 (String FIX.5.0SP2) The stub floating rate index.*/ \
X(PaymentStubIndexSource,                                                40879) /*!< 40879 (int FIX.5.0SP2) The source of the stub floating rate index.*/ \
X(PaymentStubIndexCurvePeriod,                                           40880) /*!< 40880 (int FIX.5.0SP2) Time unit multiplier for the stub floating rate index.*/ \
X(PaymentStubIndexCurveUnit,                                             40881) /*!< 40881 (String FIX.5.0SP2) Time unit associated with the stub floating rate index.*/ \
X(PaymentStubIndexRateMultiplier,                                        40882) /*!< 40882 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(PaymentStubIndexRateSpread,                                            40883) /*!< 40883 (PriceOffset FIX.5.0SP2) Spread from floating rate index.*/ \
X(PaymentStubIndexRateSpreadPositionType,                                40884) /*!< 40884 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(PaymentStubIndexRateTreatment,                                         40885) /*!< 40885 (int FIX.5.0SP2) Specifies the yield calculation treatment for the payment stub index.*/ \
X(PaymentStubIndexCapRate,                                               40886) /*!< 40886 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(PaymentStubIndexCapRateBuySide,                                        40887) /*!< 40887 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(PaymentStubIndexCapRateSellSide,                                       40888) /*!< 40888 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(PaymentStubIndexFloorRate,                                             40889) /*!< 40889 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(PaymentStubIndexFloorRateBuySide,                                      40890) /*!< 40890 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(PaymentStubIndexFloorRateSellSide,                                     40891) /*!< 40891 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(PaymentStubIndex2,                                                     40892) /*!< 40892 (String FIX.5.0SP2) The second stub floating rate index.*/ \
X(PaymentStubIndex2Source,                                               40893) /*!< 40893 (int FIX.5.0SP2) The source of the second stub floating rate index.*/ \
X(PaymentStubIndex2CurvePeriod,                                          40894) /*!< 40894 (int FIX.5.0SP2) Secondary time unit multiplier for the stub floating rate index curve.*/ \
X(PaymentStubIndex2CurveUnit,                                            40895) /*!< 40895 (String FIX.5.0SP2) Secondary time unit associated with the stub floating rate index curve.*/ \
X(PaymentStubIndex2RateMultiplier,                                       40896) /*!< 40896 (float FIX.5.0SP2) A rate multiplier to apply to the second floating rate. The multiplier can be less than or greater than 1 (one). This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(PaymentStubIndex2RateSpread,                                           40897) /*!< 40897 (PriceOffset FIX.5.0SP2) Spread from the second floating rate index.*/ \
X(PaymentStubIndex2RateSpreadPositionType,                               40898) /*!< 40898 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(PaymentStubIndex2RateTreatment,                                        40899) /*!< 40899 (int FIX.5.0SP2) Specifies the yield calculation treatment for the second stub index.*/ \
X(PaymentStubIndex2CapRate,                                              40900) /*!< 40900 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the second floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.*/ \
X(PaymentStubIndex2FloorRate,                                            40901) /*!< 40901 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the second floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.*/ \
X(NoLegSettlRateFallbacks,                                               40902) /*!< 40902 (NumInGroup FIX.5.0SP2) Number of settlement rate fallbacks in the repeating group*/ \
X(LegSettlRatePostponementMaximumDays,                                   40903) /*!< 40903 (int FIX.5.0SP2) The maximum number of days to wait for a quote from the disrupted settlement rate option before proceding to this method.*/ \
X(UnderlyingSettlRateFallbackRateSource,                                 40904) /*!< 40904 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(LegSettlRatePostponementSurvey,                                        40905) /*!< 40905 (Boolean FIX.5.0SP2) Indicates whether to request a settlement rate quote from the market.*/ \
X(LegSettlRatePostponementCalculationAgent,                              40906) /*!< 40906 (int FIX.5.0SP2) Used to identify the settlement rate postponement calculation agent.*/ \
X(StreamEffectiveDateUnadjusted,                                         40907) /*!< 40907 (LocalMktDate FIX.5.0SP2) The unadjusted effective date.*/ \
X(StreamEffectiveDateBusinessDayConvention,                              40908) /*!< 40908 (int FIX.5.0SP2) The business day convention used to adjust the instrument's stream's effective, or relative effective, date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(StreamEffectiveDateBusinessCenter,                                     40909) /*!< 40909 (String FIX.5.0SP2) The business center calendar used to adjust the instrument's stream's effective, or relative effective, date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(StreamEffectiveDateRelativeTo,                                         40910) /*!< 40910 (int FIX.5.0SP2) Specifies the anchor date when the effective date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(StreamEffectiveDateOffsetPeriod,                                       40911) /*!< 40911 (int FIX.5.0SP2) Time unit multiplier for the relative effective date offset.*/ \
X(StreamEffectiveDateOffsetUnit,                                         40912) /*!< 40912 (String FIX.5.0SP2) Time unit associated with the relative effective date offset.*/ \
X(StreamEffectiveDateOffsetDayType,                                      40913) /*!< 40913 (int FIX.5.0SP2) Specifies the day type of the relative effective date offset.*/ \
X(StreamEffectiveDateAdjusted,                                           40914) /*!< 40914 (LocalMktDate FIX.5.0SP2) The adjusted effective date.*/ \
X(UnderlyingSettlRateFallbackReferencePage,                              40915) /*!< 40915 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
When UnderlyingSettlRateFallbackRateSource(40904) = 3(ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(CashSettlValuationSubsequentBusinessDaysOffset,                        40916) /*!< 40916 (int FIX.5.0SP2) The number of business days between successive valuation dates when multiple valuation dates are applicable for cash settlement.*/ \
X(CashSettlNumOfValuationDates,                                          40917) /*!< 40917 (int FIX.5.0SP2) Where multiple valuation dates are specified as being applicable for cash settlement, this specifies the number of applicable valuation dates.*/ \
X(UnderlyingProvisionPartyRoleQualifier,                                 40918) /*!< 40918 (int FIX.5.0SP2) Used to further qualify the value of UnderlyingProvisionPartyRole(42176).*/ \
X(PaymentPriceType,                                                      40919) /*!< 40919 (int FIX.5.0SP2) Specifies the type of price for PaymentPrice(40218).*/ \
X(PaymentStreamPaymentDateOffsetDayType,                                 40920) /*!< 40920 (int FIX.5.0SP2) Specifies the day type of the relative payment date offset.*/ \
X(BusinessDayConvention,                                                 40921) /*!< 40921 (int FIX.5.0SP2) The business day convention used for adjusting dates. The value defined here applies to all adjustable dates in the instrument unless specifically overridden.*/ \
X(DateRollConvention,                                                    40922) /*!< 40922 (String FIX.5.0SP2) The convention for determining a sequence of dates. It is used in conjunction with a specified frequency. The value defined here applies to all adjustable dates in the instrument unless specifically overridden. Additional values may be used by mutual agreement of the counterparties.*/ \
X(NoLegBusinessCenters,                                                  40923) /*!< 40923 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegBusinessCenter,                                                     40924) /*!< 40924 (String FIX.5.0SP2) A business center whose calendar is used for date adjustment, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegBusinessDayConvention,                                              40925) /*!< 40925 (int FIX.5.0SP2) The business day convention used for adjusting dates. The value defined here applies to all adjustable dates in the instrument leg unless specifically overridden.*/ \
X(LegDateRollConvention,                                                 40926) /*!< 40926 (String FIX.5.0SP2) The convention for determining a sequence of dates. It is used in conjunction with a specified frequency. The value defined here applies to all adjustable dates in the instrument leg unless specifically overridden.*/ \
X(NoLegPaymentScheduleFixingDateBusinessCenters,                         40927) /*!< 40927 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegPaymentScheduleInterimExchangeDateBusinessCenters,                40928) /*!< 40928 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegPaymentStreamNonDeliverableFixingDateBusinessCenters,             40929) /*!< 40929 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegPaymentStreamPaymentDateBusinessCenters,                          40930) /*!< 40930 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegPaymentStreamResetDateBusinessCenters,                            40931) /*!< 40931 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegPaymentStreamInitialFixingDateBusinessCenters,                    40932) /*!< 40932 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegPaymentStreamFixingDateBusinessCenters,                           40933) /*!< 40933 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegProvisionCashSettlPaymentDateBusinessCenters,                     40934) /*!< 40934 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegProvisionCashSettlValueDateBusinessCenters,                       40935) /*!< 40935 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegProvisionOptionExerciseBusinessCenters,                           40936) /*!< 40936 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegProvisionOptionExpirationDateBusinessCenters,                     40937) /*!< 40937 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegProvisionOptionRelevantUnderlyingDateBusinessCenters,             40938) /*!< 40938 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegProvisionDateBusinessCenters,                                     40939) /*!< 40939 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegStreamCalculationPeriodBusinessCenters,                           40940) /*!< 40940 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegStreamFirstPeriodStartDateBusinessCenters,                        40941) /*!< 40941 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegStreamEffectiveDateBusinessCenters,                               40942) /*!< 40942 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoLegStreamTerminationDateBusinessCenters,                             40943) /*!< 40943 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentBusinessCenters,                                              40944) /*!< 40944 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentScheduleInterimExchangeDateBusinessCenters,                   40945) /*!< 40945 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentStreamNonDeliverableFixingDatesBusinessCenters,               40946) /*!< 40946 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentStreamPaymentDateBusinessCenters,                             40947) /*!< 40947 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentStreamResetDateBusinessCenters,                               40948) /*!< 40948 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentStreamInitialFixingDateBusinessCenters,                       40949) /*!< 40949 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentStreamFixingDateBusinessCenters,                              40950) /*!< 40950 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoProtectionTermEventNewsSources,                                      40951) /*!< 40951 (NumInGroup FIX.5.0SP2) Number of event news sources in the repeating group.*/ \
X(NoProvisionCashSettlPaymentDateBusinessCenters,                        40952) /*!< 40952 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoProvisionCashSettlValueDateBusinessCenters,                          40953) /*!< 40953 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoProvisionOptionExerciseBusinessCenters,                              40954) /*!< 40954 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoProvisionOptionExpirationDateBusinessCenters,                        40955) /*!< 40955 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoProvisionOptionRelevantUnderlyingDateBusinessCenters,                40956) /*!< 40956 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoProvisionDateBusinessCenters,                                        40957) /*!< 40957 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoStreamCalculationPeriodBusinessCenters,                              40958) /*!< 40958 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoStreamFirstPeriodStartDateBusinessCenters,                           40959) /*!< 40959 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoStreamEffectiveBusinessCenters,                                      40960) /*!< 40960 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoStreamTerminationDateBusinessCenters,                                40961) /*!< 40961 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingBusinessCenters,                                           40962) /*!< 40962 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingBusinessCenter,                                              40963) /*!< 40963 (String FIX.5.0SP2) A business center whose calendar is used for date adjustment, e.g. "GBLO". See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingBusinessDayConvention,                                       40964) /*!< 40964 (int FIX.5.0SP2) The business day convention used for adjusting dates. The value defined here applies to all adjustable dates in the underlying instrument unless specifically overridden.*/ \
X(UnderlyingDateRollConvention,                                          40965) /*!< 40965 (String FIX.5.0SP2) The convention for determining a sequence of dates. It is used in conjunction with a specified frequency. The value defined here applies to all adjustable dates in the underlying instrument unless specifically overridden.*/ \
X(NoUnderlyingPaymentScheduleFixingDateBusinessCenters,                  40966) /*!< 40966 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters,         40967) /*!< 40967 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters,     40968) /*!< 40968 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingPaymentStreamPaymentDateBusinessCenters,                   40969) /*!< 40969 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingPaymentStreamResetDateBusinessCenters,                     40970) /*!< 40970 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters,             40971) /*!< 40971 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingPaymentStreamFixingDateBusinessCenters,                    40972) /*!< 40972 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingStreamCalculationPeriodBusinessCenters,                    40973) /*!< 40973 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingStreamFirstPeriodStartDateBusinessCenters,                 40974) /*!< 40974 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingStreamEffectiveDateBusinessCenters,                        40975) /*!< 40975 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoUnderlyingStreamTerminationDateBusinessCenters,                      40976) /*!< 40976 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(NoPaymentScheduleFixingDateBusinessCenters,                            40977) /*!< 40977 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(EncodedLegStreamTextLen,                                               40978) /*!< 40978 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegStreamText(40979) field.*/ \
X(EncodedLegStreamText,                                                  40979) /*!< 40979 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegStreamText(40248) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegStreamText(40248) field.*/ \
X(EncodedLegProvisionTextLen,                                            40980) /*!< 40980 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegProvisionText(40472) field.*/ \
X(EncodedLegProvisionText,                                               40981) /*!< 40981 (data FIX.5.0SP2) 	Encoded (non-ASCII characters) representation of the LegProvisionText(40472) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegProvisionText(40472) field.*/ \
X(EncodedStreamTextLen,                                                  40982) /*!< 40982 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedStreamText(40983) field.*/ \
X(EncodedStreamText,                                                     40983) /*!< 40983 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the StreamText(40056) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the StreamText(40056) field.*/ \
X(EncodedPaymentTextLen,                                                 40984) /*!< 40984 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedPaymentText(40985) field.*/ \
X(EncodedPaymentText,                                                    40985) /*!< 40985 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the PaymentText(40229) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the PaymentText(40229) field.*/ \
X(EncodedProvisionTextLen,                                               40986) /*!< 40986 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedProvisionText(40987) field.*/ \
X(EncodedProvisionText,                                                  40987) /*!< 40987 (data FIX.5.0SP2) 	Encoded (non-ASCII characters) representation of the ProvisionText(40113) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the ProvisionText(40113) field.*/ \
X(EncodedUnderlyingStreamTextLen,                                        40988) /*!< 40988 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingStreamText(40989) field.*/ \
X(EncodedUnderlyingStreamText,                                           40989) /*!< 40989 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingStreamText(40547) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingStreamText(40547) field.*/ \
X(LegMarketDisruptionFallbackValue,                                      40990) /*!< 40990 (String FIX.5.0SP2) Applicable value for LegMarketDisruptionFallbackType(41470).*/ \
X(MarketDisruptionValue,                                                 40991) /*!< 40991 (String FIX.5.0SP2) Applicable value for MarketDisruptionEvent(41093).*/ \
X(MarketDisruptionFallbackValue,                                         40992) /*!< 40992 (String FIX.5.0SP2) Applicable value for MarketDisruptionFallbackType(41095).*/ \
X(PaymentSubType,                                                        40993) /*!< 40993 (int FIX.5.0SP2) Used to further clarify the value of PaymentType(40213).*/ \
X(NoComplexEventAveragingObservations,                                   40994) /*!< 40994 (NumInGroup FIX.5.0SP2) The number of averaging observations in the repeating group.*/ \
X(ComplexEventAveragingObservationNumber,                                40995) /*!< 40995 (int FIX.5.0SP2) Cross reference to the ordinal observation as specified either in the ComplexEventScheduleGrp or ComplexEventPeriodDateGrp components. */ \
X(ComplexEventAveragingWeight,                                           40996) /*!< 40996 (float FIX.5.0SP2) The weight factor to be applied to the observation.*/ \
X(NoComplexEventCreditEvents,                                            40997) /*!< 40997 (NumInGroup FIX.5.0SP2) The number of credit events specified in the repeating group.*/ \
X(ComplexEventCreditEventType,                                           40998) /*!< 40998 (String FIX.5.0SP2) Specifies the type of credit event.  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Types for code list of applicable event types.*/ \
X(ComplexEventCreditEventValue,                                          40999) /*!< 40999 (String FIX.5.0SP2) The credit event value appropriate to ComplexEventCreditEventType(40998).  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Types for applicable event type values. */ \
X(ComplexEventCreditEventCurrency,                                       41000) /*!< 41000 (Currency FIX.5.0SP2) Specifies the applicable currency when ComplexEventCreditEventValue(40999) is an amount. Uses ISO 4217 currency codes.*/ \
X(ComplexEventCreditEventPeriod,                                         41001) /*!< 41001 (int FIX.5.0SP2) Time unit multiplier for complex credit events.*/ \
X(ComplexEventCreditEventUnit,                                           41002) /*!< 41002 (String FIX.5.0SP2) Time unit associated with complex credit events.*/ \
X(ComplexEventCreditEventDayType,                                        41003) /*!< 41003 (int FIX.5.0SP2) Specifies the day type for the complex credit events.*/ \
X(ComplexEventCreditEventRateSource,                                     41004) /*!< 41004 (int FIX.5.0SP2) Identifies the source of rate information used for credit events.  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Rate_Source for code list of applicable sources.*/ \
X(NoComplexEventCreditEventQualifiers,                                   41005) /*!< 41005 (NumInGroup FIX.5.0SP2) The number of qualifiers in the repeating group.*/ \
X(ComplexEventCreditEventQualifier,                                      41006) /*!< 41006 (char FIX.5.0SP2) Specifies a complex event qualifier. Used to further qualify ComplexEventCreditEventType(40998).*/ \
X(NoComplexEventPeriodDateTimes,                                         41007) /*!< 41007 (NumInGroup FIX.5.0SP2) The number of entries in the date-time repeating group.*/ \
X(ComplexEventPeriodDate,                                                41008) /*!< 41008 (LocalMktDate FIX.5.0SP2) The averaging date for an Asian option.  \
 \
The trigger date for a Barrier or Knock option.*/ \
X(ComplexEventPeriodTime,                                                41009) /*!< 41009 (LocalMktTime FIX.5.0SP2) The averaging time for an Asian option. */ \
X(NoComplexEventPeriods,                                                 41010) /*!< 41010 (NumInGroup FIX.5.0SP2) The number of periods in the repeating group.*/ \
X(ComplexEventPeriodType,                                                41011) /*!< 41011 (int FIX.5.0SP2) Specifies the period type.*/ \
X(ComplexEventBusinessCenter,                                            41012) /*!< 41012 (String FIX.5.0SP2) The business center used to determine dates and times in the schedule or date-time group.   \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoComplexEventRateSources,                                             41013) /*!< 41013 (NumInGroup FIX.5.0SP2) The number of rate sources in the repeating group.*/ \
X(ComplexEventRateSource,                                                41014) /*!< 41014 (int FIX.5.0SP2) Identifies the source of rate information.*/ \
X(ComplexEventRateSourceType,                                            41015) /*!< 41015 (int FIX.5.0SP2) Indicates whether the rate source specified is a primary or secondary source.*/ \
X(ComplexEventReferencePage,                                             41016) /*!< 41016 (String FIX.5.0SP2) Identifies the reference page from the rate source. \
 \
For FX, the reference page to the spot rate is to be used for the reference FX spot rate. \
 \
When ComplexEventRateSource(41014) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option. */ \
X(ComplexEventReferencePageHeading,                                      41017) /*!< 41017 (String FIX.5.0SP2) Identifies the reference page heading from the rate source.*/ \
X(NoComplexEventDateBusinessCenters,                                     41018) /*!< 41018 (NumInGroup FIX.5.0SP2) The number of business centers in the repeating group.*/ \
X(ComplexEventDateBusinessCenter,                                        41019) /*!< 41019 (String FIX.5.0SP2) The business center calendar used to adjust the complex event date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ComplexEventDateUnadjusted,                                            41020) /*!< 41020 (LocalMktDate FIX.5.0SP2) The unadjusted complex event date.*/ \
X(ComplexEventDateRelativeTo,                                            41021) /*!< 41021 (int FIX.5.0SP2) Specifies the anchor date when the complex event date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ComplexEventDateOffsetPeriod,                                          41022) /*!< 41022 (int FIX.5.0SP2) Time unit multiplier for the relative date offset.*/ \
X(ComplexEventDateOffsetUnit,                                            41023) /*!< 41023 (String FIX.5.0SP2) Time unit associated with the relative date offset.*/ \
X(ComplexEventDateOffsetDayType,                                         41024) /*!< 41024 (int FIX.5.0SP2) Specifies the day type of the relative date offset.*/ \
X(ComplexEventDateBusinessDayConvention,                                 41025) /*!< 41025 (int FIX.5.0SP2) The business day convention used to adjust the complex event date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(ComplexEventDateAdjusted,                                              41026) /*!< 41026 (LocalMktDate FIX.5.0SP2) The adjusted complex event date.*/ \
X(ComplexEventFixingTime,                                                41027) /*!< 41027 (LocalMktTime FIX.5.0SP2) The local market fixing time.*/ \
X(ComplexEventFixingTimeBusinessCenter,                                  41028) /*!< 41028 (String FIX.5.0SP2) The business center calendar used to determine the actual fixing times. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoComplexEventCreditEventSources,                                      41029) /*!< 41029 (NumInGroup FIX.5.0SP2) Number of event sources in the repeating group.*/ \
X(ComplexEventCreditEventSource,                                         41030) /*!< 41030 (String FIX.5.0SP2) A newspaper or electronic news service that may publish relevant information used in the determination of whether or not a credit event has occurred.*/ \
X(NoComplexEventSchedules,                                               41031) /*!< 41031 (NumInGroup FIX.5.0SP2) Number of schedules in the repeating group.*/ \
X(ComplexEventScheduleStartDate,                                         41032) /*!< 41032 (LocalMktDate FIX.5.0SP2) The start date of the schedule.*/ \
X(ComplexEventScheduleEndDate,                                           41033) /*!< 41033 (LocalMktDate FIX.5.0SP2) The end date of the schedule.*/ \
X(ComplexEventScheduleFrequencyPeriod,                                   41034) /*!< 41034 (int FIX.5.0SP2) Time unit multiplier for the schedule date frequency.*/ \
X(ComplexEventScheduleFrequencyUnit,                                     41035) /*!< 41035 (String FIX.5.0SP2) Time unit associated with the schedule date frequency.*/ \
X(ComplexEventScheduleRollConvention,                                    41036) /*!< 41036 (String FIX.5.0SP2) The convention for determining the sequence of dates.  It is used in conjunction with a specified frequency.  Used only to override the roll convention defined in the DateAdjustment component in Instrument.*/ \
X(NoDeliverySchedules,                                                   41037) /*!< 41037 (NumInGroup FIX.5.0SP2) Number of delivery schedules in the repeating group.*/ \
X(DeliveryScheduleType,                                                  41038) /*!< 41038 (int FIX.5.0SP2) Specifies the type of delivery schedule.*/ \
X(DeliveryScheduleXID,                                                   41039) /*!< 41039 (XID FIX.5.0SP2) Identifier for this instance of delivery schedule for cross referencing elsewhere in the message.*/ \
X(DeliveryScheduleNotional,                                              41040) /*!< 41040 (Qty FIX.5.0SP2) Physical delivery quantity.*/ \
X(DeliveryScheduleNotionalUnitOfMeasure,                                 41041) /*!< 41041 (String FIX.5.0SP2) Specifies the delivery quantity unit of measure (UOM).*/ \
X(DeliveryScheduleNotionalCommodityFrequency,                            41042) /*!< 41042 (int FIX.5.0SP2) The frequency of notional delivery.*/ \
X(DeliveryScheduleNegativeTolerance,                                     41043) /*!< 41043 (float FIX.5.0SP2) Specifies the negative tolerance value.  The value may be an absolute quantity or a percentage, as specified in DeliveryScheduleToleranceType(41046).  Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(DeliverySchedulePositiveTolerance,                                     41044) /*!< 41044 (float FIX.5.0SP2) Specifies the positive tolerance value. The value may be an absolute quantity or a percentage, as specified in DeliveryScheduleToleranceType(41046). Value may exceed agreed upon value. Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(DeliveryScheduleToleranceUnitOfMeasure,                                41045) /*!< 41045 (String FIX.5.0SP2) Specifies the tolerance value's unit of measure (UOM).*/ \
X(DeliveryScheduleToleranceType,                                         41046) /*!< 41046 (int FIX.5.0SP2) Specifies the tolerance value type.*/ \
X(DeliveryScheduleSettlCountry,                                          41047) /*!< 41047 (Country FIX.5.0SP2) Specifies the country where delivery takes place. Uses ISO 3166 2-character country code.*/ \
X(DeliveryScheduleSettlTimeZone,                                         41048) /*!< 41048 (String FIX.5.0SP2) Delivery timezone specified as "prevailing" rather than "standard" or "daylight".   \
 \
See http://www.fixtradingcommunity.org/codelists#Prevailing_Timezones for code list of applicable prevailing timezones.*/ \
X(DeliveryScheduleSettlFlowType,                                         41049) /*!< 41049 (int FIX.5.0SP2) Specifies the commodity delivery flow type.*/ \
X(DeliveryScheduleSettlHolidaysProcessingInstruction,                    41050) /*!< 41050 (int FIX.5.0SP2) Indicates whether holidays are included in the settlement periods. Required for electricity contracts.*/ \
X(NoDeliveryScheduleSettlDays,                                           41051) /*!< 41051 (NumInGroup FIX.5.0SP2) Number of delivery schedules in the repeating group.*/ \
X(DeliveryScheduleSettlDay,                                              41052) /*!< 41052 (int FIX.5.0SP2) Specifies the day or group of days for delivery.  */ \
X(DeliveryScheduleSettlTotalHours,                                       41053) /*!< 41053 (int FIX.5.0SP2) The sum of the total hours specified in the DeliveryScheduleSettlTimeGrp component.*/ \
X(NoDeliveryScheduleSettlTimes,                                          41054) /*!< 41054 (NumInGroup FIX.5.0SP2) Number of hour ranges in the repeating group.*/ \
X(DeliveryScheduleSettlStart,                                            41055) /*!< 41055 (String FIX.5.0SP2) The scheduled start time for the delivery of the commodity where delivery occurs over specified times. The format of the time value is specified in DeliveryScheduleSettlTimeType(41057).*/ \
X(DeliveryScheduleSettlEnd,                                              41056) /*!< 41056 (String FIX.5.0SP2) The scheduled end time for the delivery of the commodity where delivery occurs over specified times. The format of the time value is specified in DeliveryScheduleSettlTimeType(41057).*/ \
X(DeliveryScheduleSettlTimeType,                                         41057) /*!< 41057 (int FIX.5.0SP2) Specifies the format of the delivery start and end time values.*/ \
X(DeliveryStreamType,                                                    41058) /*!< 41058 (int FIX.5.0SP2) Specifies the type of delivery stream.*/ \
X(DeliveryStreamPipeline,                                                41059) /*!< 41059 (String FIX.5.0SP2) The name of the oil delivery pipeline.*/ \
X(DeliveryStreamEntryPoint,                                              41060) /*!< 41060 (String FIX.5.0SP2) The point at which the commodity will enter the delivery mechanism or pipeline.*/ \
X(DeliveryStreamWithdrawalPoint,                                         41061) /*!< 41061 (String FIX.5.0SP2) The point at which the commodity product will be withdrawn prior to delivery.*/ \
X(DeliveryStreamDeliveryPoint,                                           41062) /*!< 41062 (String FIX.5.0SP2) The point at which the commodity product will be delivered and received. Value specified should follow market convention appropriate for the commodity product.  \
 \
For bullion, see http://www.fpml.org/coding-scheme/bullion-delivery-location for values.*/ \
X(DeliveryStreamDeliveryRestriction,                                     41063) /*!< 41063 (int FIX.5.0SP2) Specifies under what conditions the buyer and seller should be excused of their delivery obligations.*/ \
X(DeliveryStreamDeliveryContingency,                                     41064) /*!< 41064 (String FIX.5.0SP2) Specifies the electricity delivery contingency.  \
 \
See http://www.fpml.org/coding-scheme/electricity-transmission-contingency for values.*/ \
X(DeliveryStreamDeliveryContingentPartySide,                             41065) /*!< 41065 (int FIX.5.0SP2) The trade side value of the party responsible for electricity delivery contingency.*/ \
X(DeliveryStreamDeliverAtSourceIndicator,                                41066) /*!< 41066 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', delivery of the coal product is to be at its source.*/ \
X(DeliveryStreamRiskApportionment,                                       41067) /*!< 41067 (String FIX.5.0SP2) Specifies how the parties to the trade apportion responsibility for the delivery of the commodity product.  \
 \
See http://www.fixtradingcommunity.org/codelists#Risk_Apportionment for the details of the external code list.*/ \
X(DeliveryStreamTitleTransferLocation,                                   41068) /*!< 41068 (String FIX.5.0SP2) Specifies the title transfer location.*/ \
X(DeliveryStreamTitleTransferCondition,                                  41069) /*!< 41069 (int FIX.5.0SP2) Specifies the condition of title transfer.*/ \
X(DeliveryStreamImporterOfRecord,                                        41070) /*!< 41070 (String FIX.5.0SP2) A party, not necessarily of the trade, who is the Importer of Record for the purposes of paying customs duties and applicable taxes or costs related to importation.*/ \
X(DeliveryStreamNegativeTolerance,                                       41071) /*!< 41071 (float FIX.5.0SP2) Specifies the negative tolerance value.  The value may be an absolute quantity or a percentage, as specified in DeliveryStreamToleranceType(41074).  Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(DeliveryStreamPositiveTolerance,                                       41072) /*!< 41072 (float FIX.5.0SP2) Specifies the positive tolerance value. The value may be an absolute quantity or a percentage, as specified in DeliveryStreamToleranceType(41074). Value may exceed agreed upon value. Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(DeliveryStreamToleranceUnitOfMeasure,                                  41073) /*!< 41073 (String FIX.5.0SP2) Specifies the tolerance value's unit of measure (UOM).*/ \
X(DeliveryStreamToleranceType,                                           41074) /*!< 41074 (int FIX.5.0SP2) Specifies the tolerance value type.*/ \
X(DeliveryStreamToleranceOptionSide,                                     41075) /*!< 41075 (int FIX.5.0SP2) Indicates whether the tolerance is at the seller's or buyer's option.*/ \
X(DeliveryStreamTotalPositiveTolerance,                                  41076) /*!< 41076 (Percentage FIX.5.0SP2) The positive percent tolerance which applies to the total quantity delivered over all shipment periods. \
 \
Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%.).*/ \
X(DeliveryStreamTotalNegativeTolerance,                                  41077) /*!< 41077 (Percentage FIX.5.0SP2) The negative percent tolerance which applies to the total quantity delivered over all shipment periods. \
 \
Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%.).*/ \
X(DeliveryStreamNotionalConversionFactor,                                41078) /*!< 41078 (float FIX.5.0SP2) If the notional quantity is specified in a unit that does not match the unit in which the commodity reference price is quoted, the scaling or conversion factor used to convert the commodity reference price unit into the notional quantity unit should be stated here. If there is no conversion, this field is not intended to be used.*/ \
X(DeliveryStreamTransportEquipment,                                      41079) /*!< 41079 (String FIX.5.0SP2) The transportation equipment with which the commodity product will be delivered and received. */ \
X(DeliveryStreamElectingPartySide,                                       41080) /*!< 41080 (int FIX.5.0SP2) A reference to the party able to choose whether the gas is delivered for a particular period as found in a swing or interruptible contract.*/ \
X(NoDeliveryStreamCycles,                                                41081) /*!< 41081 (NumInGroup FIX.5.0SP2) Number of delivery cycles in the repeating group.*/ \
X(DeliveryStreamCycleDesc,                                               41082) /*!< 41082 (String FIX.5.0SP2) The delivery cycles during which the oil product will be transported in the pipeline.*/ \
X(EncodedDeliveryStreamCycleDescLen,                                     41083) /*!< 41083 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedDeliveryStreamCycleDesc(41084) field.*/ \
X(EncodedDeliveryStreamCycleDesc,                                        41084) /*!< 41084 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the DeliveryStreamCycleDesc(41082) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the DeliveryStreamCycleDesc(41082) field.*/ \
X(NoDeliveryStreamCommoditySources,                                      41085) /*!< 41085 (NumInGroup FIX.5.0SP2) Number of commodity sources in the repeating group.*/ \
X(DeliveryStreamCommoditySource,                                         41086) /*!< 41086 (String FIX.5.0SP2) The SCoTA coal cargo origin, mining region, mine(s), mining complex(es), loadout(s) or river dock(s) or other point(s) of origin that seller and buyer agree are acceptable origins for the coal product. For international coal transactions, this is the origin of the coal product.  \
 \
See http://www.fpml.org/coding-scheme/commodity-coal-product-source for values.*/ \
X(MarketDisruptionProvision,                                             41087) /*!< 41087 (int FIX.5.0SP2) The consequences of market disruption events.*/ \
X(MarketDisruptionFallbackProvision,                                     41088) /*!< 41088 (int FIX.5.0SP2) Specifies the location of the fallback provision documentation.*/ \
X(MarketDisruptionMaximumDays,                                           41089) /*!< 41089 (int FIX.5.0SP2) Specifies the maximum number of market disruption days (commodity or bullion business days) in a contract or confirmation. If none are specified, the maximum number of market disruption days is five (5).*/ \
X(MarketDisruptionMaterialityPercentage,                                 41090) /*!< 41090 (Percentage FIX.5.0SP2) Used when a price materiality percentage applies to the price source disruption event and this event has been specified.*/ \
X(MarketDisruptionMinimumFuturesContracts,                               41091) /*!< 41091 (int FIX.5.0SP2) Specifies the minimum futures contracts level that dictates whether or not a 'De Minimis Trading' event has occurred. */ \
X(NoMarketDisruptionEvents,                                              41092) /*!< 41092 (NumInGroup FIX.5.0SP2) Number of disruption events in the repeating group.*/ \
X(MarketDisruptionEvent,                                                 41093) /*!< 41093 (String FIX.5.0SP2) Specifies the market disruption event.  \
 \
For commodities see http://www.fpml.org/coding-scheme/commodity-market-disruption for values.  \
 \
For foreign exchange, see http://www.fixtradingcommunity.org/codelists#Market_Disruption_Event for code list of applicable event types.*/ \
X(NoMarketDisruptionFallbacks,                                           41094) /*!< 41094 (NumInGroup FIX.5.0SP2) Number of fallbacks in the repeating group.*/ \
X(MarketDisruptionFallbackType,                                          41095) /*!< 41095 (String FIX.5.0SP2) Specifies the type of disruption fallback.   \
 \
See http://www.fpml.org/coding-scheme/commodity-market-disruption-fallback for values. */ \
X(NoMarketDisruptionFallbackReferencePrices,                             41096) /*!< 41096 (NumInGroup FIX.5.0SP2) Number of fallback reference securities in the repeating group.*/ \
X(MarketDisruptionFallbackUnderlierType,                                 41097) /*!< 41097 (int FIX.5.0SP2) The type of reference price underlier.*/ \
X(MarketDisruptionFallbackUnderlierSecurityID,                           41098) /*!< 41098 (String FIX.5.0SP2) Specifies the identifier value of the security.*/ \
X(MarketDisruptionFallbackUnderlierSecurityIDSource,                     41099) /*!< 41099 (String FIX.5.0SP2) Specifies the class or source scheme of the security identifier.*/ \
X(MarketDisruptionFallbackUnderlierSecurityDesc,                         41100) /*!< 41100 (String FIX.5.0SP2) Specifies the description of the underlying security.*/ \
X(EncodedMarketDisruptionFallbackUnderlierSecurityDescLen,               41101) /*!< 41101 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedMarketDisruptionFallbackUnderlierSecurityDesc(41102) field.*/ \
X(EncodedMarketDisruptionFallbackUnderlierSecurityDesc,                  41102) /*!< 41102 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the MarketDisruptionFallbackUnderlierSecurityDesc(41100) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the MarketDisruptionFallbackUnderlierSecurityDesc(41100) field.*/ \
X(MarketDisruptionFallbackOpenUnits,                                     41103) /*!< 41103 (Qty FIX.5.0SP2) If there are multiple underlying assets, this specifies the number of units (index or securities) that constitute the underlier of the swap. In the case of a basket swap, this is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.*/ \
X(MarketDisruptionFallbackBasketCurrency,                                41104) /*!< 41104 (Currency FIX.5.0SP2) Specifies the currency if the underlier is a basket. Uses ISO 4217 currency codes.*/ \
X(MarketDisruptionFallbackBasketDivisor,                                 41105) /*!< 41105 (float FIX.5.0SP2) Specifies the basket divisor amount. This value is normally used to adjust the constituent weight for pricing or to adjust for dividends, or other corporate actions.*/ \
X(ExerciseDesc,                                                          41106) /*!< 41106 (String FIX.5.0SP2) A description of the option exercise.*/ \
X(EncodedExerciseDescLen,                                                41107) /*!< 41107 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedExerciseDesc(41102) field.*/ \
X(EncodedExerciseDesc,                                                   41108) /*!< 41108 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the ExerciseDesc(41106) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the ExerciseDesc(41106) field.*/ \
X(AutomaticExerciseIndicator,                                            41109) /*!< 41109 (Boolean FIX.5.0SP2) Indicates (when 'Y') that exercise is automatic when the strike price is crossed or the underlying trade is in the money.*/ \
X(AutomaticExerciseThresholdRate,                                        41110) /*!< 41110 (float FIX.5.0SP2) The threshold rate for triggering automatic exercise.*/ \
X(ExerciseConfirmationMethod,                                            41111) /*!< 41111 (int FIX.5.0SP2) Indicates whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent. */ \
X(ManualNoticeBusinessCenter,                                            41112) /*!< 41112 (String FIX.5.0SP2) Identifies the business center used for adjusting the time for manual exercise notice. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(FallbackExerciseIndicator,                                             41113) /*!< 41113 (Boolean FIX.5.0SP2) Indicates whether the notional amount of the underlying swap, not previously exercised under the option, will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than one tenth of a percentage point (0.10% or 0.001).*/ \
X(LimitedRightToConfirmIndicator,                                        41114) /*!< 41114 (Boolean FIX.5.0SP2) Indicates whether the Seller may request the Buyer to confirm its intent to exercise if not done on or before the expiration time on the expiration date. If true ("Y") specific rules will apply in relation to the settlement mode.*/ \
X(ExerciseSplitTicketIndicator,                                          41115) /*!< 41115 (Boolean FIX.5.0SP2) Indicates in physical settlement of bond and convertible bond options whether the party required to deliver the bonds will divide those to be delivered as notifying party desires to facilitate delivery obligations.*/ \
X(NoOptionExerciseBusinessCenters,                                       41116) /*!< 41116 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(OptionExerciseBusinessCenter,                                          41117) /*!< 41117 (String FIX.5.0SP2) The business center calendar used to adjust the option exercise dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(OptionExerciseBusinessDayConvention,                                   41118) /*!< 41118 (int FIX.5.0SP2) The business day convention used to adjust the option exercise dates. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(OptionExerciseEarliestDateOffsetDayType,                               41119) /*!< 41119 (int FIX.5.0SP2) Specifies the day type of the relative earliest option exercise date offset.*/ \
X(OptionExerciseEarliestDateOffsetPeriod,                                41120) /*!< 41120 (int FIX.5.0SP2) Time unit multiplier for the relative earliest exercise date offset.  */ \
X(OptionExerciseEarliestDateOffsetUnit,                                  41121) /*!< 41121 (String FIX.5.0SP2) Time unit associated with the relative earliest exercise date offset. */ \
X(OptionExerciseFrequencyPeriod,                                         41122) /*!< 41122 (int FIX.5.0SP2) Time unit multiplier for the frequency of exercise dates. */ \
X(OptionExerciseFrequencyUnit,                                           41123) /*!< 41123 (String FIX.5.0SP2) Time unit associated with the frequency of exercise dates. */ \
X(OptionExerciseStartDateUnadjusted,                                     41124) /*!< 41124 (LocalMktDate FIX.5.0SP2) The unadjusted start date for calculating periodic exercise dates.*/ \
X(OptionExerciseStartDateRelativeTo,                                     41125) /*!< 41125 (int FIX.5.0SP2) Specifies the anchor date when the option exercise start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(OptionExerciseStartDateOffsetPeriod,                                   41126) /*!< 41126 (int FIX.5.0SP2) Time unit multiplier for the relative exercise start date offset.  */ \
X(OptionExerciseStartDateOffsetUnit,                                     41127) /*!< 41127 (String FIX.5.0SP2) Time unit associated with the relative exercise start date offset. */ \
X(OptionExerciseStartDateOffsetDayType,                                  41128) /*!< 41128 (int FIX.5.0SP2) Specifies the day type of the relative option exercise start date offset.*/ \
X(OptionExerciseStartDateAdjusted,                                       41129) /*!< 41129 (LocalMktDate FIX.5.0SP2) The adjusted start date for calculating periodic exercise dates.*/ \
X(OptionExerciseSkip,                                                    41130) /*!< 41130 (int FIX.5.0SP2) The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.*/ \
X(OptionExerciseNominationDeadline,                                      41131) /*!< 41131 (LocalMktDate FIX.5.0SP2) Last date (adjusted) for establishing the option exercise terms.*/ \
X(OptionExerciseFirstDateUnadjusted,                                     41132) /*!< 41132 (LocalMktDate FIX.5.0SP2) The unadjusted first exercise date.*/ \
X(OptionExerciseLastDateUnadjusted,                                      41133) /*!< 41133 (LocalMktDate FIX.5.0SP2) The unadjusted last exercise date.*/ \
X(OptionExerciseEarliestTime,                                            41134) /*!< 41134 (LocalMktTime FIX.5.0SP2) The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) (i) on the expriation date, in the case of a European style option, (ii) on each Bermuda option exercise date and the expiration date, in the case of a Bermuda style option, (iii) the commencement date to, and including, the expiration date, in the case of an American option.*/ \
X(OptionExerciseLatestTime,                                              41135) /*!< 41135 (LocalMktTime FIX.5.0SP2) The latest exercise time.  See also OptionExerciseEarliestTime(41134).*/ \
X(OptionExerciseTimeBusinessCenter,                                      41136) /*!< 41136 (String FIX.5.0SP2) The business center used to determine the locale for option exercise time, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values*/ \
X(NoOptionExerciseDates,                                                 41137) /*!< 41137 (NumInGroup FIX.5.0SP2) Number of dates in the repeating group.*/ \
X(OptionExerciseDate,                                                    41138) /*!< 41138 (LocalMktDate FIX.5.0SP2) The option exercise fixed date, unadjusted or adjusted depending on OptionExerciseDateType(41139).*/ \
X(OptionExerciseDateType,                                                41139) /*!< 41139 (int FIX.5.0SP2) Specifies the type of date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(NoOptionExerciseExpirationDateBusinessCenters,                         41140) /*!< 41140 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(OptionExerciseExpirationDateBusinessCenter,                            41141) /*!< 41141 (String FIX.5.0SP2) The business center calendar used to adjust the option exercise expiration dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(OptionExerciseExpirationDateBusinessDayConvention,                     41142) /*!< 41142 (int FIX.5.0SP2) The business day convention used to adjust the option exercise expiration dates. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(OptionExerciseExpirationDateRelativeTo,                                41143) /*!< 41143 (int FIX.5.0SP2) Specifies the anchor date when the option exercise expiration date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(OptionExerciseExpirationDateOffsetPeriod,                              41144) /*!< 41144 (int FIX.5.0SP2) Time unit multiplier for the relative exercise expiration date offset.  */ \
X(OptionExerciseExpirationDateOffsetUnit,                                41145) /*!< 41145 (String FIX.5.0SP2) Time unit associated with the relative exercise expiration date offset.*/ \
X(OptionExerciseExpirationFrequencyPeriod,                               41146) /*!< 41146 (int FIX.5.0SP2) Time unit multiplier for the frequency of exercise expiration dates. */ \
X(OptionExerciseExpirationFrequencyUnit,                                 41147) /*!< 41147 (String FIX.5.0SP2) Time unit associated with the frequency of exercise expiration dates. */ \
X(OptionExerciseExpirationRollConvention,                                41148) /*!< 41148 (String FIX.5.0SP2) The convention for determining the sequence of exercise expiration dates. It is used in conjunction with a specified frequency. Used only to override the roll convention defined in the DateAdjustment component in Instrument.*/ \
X(OptionExerciseExpirationDateOffsetDayType,                             41149) /*!< 41149 (int FIX.5.0SP2) Specifies the day type of the relative option exercise expiration date offset.*/ \
X(OptionExerciseExpirationTime,                                          41150) /*!< 41150 (LocalMktTime FIX.5.0SP2) The option exercise expiration time.*/ \
X(OptionExerciseExpirationTimeBusinessCenter,                            41151) /*!< 41151 (String FIX.5.0SP2) The business center used to determine the locale for option exercise expiration time, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoOptionExerciseExpirationDates,                                       41152) /*!< 41152 (NumInGroup FIX.5.0SP2) Number of fixed exercise expiration dates in the repeating group.*/ \
X(OptionExerciseExpirationDate,                                          41153) /*!< 41153 (LocalMktDate FIX.5.0SP2) An adjusted or unadjusted fixed option exercise expiration date.*/ \
X(OptionExerciseExpirationDateType,                                      41154) /*!< 41154 (int FIX.5.0SP2) Specifies the type of option exercise expiration date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(PaymentUnitOfMeasure,                                                  41155) /*!< 41155 (String FIX.5.0SP2) Used to express the unit of measure (UOM) of the payment amount if not in the currency of the trade.*/ \
X(PaymentDateRelativeTo,                                                 41156) /*!< 41156 (int FIX.5.0SP2) Specifies the anchor date when the payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentDateOffsetPeriod,                                               41157) /*!< 41157 (int FIX.5.0SP2) Time unit multiplier for the relative payment date offset. */ \
X(PaymentDateOffsetUnit,                                                 41158) /*!< 41158 (String FIX.5.0SP2) Time unit associated with the relative payment date offset. */ \
X(PaymentDateOffsetDayType,                                              41159) /*!< 41159 (int FIX.5.0SP2) Specifies the day type of the relative payment date offset.*/ \
X(PaymentForwardStartType,                                               41160) /*!< 41160 (int FIX.5.0SP2) Forward start premium type.*/ \
X(NoPaymentScheduleFixingDays,                                           41161) /*!< 41161 (NumInGroup FIX.5.0SP2) Number of fixing days in the repeating group.*/ \
X(PaymentScheduleFixingDayOfWeek,                                        41162) /*!< 41162 (int FIX.5.0SP2) The day of the week on which fixing will take place.  */ \
X(PaymentScheduleFixingDayNumber,                                        41163) /*!< 41163 (int FIX.5.0SP2) The occurrence of the day of week on which fixing takes place. */ \
X(PaymentScheduleXID,                                                    41164) /*!< 41164 (XID FIX.5.0SP2) Identifier of this PaymentSchedule for cross referencing elsewhere in the message.*/ \
X(PaymentScheduleXIDRef,                                                 41165) /*!< 41165 (XIDREF FIX.5.0SP2) Reference to payment schedule elsewhere in the message.*/ \
X(PaymentScheduleRateCurrency,                                           41166) /*!< 41166 (Currency FIX.5.0SP2) The currency of the schedule rate. Uses ISO 4217 currency codes.*/ \
X(PaymentScheduleRateUnitOfMeasure,                                      41167) /*!< 41167 (String FIX.5.0SP2) The schedule rate unit of measure (UOM).*/ \
X(PaymentScheduleRateConversionFactor,                                   41168) /*!< 41168 (float FIX.5.0SP2) The number to be multiplied by the derived floating rate of the payment schedule in order to arrive at the payment rate. If omitted, the schedule rate conversion factor is 1. */ \
X(PaymentScheduleRateSpreadType,                                         41169) /*!< 41169 (int FIX.5.0SP2) Identifies whether the rate spread is an absolute value to be added to the index rate or a percentage of the index rate.*/ \
X(PaymentScheduleSettlPeriodPrice,                                       41170) /*!< 41170 (Price FIX.5.0SP2) The schedule settlement period price.*/ \
X(PaymentScheduleSettlPeriodPriceCurrency,                               41171) /*!< 41171 (Currency FIX.5.0SP2) Specifies the currency of the schedule settlement period price.  Uses ISO 4217 currency codes.*/ \
X(PaymentScheduleSettlPeriodPriceUnitOfMeasure,                          41172) /*!< 41172 (String FIX.5.0SP2) The settlement period price unit of measure (UOM).*/ \
X(PaymentScheduleStepUnitOfMeasure,                                      41173) /*!< 41173 (String FIX.5.0SP2) The schedule step unit of measure (UOM).*/ \
X(PaymentScheduleFixingDayDistribution,                                  41174) /*!< 41174 (int FIX.5.0SP2) The distribution of fixing days.*/ \
X(PaymentScheduleFixingDayCount,                                         41175) /*!< 41175 (int FIX.5.0SP2) The number of days over which fixing should take place.*/ \
X(PaymentScheduleFixingLagPeriod,                                        41176) /*!< 41176 (int FIX.5.0SP2) Time unit multiplier for the fixing lag duration.  */ \
X(PaymentScheduleFixingLagUnit,                                          41177) /*!< 41177 (String FIX.5.0SP2) Time unit associated with the fixing lag duration. */ \
X(PaymentScheduleFixingFirstObservationDateOffsetPeriod,                 41178) /*!< 41178 (int FIX.5.0SP2) Time unit multiplier for the relative first observation date offset.*/ \
X(PaymentScheduleFixingFirstObservationDateOffsetUnit,                   41179) /*!< 41179 (String FIX.5.0SP2) Time unit associated with the relative first observation date offset.*/ \
X(PaymentStreamFlatRateIndicator,                                        41180) /*!< 41180 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', the Flat Rate is the New Worldwide Tanker Nominal Freight Scale for the Freight Index Route taken at the Trade Date of the transaction “Fixed”. If  'N' it is taken on each Pricing Date “Floating”.*/ \
X(PaymentStreamFlatRateAmount,                                           41181) /*!< 41181 (Amt FIX.5.0SP2) Specifies the actual monetary value of the flat rate when PaymentStreamFlatRateIndicator(41180) = 'Y'.*/ \
X(PaymentStreamFlatRateCurrency,                                         41182) /*!< 41182 (Currency FIX.5.0SP2) Specifies the currency of the actual flat rate.  Uses ISO 4217 currency codes.*/ \
X(PaymentStreamMaximumPaymentAmount,                                     41183) /*!< 41183 (Amt FIX.5.0SP2) Specifies the limit on the total payment amount.*/ \
X(PaymentStreamMaximumPaymentCurrency,                                   41184) /*!< 41184 (Currency FIX.5.0SP2) Specifies the currency of total payment amount limit.  Uses ISO 4217 currency codes.*/ \
X(PaymentStreamMaximumTransactionAmount,                                 41185) /*!< 41185 (Amt FIX.5.0SP2) Specifies the limit on the payment amount that goes out in any particular calculation period.*/ \
X(PaymentStreamMaximumTransactionCurrency,                               41186) /*!< 41186 (Currency FIX.5.0SP2) Specifies the currency of the period payment amount limit. Uses ISO 4217 currency codes.*/ \
X(PaymentStreamFixedAmountUnitOfMeasure,                                 41187) /*!< 41187 (String FIX.5.0SP2) Specifies the fixed payment amount unit of measure (UOM).*/ \
X(PaymentStreamTotalFixedAmount,                                         41188) /*!< 41188 (Amt FIX.5.0SP2) Specifies the total fixed payment amount.*/ \
X(PaymentStreamWorldScaleRate,                                           41189) /*!< 41189 (float FIX.5.0SP2) The number of Worldscale points for purposes of the calculation of a fixed amount for a wet voyage charter commodity swap.*/ \
X(PaymentStreamContractPrice,                                            41190) /*!< 41190 (Price FIX.5.0SP2) The price per relevant unit for purposes of the calculation of a fixed amount for a dry voyage charter or time charter commodity swap.*/ \
X(PaymentStreamContractPriceCurrency,                                    41191) /*!< 41191 (Currency FIX.5.0SP2) Specifies the currency of PaymentStreamContractPrice(41190). Uses ISO 4217 currency codes.*/ \
X(NoPaymentStreamPricingBusinessCenters,                                 41192) /*!< 41192 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(PaymentStreamPricingBusinessCenter,                                    41193) /*!< 41193 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's pricing dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStreamRateIndex2CurvePeriod,                                    41194) /*!< 41194 (int FIX.5.0SP2) Secondary time unit multiplier for the payment stream's floating rate index curve.  */ \
X(PaymentStreamRateIndex2CurveUnit,                                      41195) /*!< 41195 (String FIX.5.0SP2) Secondary time unit associated with the payment stream's floating rate index curve.  */ \
X(PaymentStreamRateIndexLocation,                                        41196) /*!< 41196 (String FIX.5.0SP2) Specifies the location of the floating rate index.*/ \
X(PaymentStreamRateIndexLevel,                                           41197) /*!< 41197 (Qty FIX.5.0SP2) This is the weather Cooling Degree Days (CDD), Heating Degree Days (HDD) or HDD index level specified as the number of (amount of) weather index units specified by the parties in the related confirmation.*/ \
X(PaymentStreamRateIndexUnitOfMeasure,                                   41198) /*!< 41198 (String FIX.5.0SP2) The unit of measure (UOM) of the rate index level.*/ \
X(PaymentStreamSettlLevel,                                               41199) /*!< 41199 (int FIX.5.0SP2) Specifies how weather index units are to be calculated.*/ \
X(PaymentStreamReferenceLevel,                                           41200) /*!< 41200 (Qty FIX.5.0SP2) This is the weather Cooling Degree Days (CDD), Heating Degree Days (HDD) or HDD reference level specified as the number of (amount of) weather index units specified by the parties in the related confirmation.*/ \
X(PaymentStreamReferenceLevelUnitOfMeasure,                              41201) /*!< 41201 (String FIX.5.0SP2) The unit of measure (UOM) of the rate reference level. */ \
X(PaymentStreamReferenceLevelEqualsZeroIndicator,                        41202) /*!< 41202 (Boolean FIX.5.0SP2) When set to 'Y', it indicates the weather reference level equals zero.*/ \
X(PaymentStreamRateSpreadCurrency,                                       41203) /*!< 41203 (Currency FIX.5.0SP2) Specifies the currency of the floating rate spread. Uses ISO 4217 currency codes.*/ \
X(PaymentStreamRateSpreadUnitOfMeasure,                                  41204) /*!< 41204 (String FIX.5.0SP2) Species the unit of measure (UOM) of the floating rate spread. */ \
X(PaymentStreamRateConversionFactor,                                     41205) /*!< 41205 (float FIX.5.0SP2) The number to be multiplied by the derived floating rate of the payment stream in order to arrive at the payment rate. If omitted, the floating rate conversion factor is 1. */ \
X(PaymentStreamRateSpreadType,                                           41206) /*!< 41206 (int FIX.5.0SP2) Identifies whether the rate spread is an absolute value to be added to the index rate or a percentage of the index rate.*/ \
X(PaymentStreamLastResetRate,                                            41207) /*!< 41207 (Percentage FIX.5.0SP2) The floating rate determined at the most recent reset. The rate is expressed in decimal form, e.g. 5% is represented as 0.05.*/ \
X(PaymentStreamFinalRate,                                                41208) /*!< 41208 (Percentage FIX.5.0SP2) The floating rate determined at the final reset. The rate is expressed in decimal form, e.g. 5% is represented as 0.05.*/ \
X(PaymentStreamCalculationLagPeriod,                                     41209) /*!< 41209 (int FIX.5.0SP2) Time unit multiplier for the calculation lag duration.*/ \
X(PaymentStreamCalculationLagUnit,                                       41210) /*!< 41210 (String FIX.5.0SP2) Time unit associated with the calculation lag duration.*/ \
X(PaymentStreamFirstObservationDateOffsetPeriod,                         41211) /*!< 41211 (int FIX.5.0SP2) Time unit multiplier for the relative first observation date offset.*/ \
X(PaymentStreamFirstObservationDateOffsetUnit,                           41212) /*!< 41212 (String FIX.5.0SP2) Time unit associated with the relative first observation date offset.*/ \
X(PaymentStreamPricingDayType,                                           41213) /*!< 41213 (int FIX.5.0SP2) Specifies the commodity pricing day type.*/ \
X(PaymentStreamPricingDayDistribution,                                   41214) /*!< 41214 (int FIX.5.0SP2) The distribution of pricing days.*/ \
X(PaymentStreamPricingDayCount,                                          41215) /*!< 41215 (int FIX.5.0SP2) The number of days over which pricing should take place.*/ \
X(PaymentStreamPricingBusinessCalendar,                                  41216) /*!< 41216 (String FIX.5.0SP2) Specifies the business calendar to use for pricing.  \
 \
See http://www.fpml.org/coding-scheme/commodity-business-calendar for values.*/ \
X(PaymentStreamPricingBusinessDayConvention,                             41217) /*!< 41217 (int FIX.5.0SP2) The business day convention used to adjust the payent stream's pricing dates. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(DeliveryStreamRiskApportionmentSource,                                 41218) /*!< 41218 (String FIX.5.0SP2) Specifies the source or legal framework for the risk apportionment.   \
 \
See http://www.fixtradingcommunity.org/codelists#Risk_Apportionment_Source for the details of the external code list.*/ \
X(LegDeliveryStreamRiskApportionmentSource,                              41219) /*!< 41219 (String FIX.5.0SP2) Specifies the source or legal framework for the risk apportionment.   \
 \
See http://www.fixtradingcommunity.org/codelists#Risk_Apportionment_Source for the details of the external code list.*/ \
X(NoPaymentStreamPaymentDates,                                           41220) /*!< 41220 (NumInGroup FIX.5.0SP2) Number of payment dates in the repeating group.*/ \
X(PaymentStreamPaymentDate,                                              41221) /*!< 41221 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted fixed stream payment date.*/ \
X(PaymentStreamPaymentDateType,                                          41222) /*!< 41222 (int FIX.5.0SP2) Specifies the type of payment date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(PaymentStreamMasterAgreementPaymentDatesIndicator,                     41223) /*!< 41223 (Boolean FIX.5.0SP2) When set to 'Y', it indicates that payment dates are specified in the relevant master agreement.*/ \
X(NoPaymentStreamPricingDates,                                           41224) /*!< 41224 (NumInGroup FIX.5.0SP2) Number of pricing dates in the repeating group.*/ \
X(PaymentStreamPricingDate,                                              41225) /*!< 41225 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted fixed stream pricing date.*/ \
X(PaymentStreamPricingDateType,                                          41226) /*!< 41226 (int FIX.5.0SP2) Specifies the type of pricing date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(NoPaymentStreamPricingDays,                                            41227) /*!< 41227 (NumInGroup FIX.5.0SP2) Number of pricing days in the repeating group.*/ \
X(PaymentStreamPricingDayOfWeek,                                         41228) /*!< 41228 (int FIX.5.0SP2) The day of the week on which pricing takes place.*/ \
X(PaymentStreamPricingDayNumber,                                         41229) /*!< 41229 (int FIX.5.0SP2) The occurrence of the day of week on which pricing takes place.  */ \
X(NoPricingDateBusinessCenters,                                          41230) /*!< 41230 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(PricingDateBusinessCenter,                                             41231) /*!< 41231 (String FIX.5.0SP2) The business center calendar used to adjust pricing or fixing dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PricingDateUnadjusted,                                                 41232) /*!< 41232 (LocalMktDate FIX.5.0SP2) The unadjusted pricing or fixing date.*/ \
X(PricingDateBusinessDayConvention,                                      41233) /*!< 41233 (int FIX.5.0SP2) The business day convention used to adjust pricing or fixing dates. Used only to override the business day convention defined in the DateAdjustment component within the Instrument component.*/ \
X(PricingDateAdjusted,                                                   41234) /*!< 41234 (LocalMktDate FIX.5.0SP2) The adjusted pricing or fixing date.*/ \
X(PricingTime,                                                           41235) /*!< 41235 (LocalMktTime FIX.5.0SP2) Specifies the local market time of the pricing or fixing.*/ \
X(PricingTimeBusinessCenter,                                             41236) /*!< 41236 (String FIX.5.0SP2) Specifies the business center for determining the pricing or fixing time. See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoStreamAssetAttributes,                                               41237) /*!< 41237 (NumInGroup FIX.5.0SP2) Number of asset attribute entries in the group.*/ \
X(StreamAssetAttributeType,                                              41238) /*!< 41238 (String FIX.5.0SP2) Specifies the name of the attribute.   \
 \
See http://www.fixtradingcommunity.org/codelists#Asset_Attribute_Types for code list of applicable asset attribute types.*/ \
X(StreamAssetAttributeValue,                                             41239) /*!< 41239 (String FIX.5.0SP2) Specifies the value of the attribute.*/ \
X(StreamAssetAttributeLimit,                                             41240) /*!< 41240 (String FIX.5.0SP2) Limit or lower acceptable value of the attribute.*/ \
X(NoStreamCalculationPeriodDates,                                        41241) /*!< 41241 (NumInGroup FIX.5.0SP2) Number of calculation period dates in the repeating group.*/ \
X(StreamCalculationPeriodDate,                                           41242) /*!< 41242 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted fixed calculation period date.*/ \
X(StreamCalculationPeriodDateType,                                       41243) /*!< 41243 (int FIX.5.0SP2) Specifies the type of fixed calculation period date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(StreamCalculationPeriodDatesXID,                                       41244) /*!< 41244 (XID FIX.5.0SP2) Identifier of this calculation period for cross referencing elsewhere in the message.*/ \
X(StreamCalculationPeriodDatesXIDRef,                                    41245) /*!< 41245 (XIDREF FIX.5.0SP2) Cross reference to another calculation period for duplicating its properties.*/ \
X(StreamCalculationBalanceOfFirstPeriod,                                 41246) /*!< 41246 (Boolean FIX.5.0SP2) When specified and set to 'Y', it indicates that the first calculation period should run from the effective date to the end of the calendar period in which the effective date falls (e.g. Jan 15 - Jan 31 if the calculation periods are one month long and effective date is Jan 15.). If 'N' or not specified, it indicates that the first calculation period should run from the effective date for one whole period (e.g. Jan 15 to Feb 14 if the calculation periods are one month long and the effective date is Jan 15.).*/ \
X(StreamCalculationCorrectionPeriod,                                     41247) /*!< 41247 (int FIX.5.0SP2) Time unit multiplier for the length of time after the publication of the data when corrections can be made.*/ \
X(StreamCalculationCorrectionUnit,                                       41248) /*!< 41248 (String FIX.5.0SP2) Time unit associated with the length of time after the publication of the data when corrections can be made.*/ \
X(NoStreamCommoditySettlBusinessCenters,                                 41249) /*!< 41249 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(StreamCommoditySettlBusinessCenter,                                    41250) /*!< 41250 (String FIX.5.0SP2) The business center calendar used to adjust the commodity delivery date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(StreamCommodityBase,                                                   41251) /*!< 41251 (String FIX.5.0SP2) Specifies the general base type of the commodity traded. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions. */ \
X(StreamCommodityType,                                                   41252) /*!< 41252 (String FIX.5.0SP2) Specifies the type of commodity product.    \
 \
For coal see http://www.fpml.org/coding-scheme/commodity-coal-product-type for values.  \
 \
For metals see http://www.fpml.org/coding-scheme/commodity-metal-product-type for values. \
 \
For bullion see http://www.fixtradingcommunity.org/codelists#Bullion_Types for the external code list of bullion types.*/ \
X(StreamCommoditySecurityID,                                             41253) /*!< 41253 (String FIX.5.0SP2) Specifies the market identifier for the commodity.*/ \
X(StreamCommoditySecurityIDSource,                                       41254) /*!< 41254 (String FIX.5.0SP2) Identifies the class or source of the StreamCommoditySecurityIDSource(41253) value.*/ \
X(StreamCommodityDesc,                                                   41255) /*!< 41255 (String FIX.5.0SP2) Description of the commodity asset.*/ \
X(EncodedStreamCommodityDescLen,                                         41256) /*!< 41256 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedStreamCommodityDesc(41257) field.*/ \
X(EncodedStreamCommodityDesc,                                            41257) /*!< 41257 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the StreamCommodityDesc(41255) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the StreamCommodityDesc(41255) field.*/ \
X(StreamCommodityUnitOfMeasure,                                          41258) /*!< 41258 (String FIX.5.0SP2) The unit of measure (UOM) of the commodity asset.*/ \
X(StreamCommodityCurrency,                                               41259) /*!< 41259 (Currency FIX.5.0SP2) Identifies the currency of the commodity asset. Uses ISO 4217 currency codes.*/ \
X(StreamCommodityExchange,                                               41260) /*!< 41260 (Exchange FIX.5.0SP2) Identifies the exchange where the commodity is traded.*/ \
X(StreamCommodityRateSource,                                             41261) /*!< 41261 (int FIX.5.0SP2) Identifies the source of rate information used for commodities.  \
 \
See http://www.fixtradingcommunity.org/codelists#Commodity_Rate_Source for code list of applicable sources.*/ \
X(StreamCommodityRateReferencePage,                                      41262) /*!< 41262 (String FIX.5.0SP2) Identifies the reference "page" from the rate source.*/ \
X(StreamCommodityRateReferencePageHeading,                               41263) /*!< 41263 (String FIX.5.0SP2) Identifies the page heading from the rate source.*/ \
X(StreamDataProvider,                                                    41264) /*!< 41264 (String FIX.5.0SP2) Specifies the commodity data or information provider.  \
 \
See http://www.fpml.org/coding-scheme/commodity-information-provider for values.*/ \
X(StreamCommodityPricingType,                                            41265) /*!< 41265 (String FIX.5.0SP2) Specifies how the pricing or rate setting of the trade is to be determined or based upon.   \
 \
See http://www.fixtradingcommunity.org/codelists#Commodity_Rate_Pricing_Type for code list of applicable commodity pricing types.*/ \
X(StreamCommodityNearbySettlDayPeriod,                                   41266) /*!< 41266 (int FIX.5.0SP2) Time unit multiplier for the nearby settlement day.*/ \
X(StreamCommodityNearbySettlDayUnit,                                     41267) /*!< 41267 (String FIX.5.0SP2) Time unit associated with the nearby settlement day.*/ \
X(StreamCommoditySettlDateUnadjusted,                                    41268) /*!< 41268 (LocalMktDate FIX.5.0SP2) The unadjusted commodity delivery date.*/ \
X(StreamCommoditySettlDateBusinessDayConvention,                         41269) /*!< 41269 (int FIX.5.0SP2) The business day convention used to adjust the commodity delivery date. Used only to override the business day convention specified in the DateAdjustment component within the Instrument component.*/ \
X(StreamCommoditySettlDateAdjusted,                                      41270) /*!< 41270 (LocalMktDate FIX.5.0SP2) The adjusted commodity delivery date.*/ \
X(StreamCommoditySettlMonth,                                             41271) /*!< 41271 (int FIX.5.0SP2) Specifies a fixed single month for commodity delivery. */ \
X(StreamCommoditySettlDateRollPeriod,                                    41272) /*!< 41272 (int FIX.5.0SP2) Time unit multiplier for the commodity delivery date roll.  */ \
X(StreamCommoditySettlDateRollUnit,                                      41273) /*!< 41273 (String FIX.5.0SP2) Time unit associated with the commodity delivery date roll.*/ \
X(StreamCommoditySettlDayType,                                           41274) /*!< 41274 (int FIX.5.0SP2) Specifies the commodity delivery roll day type.*/ \
X(StreamCommodityXID,                                                    41275) /*!< 41275 (XID FIX.5.0SP2) Identifier of this stream commodity for cross referencing elsewhere in the message.*/ \
X(StreamCommodityXIDRef,                                                 41276) /*!< 41276 (XIDREF FIX.5.0SP2) Reference to a stream commodity elsewhere in the message.*/ \
X(NoStreamCommodityAltIDs,                                               41277) /*!< 41277 (NumInGroup FIX.5.0SP2) Number of alternate security identifers.*/ \
X(StreamCommodityAltID,                                                  41278) /*!< 41278 (String FIX.5.0SP2) Alternate security identifier value for the commodity.*/ \
X(StreamCommodityAltIDSource,                                            41279) /*!< 41279 (String FIX.5.0SP2) Identifies the class or source of the alternate commodity security identifier.*/ \
X(NoStreamCommodityDataSources,                                          41280) /*!< 41280 (NumInGroup FIX.5.0SP2) Number of data sources in the repeating group. The order of entry determines priority – first is the main source, second is fallback, third is second fallback.*/ \
X(StreamCommodityDataSourceID,                                           41281) /*!< 41281 (String FIX.5.0SP2) Data source identifier.*/ \
X(StreamCommodityDataSourceIDType,                                       41282) /*!< 41282 (int FIX.5.0SP2) Type of data source identifier.*/ \
X(NoStreamCommoditySettlDays,                                            41283) /*!< 41283 (NumInGroup FIX.5.0SP2) Number of days in the repeating group.*/ \
X(StreamCommoditySettlDay,                                               41284) /*!< 41284 (int FIX.5.0SP2) Specifies the day or group of days for delivery.  */ \
X(StreamCommoditySettlTotalHours,                                        41285) /*!< 41285 (int FIX.5.0SP2) Sum of the hours specified in StreamCommoditySettlTimeGrp.*/ \
X(NoStreamCommoditySettlTimes,                                           41286) /*!< 41286 (NumInGroup FIX.5.0SP2) Number of hour ranges in the repeating group.*/ \
X(StreamCommoditySettlStart,                                             41287) /*!< 41287 (String FIX.5.0SP2) The start time for commodities settlement where delivery occurs over time. The time format is specified by the settlement time type.*/ \
X(StreamCommoditySettlEnd,                                               41288) /*!< 41288 (String FIX.5.0SP2) The end time for commodities settlement where delivery occurs over time. The time format is specified by the settlement time type.*/ \
X(NoStreamCommoditySettlPeriods,                                         41289) /*!< 41289 (NumInGroup FIX.5.0SP2) Number of commodity settlement periods in the repeating group.*/ \
X(StreamCommoditySettlCountry,                                           41290) /*!< 41290 (Country FIX.5.0SP2) Specifies the country where delivery takes place. Uses ISO 3166 2-character country code.*/ \
X(StreamCommoditySettlTimeZone,                                          41291) /*!< 41291 (String FIX.5.0SP2) Commodity delivery timezone specified as "prevailing" rather than "standard" or "daylight".   \
 \
See http://www.fixtradingcommunity.org/codelists#Prevailing_Timezones for code list of applicable prevailing timezones.*/ \
X(StreamCommoditySettlFlowType,                                          41292) /*!< 41292 (int FIX.5.0SP2) Specifies the commodity delivery flow type.*/ \
X(StreamCommoditySettlPeriodNotional,                                    41293) /*!< 41293 (Qty FIX.5.0SP2) Specifies the delivery quantity associated with this settlement period.*/ \
X(StreamCommoditySettlPeriodNotionalUnitOfMeasure,                       41294) /*!< 41294 (String FIX.5.0SP2) Specifies the unit of measure (UOM) of the delivery quantity associated with this settlement period.*/ \
X(StreamCommoditySettlPeriodFrequencyPeriod,                             41295) /*!< 41295 (int FIX.5.0SP2) Time unit multiplier for the settlement period frequency. */ \
X(StreamCommoditySettlPeriodFrequencyUnit,                               41296) /*!< 41296 (String FIX.5.0SP2) Time unit associated with the settlement period frequency. */ \
X(StreamCommoditySettlPeriodPrice,                                       41297) /*!< 41297 (Price FIX.5.0SP2) The settlement period price.*/ \
X(StreamCommoditySettlPeriodPriceUnitOfMeasure,                          41298) /*!< 41298 (String FIX.5.0SP2) Specifies the settlement period price unit of measure (UOM). */ \
X(StreamCommoditySettlPeriodPriceCurrency,                               41299) /*!< 41299 (Currency FIX.5.0SP2) The currency of the settlement period price. Uses ISO 4217 currency codes.*/ \
X(StreamCommoditySettlHolidaysProcessingInstruction,                     41300) /*!< 41300 (int FIX.5.0SP2) Indicates whether holidays are included in the settlement periods. Required for electricity contracts.*/ \
X(StreamCommoditySettlPeriodXID,                                         41301) /*!< 41301 (XID FIX.5.0SP2) Identifier of this settlement period for cross referencing elsewhere in the message.*/ \
X(StreamCommoditySettlPeriodXIDRef,                                      41302) /*!< 41302 (XIDREF FIX.5.0SP2) Cross reference to another settlement period for duplicating its properties.*/ \
X(StreamXID,                                                             41303) /*!< 41303 (XID FIX.5.0SP2) Identifier of this Stream for cross referencing elsewhere in the message.*/ \
X(PaymentLegRefID,                                                       41304) /*!< 41304 (String FIX.5.0SP2) Identifies the instrument leg in which this payment applies to by referencing the leg's LegID(1788).*/ \
X(StreamNotionalXIDRef,                                                  41305) /*!< 41305 (XIDREF FIX.5.0SP2) Cross reference to another Stream notional for duplicating its properties.*/ \
X(StreamNotionalFrequencyPeriod,                                         41306) /*!< 41306 (int FIX.5.0SP2) Time unit multiplier for the swap stream's notional frequency. */ \
X(StreamNotionalFrequencyUnit,                                           41307) /*!< 41307 (String FIX.5.0SP2) Time unit associated with the swap stream's notional frequency. */ \
X(StreamNotionalCommodityFrequency,                                      41308) /*!< 41308 (int FIX.5.0SP2) The commodity's notional or quantity delivery frequency.*/ \
X(StreamNotionalUnitOfMeasure,                                           41309) /*!< 41309 (String FIX.5.0SP2) Specifies the delivery stream quantity unit of measure (UOM). */ \
X(StreamTotalNotional,                                                   41310) /*!< 41310 (Qty FIX.5.0SP2) Total notional or delivery quantity over the term of the contract.*/ \
X(StreamTotalNotionalUnitOfMeasure,                                      41311) /*!< 41311 (String FIX.5.0SP2) Specifies the unit of measure (UOM) for the total notional or delivery quantity over the term of the contract.*/ \
X(NoMandatoryClearingJurisdictions,                                      41312) /*!< 41312 (NumInGroup FIX.5.0SP2) Number of mandatory clearing jurisdictions.*/ \
X(MandatoryClearingJurisdiction,                                         41313) /*!< 41313 (String FIX.5.0SP2) Identifier of the regulatory jurisdiction requiring the trade to be cleared.*/ \
X(UnderlyingProtectionTermXIDRef,                                        41314) /*!< 41314 (XIDREF FIX.5.0SP2) Reference to the protection terms applicable to this entity or obligation. Contains the same XID named string value of the instance in the ProtectionTerms repeating group that applies to this Underlying.*/ \
X(UnderlyingSettlTermXIDRef,                                             41315) /*!< 41315 (XIDREF FIX.5.0SP2) Reference to the cash or physical settlement terms applicable to this entity or obligation. Contains the same XID named string value of the instance in the appropriate repeating group that applies to this Underlying.*/ \
X(NoLegAdditionalTermBondRefs,                                           41316) /*!< 41316 (NumInGroup FIX.5.0SP2) Number of bonds in the repeating group.*/ \
X(LegAdditionalTermBondSecurityID,                                       41317) /*!< 41317 (String FIX.5.0SP2) Security identifier of the bond.*/ \
X(LegAdditionalTermBondSecurityIDSource,                                 41318) /*!< 41318 (String FIX.5.0SP2) Identifies the source scheme of the LegAdditionalTermBondSecurityID(41317) value.*/ \
X(LegAdditionalTermBondDesc,                                             41319) /*!< 41319 (String FIX.5.0SP2) Description of the bond.*/ \
X(EncodedLegAdditionalTermBondDescLen,                                   41320) /*!< 41320 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegAdditionalTermBondDesc(41321) field.*/ \
X(EncodedLegAdditionalTermBondDesc,                                      41321) /*!< 41321 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegAdditionalTermBondDesc(41319) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegAdditionalTermBondDesc(41319) field.*/ \
X(LegAdditionalTermBondCurrency,                                         41322) /*!< 41322 (Currency FIX.5.0SP2) Specifies the currency the bond value is denominated in.  Uses ISO 4217 currency codes.*/ \
X(LegAdditionalTermBondIssuer,                                           41323) /*!< 41323 (String FIX.5.0SP2) Issuer of the bond.*/ \
X(EncodedLegAdditionalTermBondIssuerLen,                                 41324) /*!< 41324 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegAdditionalTermBondIssuer(41325) field.*/ \
X(EncodedLegAdditionalTermBondIssuer,                                    41325) /*!< 41325 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegAdditionalTermBondIssuer(41323) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegAdditionalTermBondIssuer(41323) field.*/ \
X(LegAdditionalTermBondSeniority,                                        41326) /*!< 41326 (String FIX.5.0SP2) Specifies the bond's payment priority in the event of a default.*/ \
X(LegAdditionalTermBondCouponType,                                       41327) /*!< 41327 (int FIX.5.0SP2) Specifies the coupon type of the bond.*/ \
X(LegAdditionalTermBondCouponRate,                                       41328) /*!< 41328 (Percentage FIX.5.0SP2) Coupon rate of the bond.  See also CouponRate(223).*/ \
X(LegAdditionalTermBondMaturityDate,                                     41329) /*!< 41329 (LocalMktDate FIX.5.0SP2) The maturity date of the bond.*/ \
X(LegAdditionalTermBondParValue,                                         41330) /*!< 41330 (Amt FIX.5.0SP2) The par value of the bond.*/ \
X(LegAdditionalTermBondCurrentTotalIssuedAmount,                         41331) /*!< 41331 (Amt FIX.5.0SP2) Total issued amount of the bond.*/ \
X(LegAdditionalTermBondCouponFrequencyPeriod,                            41332) /*!< 41332 (int FIX.5.0SP2) Time unit multiplier for the frequency of the bond's coupon payment. */ \
X(LegAdditionalTermBondCouponFrequencyUnit,                              41333) /*!< 41333 (String FIX.5.0SP2) Time unit associated with the frequency of the bond's coupon payment.  */ \
X(LegAdditionalTermBondDayCount,                                         41334) /*!< 41334 (int FIX.5.0SP2) The day count convention used in interest calculations for a bond or an interest bearing security.*/ \
X(NoLegAdditionalTerms,                                                  41335) /*!< 41335 (NumInGroup FIX.5.0SP2) Number of additional terms in the repeating group.*/ \
X(LegAdditionalTermConditionPrecedentBondIndicator,                      41336) /*!< 41336 (Boolean FIX.5.0SP2) Indicates whether the condition precedent bond is applicable. The swap contract is only valid if the bond is issued and if there is any dispute over the terms of fixed stream then the bond terms would be used.*/ \
X(LegAdditionalTermDiscrepancyClauseIndicator,                           41337) /*!< 41337 (Boolean FIX.5.0SP2) Indicates whether the discrepancy clause is applicable.*/ \
X(UnderlyingMarketDisruptionValue,                                       41338) /*!< 41338 (String FIX.5.0SP2) Applicable value for UnderlyingMarketDisruptionEvent(41865).*/ \
X(UnderlyingMarketDisruptionFallbackValue,                               41339) /*!< 41339 (String FIX.5.0SP2) Applicable value for UnderlyingMarketDisruptionFallbackType(41867).*/ \
X(NoUnderlyingAdditionalTermBondRefs,                                    41340) /*!< 41340 (NumInGroup FIX.5.0SP2) Number of bonds in the repeating group.*/ \
X(UnderlyingAdditionalTermBondSecurityID,                                41341) /*!< 41341 (String FIX.5.0SP2) Security identifier of the bond.  */ \
X(NoLegCashSettlDealers,                                                 41342) /*!< 41342 (NumInGroup FIX.5.0SP2) Number of dealers in the repeating group.*/ \
X(LegCashSettlDealer,                                                    41343) /*!< 41343 (String FIX.5.0SP2) Identifies the dealer from whom price quotations for the reference obligation are obtained for the purpose of cash settlement valuation calculation.*/ \
X(NoLegCashSettlTerms,                                                   41344) /*!< 41344 (NumInGroup FIX.5.0SP2) Number of elements in the repeating group.*/ \
X(LegCashSettlCurrency,                                                  41345) /*!< 41345 (Currency FIX.5.0SP2) Specifies the currency the LegCashSettlAmount(41357) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(LegCasSettlValuationFirstBusinessDayOffset,                            41346) /*!< 41346 (int FIX.5.0SP2) The number of business days after settlement conditions have been satisfied, when the calculation agent is to obtain a price quotation on the reference obligation for purposes of cash settlement.*/ \
X(LegCashSettlValuationSubsequentBusinessDaysOffset,                     41347) /*!< 41347 (int FIX.5.0SP2) The number of business days between successive valuation dates when multiple valuation dates are applicable for cash settlement.*/ \
X(LegCashSettlNumOfValuationDates,                                       41348) /*!< 41348 (int FIX.5.0SP2) Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies the number of applicable valuation dates.*/ \
X(LegCashSettlValuationTime,                                             41349) /*!< 41349 (LocalMktTime FIX.5.0SP2) Time of valuation.*/ \
X(LegCashSettlBusinessCenter,                                            41350) /*!< 41350 (String FIX.5.0SP2) Identifies the business center calendar used at valuation time for cash settlement purposes e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegCashSettlQuoteMethod,                                               41351) /*!< 41351 (int FIX.5.0SP2) The type of quote used to determine the cash settlement price.*/ \
X(LegCashSettlQuoteAmount,                                               41352) /*!< 41352 (Amt FIX.5.0SP2) When determining the cash settlement amount, if weighted average price quotes are to be obtained for the reference obligation, this is the upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained.  If not specifed, the ISDA definitions provide for a fallback amount equal to floating rate payer calculation amount.*/ \
X(LegCashSettlQuoteCurrency,                                             41353) /*!< 41353 (Currency FIX.5.0SP2) Specifies the currency the LegCashSettlQuoteAmount(41352) is denominated in.  Uses ISO 4217 Currency Code.*/ \
X(LegCashSettlMinimumQuoteAmount,                                        41354) /*!< 41354 (Amt FIX.5.0SP2) When determining the cash settlement amount, if weighted average price quotes are to be obtained for the reference obligation, this is the minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained.  If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD1,000,000 (or its equivalent in the relevent obligation currency) or the (minimum) quoted amount.*/ \
X(LegCashSettlMinimumQuoteCurrency,                                      41355) /*!< 41355 (Currency FIX.5.0SP2) Specifies the currency the LegCashSettlQuoteMinimumAmount(41354) is denominated in.  Uses ISO 4217 Currency Code. */ \
X(LegCashSettlBusinessDays,                                              41356) /*!< 41356 (int FIX.5.0SP2) The number of business days used in the determination of the cash settlement payment date. */ \
X(LegCashSettlAmount,                                                    41357) /*!< 41357 (Amt FIX.5.0SP2) The amount paid between the trade parties, seller to the buyer, for cash settlement on the cash settlement date.*/ \
X(LegCashSettlRecoveryFactor,                                            41358) /*!< 41358 (float FIX.5.0SP2) Used for fixed recovery, this specifies the recovery level as determined at contract inception, to be applied in the event of a default.  The factor is used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date.  The amount calculated is (1 - LegCashSettlRecoveryFactor(41358)) x floating rate payer calculation amount.  The currency is derived from the floating rate payer calculation amount.*/ \
X(LegCashSettlFixedTermIndicator,                                        41359) /*!< 41359 (Boolean FIX.5.0SP2) Indicates whether fixed settlement is applicable or not applicable in a recovery lock.*/ \
X(LegCashSettlAccruedInterestIndicator,                                  41360) /*!< 41360 (Boolean FIX.5.0SP2) Indicates whether accrued interest is included or not in the value provided in LegCashSettlAmount(41357). \
 \
For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest.  \
 \
For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. */ \
X(LegCashSettlValuationMethod,                                           41361) /*!< 41361 (int FIX.5.0SP2) The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement. */ \
X(LegCashSettlTermXID,                                                   41362) /*!< 41362 (XID FIX.5.0SP2) A named string value referenced by UnderlyingSettlTermXIDRef(41315).*/ \
X(NoLegComplexEventAveragingObservations,                                41363) /*!< 41363 (NumInGroup FIX.5.0SP2) The number of averaging observations in the repeating group.*/ \
X(LegComplexEventAveragingObservationNumber,                             41364) /*!< 41364 (int FIX.5.0SP2) Cross reference to the ordinal observation as specified either in the LegComplexEventScheduleGrp or LegComplexEventPeriodDateGrp components.*/ \
X(LegComplexEventAveragingWeight,                                        41365) /*!< 41365 (float FIX.5.0SP2) The weight factor to be applied to the observation.*/ \
X(NoLegComplexEventCreditEvents,                                         41366) /*!< 41366 (NumInGroup FIX.5.0SP2) The number of credit events specified in the repeating group.*/ \
X(LegComplexEventCreditEventType,                                        41367) /*!< 41367 (String FIX.5.0SP2) Specifies the type of credit event.   \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Types for code list of applicable event types.*/ \
X(LegComplexEventCreditEventValue,                                       41368) /*!< 41368 (String FIX.5.0SP2) The credit event value appropriate to LegComplexEventCreditEventType(41367).  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Types for applicable event type values. */ \
X(LegComplexEventCreditEventCurrency,                                    41369) /*!< 41369 (Currency FIX.5.0SP2) Specifies the applicable currency when LegComplexEventCreditEventCurrency(41368) is an amount. Uses ISO 4217 currency codes.*/ \
X(LegComplexEventCreditEventPeriod,                                      41370) /*!< 41370 (int FIX.5.0SP2) Time unit multiplier for complex credit events.*/ \
X(LegComplexEventCreditEventUnit,                                        41371) /*!< 41371 (String FIX.5.0SP2) Time unit associated with complex credit events.*/ \
X(LegComplexEventCreditEventDayType,                                     41372) /*!< 41372 (int FIX.5.0SP2) Specifies the day type for the complex credit events.*/ \
X(LegComplexEventCreditEventRateSource,                                  41373) /*!< 41373 (int FIX.5.0SP2) Identifies the source of rate information used for credit events.  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Rate_Source for code list of applicable sources.*/ \
X(NoLegComplexEventCreditEventQualifiers,                                41374) /*!< 41374 (NumInGroup FIX.5.0SP2) Number of qualifiers in the repeating group.*/ \
X(LegComplexEventCreditEventQualifier,                                   41375) /*!< 41375 (char FIX.5.0SP2) Specifies a complex event qualifier. Used to further qualify LegComplexEventCreditEventType(41367). */ \
X(NoLegComplexEventPeriodDateTimes,                                      41376) /*!< 41376 (NumInGroup FIX.5.0SP2) Number of entries in the date-time repeating group.*/ \
X(LegComplexEventPeriodDate,                                             41377) /*!< 41377 (LocalMktDate FIX.5.0SP2) Averaging date for an Asian option.  \
 \
Trigger date for a Barrier or Knock option.*/ \
X(LegComplexEventPeriodTime,                                             41378) /*!< 41378 (LocalMktTime FIX.5.0SP2) Averaging time for an Asian option.*/ \
X(NoLegComplexEventPeriods,                                              41379) /*!< 41379 (NumInGroup FIX.5.0SP2) Number of periods in the repeating group.*/ \
X(LegComplexEventPeriodType,                                             41380) /*!< 41380 (int FIX.5.0SP2) Specifies the period type.*/ \
X(LegComplexEventBusinessCenter,                                         41381) /*!< 41381 (String FIX.5.0SP2) The business center for adjusting dates and times in the schedule or date-time group. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegComplexEventRateSources,                                          41382) /*!< 41382 (NumInGroup FIX.5.0SP2) Number of rate sources in the repeating group.*/ \
X(LegComplexEventRateSource,                                             41383) /*!< 41383 (int FIX.5.0SP2) Identifies the source of rate information. \
 \
For FX, the reference source to be used for the FX spot rate.*/ \
X(LegComplexEventRateSourceType,                                         41384) /*!< 41384 (int FIX.5.0SP2) Indicates whether the rate source specified is a primary or secondary source.*/ \
X(LegComplexEventReferencePage,                                          41385) /*!< 41385 (String FIX.5.0SP2) Identifies the reference page from the rate source. \
 \
For FX, the reference page to the spot rate is to be used for the reference FX spot rate. \
 \
When LegComplexEventRateSource(41383) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option.*/ \
X(LegComplexEvenReferencePageHeading,                                    41386) /*!< 41386 (String FIX.5.0SP2) Identifies the reference page heading from the rate source.*/ \
X(NoLegComplexEventDateBusinessCenters,                                  41387) /*!< 41387 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegComplexEventDateBusinessCenter,                                     41388) /*!< 41388 (String FIX.5.0SP2) The business center calendar used to adjust the event date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegComplexEventDateUnadjusted,                                         41389) /*!< 41389 (LocalMktDate FIX.5.0SP2) The unadjusted complex event date.*/ \
X(LegComplexEventDateRelativeTo,                                         41390) /*!< 41390 (int FIX.5.0SP2) Specifies the anchor date when the complex event date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegComplexEventDateOffsetPeriod,                                       41391) /*!< 41391 (int FIX.5.0SP2) Time unit multiplier for the relative date offset.*/ \
X(LegComplexEventDateOffsetUnit,                                         41392) /*!< 41392 (String FIX.5.0SP2) Time unit associated with the relative date offset.*/ \
X(LegComplexEventDateOffsetDayType,                                      41393) /*!< 41393 (int FIX.5.0SP2) Specifies the day type of the relative date offset.*/ \
X(LegComplexEventDateBusinessDayConvention,                              41394) /*!< 41394 (int FIX.5.0SP2) The business day convention used to adjust the event date.  Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegComplexEventDateAdjusted,                                           41395) /*!< 41395 (LocalMktDate FIX.5.0SP2) The adjusted complex event date.*/ \
X(LegComplexEventFixingTime,                                             41396) /*!< 41396 (LocalMktTime FIX.5.0SP2) The local market fixing time.*/ \
X(LegComplexEventFixingTimeBusinessCenter,                               41397) /*!< 41397 (String FIX.5.0SP2) The business center for determining the actual fixing times. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegComplexEventCreditEventSources,                                   41398) /*!< 41398 (NumInGroup FIX.5.0SP2) Number of event sources in the repeating group.*/ \
X(LegComplexEventCreditEventSource,                                      41399) /*!< 41399 (String FIX.5.0SP2) A newspaper or electronic news service that may publish relevant information used in the determination of whether or not a credit event has occurred.*/ \
X(NoLegComplexEventSchedules,                                            41400) /*!< 41400 (NumInGroup FIX.5.0SP2) Number of schedules in the repeating group.*/ \
X(LegComplexEventScheduleStartDate,                                      41401) /*!< 41401 (LocalMktDate FIX.5.0SP2) The start date of the schedule.*/ \
X(LegComplexEventScheduleEndDate,                                        41402) /*!< 41402 (LocalMktDate FIX.5.0SP2) The end date of the schedule.*/ \
X(LegComplexEventScheduleFrequencyPeriod,                                41403) /*!< 41403 (int FIX.5.0SP2) Time unit multiplier for the schedule date frequency. */ \
X(LegComplexEventScheduleFrequencyUnit,                                  41404) /*!< 41404 (String FIX.5.0SP2) Time unit associated with the schedule date frequency.*/ \
X(LegComplexEventScheduleRollConvention,                                 41405) /*!< 41405 (String FIX.5.0SP2) The convention for determining the sequence of dates. It is used in conjunction with a specified frequency. Used only to override the roll convention defined in the LegDateAdjustment component in InstrumentLeg.*/ \
X(ProvisionCashSettlQuoteReferencePage,                                  41406) /*!< 41406 (String FIX.5.0SP2) Identifies the reference "page" from the quote source.*/ \
X(LegProvisionCashSettlQuoteReferencePage,                               41407) /*!< 41407 (String FIX.5.0SP2) Identifies the reference "page" from the quote source.*/ \
X(NoLegDeliverySchedules,                                                41408) /*!< 41408 (NumInGroup FIX.5.0SP2) Number of delivery schedules in the repeating group.*/ \
X(LegDeliveryScheduleType,                                               41409) /*!< 41409 (int FIX.5.0SP2) Specifies the type of delivery schedule.*/ \
X(LegDeliveryScheduleXID,                                                41410) /*!< 41410 (XID FIX.5.0SP2) Identifier for this instance of delivery schedule for cross referencing elsewhere in the message.*/ \
X(LegDeliveryScheduleNotional,                                           41411) /*!< 41411 (Qty FIX.5.0SP2) Physical delivery quantity.*/ \
X(LegDeliveryScheduleNotionalUnitOfMeasure,                              41412) /*!< 41412 (String FIX.5.0SP2) Specifies the delivery quantity unit of measure (UOM). */ \
X(LegDeliveryScheduleNotionalCommodityFrequency,                         41413) /*!< 41413 (int FIX.5.0SP2) The frequency of notional delivery.*/ \
X(LegDeliveryScheduleNegativeTolerance,                                  41414) /*!< 41414 (float FIX.5.0SP2) Specifies the negative tolerance value.  The value may be an absolute quantity or a percentage, as specified in LegDeliveryScheduleToleranceType(41417).  Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(LegDeliverySchedulePositiveTolerance,                                  41415) /*!< 41415 (float FIX.5.0SP2) Specifies the positive tolerance value. The value may be an absolute quantity or a percentage, as specified in LegDeliveryScheduleToleranceType(41417). Value may exceed agreed upon value. Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(LegDeliveryScheduleToleranceUnitOfMeasure,                             41416) /*!< 41416 (String FIX.5.0SP2) Specifies the tolerance value's unit of measure (UOM).*/ \
X(LegDeliveryScheduleToleranceType,                                      41417) /*!< 41417 (int FIX.5.0SP2) Specifies the tolerance value type.*/ \
X(LegDeliveryScheduleSettlCountry,                                       41418) /*!< 41418 (Country FIX.5.0SP2) Specifies the country where delivery takes place. Uses ISO 3166 2-character country code.*/ \
X(LegDeliveryScheduleSettlTimeZone,                                      41419) /*!< 41419 (String FIX.5.0SP2) Delivery timezone specified as "prevailing" rather than "standard" or "daylight".   \
 \
See http://www.fixtradingcommunity.org/codelists#Prevailing_Timezones for code list of applicable prevailing timezones.*/ \
X(LegDeliveryScheduleSettlFlowType,                                      41420) /*!< 41420 (int FIX.5.0SP2) Specifies the delivery flow type.*/ \
X(LegDeliveryScheduleSettlHolidaysProcessingInstruction,                 41421) /*!< 41421 (int FIX.5.0SP2) Indicates whether holidays are included in the settlement periods. Required for electricity contracts.*/ \
X(NoLegDeliveryScheduleSettlDays,                                        41422) /*!< 41422 (NumInGroup FIX.5.0SP2) Number of delivery schedules in the repeating group.*/ \
X(LegDeliveryScheduleSettlDay,                                           41423) /*!< 41423 (int FIX.5.0SP2) Specifies the day or group of days for delivery.*/ \
X(LegDeliveryScheduleSettlTotalHours,                                    41424) /*!< 41424 (int FIX.5.0SP2) The sum of the total hours specified in the LegDeliveryScheduleSettlTimeGrp component.*/ \
X(NoLegDeliveryScheduleSettlTimes,                                       41425) /*!< 41425 (NumInGroup FIX.5.0SP2) Number of hour ranges in the repeating group.*/ \
X(LegDeliveryScheduleSettlStart,                                         41426) /*!< 41426 (String FIX.5.0SP2) The scheduled start time for the delivery of the commodity where delivery occurs over specified times. The format of the time value is specified in LegDeliveryScheduleSettlTimeType(41428).*/ \
X(LegDeliveryScheduleSettlEnd,                                           41427) /*!< 41427 (String FIX.5.0SP2) The scheduled end time for the delivery of the commodity where delivery occurs over specified times. The format of the time value is specified in LegDeliveryScheduleSettlTimeType(41428).*/ \
X(LegDeliveryScheduleSettlTimeType,                                      41428) /*!< 41428 (int FIX.5.0SP2) Specifies the format of the delivery start and end time values.*/ \
X(LegDeliveryStreamType,                                                 41429) /*!< 41429 (int FIX.5.0SP2) Specifies the type of delivery stream.*/ \
X(LegDeliveryStreamPipeline,                                             41430) /*!< 41430 (String FIX.5.0SP2) The name of the oil delivery pipeline.*/ \
X(LegDeliveryStreamEntryPoint,                                           41431) /*!< 41431 (String FIX.5.0SP2) The point at which the commodity will enter the delivery mechanism or pipeline.*/ \
X(LegDeliveryStreamWithdrawalPoint,                                      41432) /*!< 41432 (String FIX.5.0SP2) The point at which the commodity product will be withdrawn prior to delivery.*/ \
X(LegDeliveryStreamDeliveryPoint,                                        41433) /*!< 41433 (String FIX.5.0SP2) The point at which the commodity product will be delivered and received. Value specified should follow market convention appropriate for the commodity product.  \
 \
For bullion, see http://www.fpml.org/coding-scheme/bullion-delivery-location for values.*/ \
X(LegDeliveryStreamDeliveryRestriction,                                  41434) /*!< 41434 (int FIX.5.0SP2) Specifies under what conditions the buyer and seller should be excused of their delivery obligations.*/ \
X(LegDeliveryStreamDeliveryContingency,                                  41435) /*!< 41435 (String FIX.5.0SP2) Specifies the electricity delivery contingency. See \
 \
http://www.fpml.org/coding-scheme/electricity-transmission-contingency for values.*/ \
X(LegDeliveryStreamDeliveryContingentPartySide,                          41436) /*!< 41436 (int FIX.5.0SP2) The trade side value of the party responsible for electricity delivery contingency.*/ \
X(LegDeliveryStreamDeliverAtSourceIndicator,                             41437) /*!< 41437 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', delivery of the coal product is to be at its source.*/ \
X(LegDeliveryStreamRiskApportionment,                                    41438) /*!< 41438 (String FIX.5.0SP2) Specifies how the parties to the trade apportion responsibility for the delivery of the commodity product.  \
 \
See http://www.fixtradingcommunity.org/codelists#Risk_Apportionment for the details of the external code list.*/ \
X(LegDeliveryStreamTitleTransferLocation,                                41439) /*!< 41439 (String FIX.5.0SP2) Specifies the title transfer location.*/ \
X(LegDeliveryStreamTitleTransferCondition,                               41440) /*!< 41440 (int FIX.5.0SP2) Specifies the condition of title transfer.*/ \
X(LegDeliveryStreamImporterOfRecord,                                     41441) /*!< 41441 (String FIX.5.0SP2) A party, not necessarily of the trade, who is the Importer of Record for the purposes of paying customs duties and applicable taxes or costs related to importation.*/ \
X(LegDeliveryStreamNegativeTolerance,                                    41442) /*!< 41442 (float FIX.5.0SP2) Specifies the negative tolerance value.  The value may be an absolute quantity or a percentage, as specified in LegDeliveryStreamToleranceType(41445).  Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(LegDeliveryStreamPositiveTolerance,                                    41443) /*!< 41443 (float FIX.5.0SP2) Specifies the positive tolerance value. The value may be an absolute quantity or a percentage, as specified in LegDeliveryStreamToleranceType(41445). Value may exceed agreed upon value. Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(LegDeliveryStreamToleranceUnitOfMeasure,                               41444) /*!< 41444 (String FIX.5.0SP2) Specifies the tolerance value's unit of measure (UOM).*/ \
X(LegDeliveryStreamToleranceType,                                        41445) /*!< 41445 (int FIX.5.0SP2) Specifies the tolerance value type.*/ \
X(LegDeliveryStreamToleranceOptionSide,                                  41446) /*!< 41446 (int FIX.5.0SP2) Indicates whether the tolerance is at the seller's or buyer's option.*/ \
X(LegDeliveryStreamTotalPositiveTolerance,                               41447) /*!< 41447 (Percentage FIX.5.0SP2) The positive percent tolerance which applies to the total quantity delivered over all shipment periods. \
 \
Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%.).*/ \
X(LegDeliveryStreamTotalNegativeTolerance,                               41448) /*!< 41448 (Percentage FIX.5.0SP2) The negative percent tolerance which applies to the total quantity delivered over all shipment periods. \
 \
Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%.).*/ \
X(LegDeliveryStreamNotionalConversionFactor,                             41449) /*!< 41449 (float FIX.5.0SP2) If the notional quantity is specified in a unit that does not match the unit in which the commodity reference price is quoted, the scaling or conversion factor used to convert the commodity reference price unit into the notional quantity unit should be stated here. If there is no conversion, this field is not intended to be used.*/ \
X(LegDeliveryStreamTransportEquipment,                                   41450) /*!< 41450 (String FIX.5.0SP2) The transportation equipment with which the commodity product will be delivered and received.*/ \
X(LegDeliveryStreamElectingPartySide,                                    41451) /*!< 41451 (int FIX.5.0SP2) A reference to the party able to choose whether the gas is delivered for a particular period e.g. a swing or interruptible contract.*/ \
X(NoLegStreamAssetAttributes,                                            41452) /*!< 41452 (NumInGroup FIX.5.0SP2) Number of asset attribute entries in the group.*/ \
X(LegStreamAssetAttributeType,                                           41453) /*!< 41453 (String FIX.5.0SP2) Specifies the name of the attribute.   \
 \
See http://www.fixtradingcommunity.org/codelists#Asset_Attribute_Types for code list of applicable asset attribute types.*/ \
X(LegStreamAssetAttributeValue,                                          41454) /*!< 41454 (String FIX.5.0SP2) Specifies the value of the attribute.*/ \
X(LegStreamAssetAttributeLimit,                                          41455) /*!< 41455 (String FIX.5.0SP2) Limit or lower acceptable value of the attribute.*/ \
X(NoLegDeliveryStreamCycles,                                             41456) /*!< 41456 (NumInGroup FIX.5.0SP2) Number of commodity sources in the repeating group.*/ \
X(LegDeliveryStreamCycleDesc,                                            41457) /*!< 41457 (String FIX.5.0SP2) The delivery cycles during which the oil product will be transported in the pipeline. */ \
X(EncodedLegDeliveryStreamCycleDescLen,                                  41458) /*!< 41458 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegDeliveryStreamCycleDesc(41459) field.*/ \
X(EncodedLegDeliveryStreamCycleDesc,                                     41459) /*!< 41459 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegDeliveryStreamCycleDesc(41457) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegLeg DeliveryStream(41457) field.*/ \
X(NoLegDeliveryStreamCommoditySources,                                   41460) /*!< 41460 (NumInGroup FIX.5.0SP2) Number of commodity sources in the repeating group.*/ \
X(LegDeliveryStreamCommoditySource,                                      41461) /*!< 41461 (String FIX.5.0SP2) The SCoTA coal cargo origin, mining region, mine(s), mining complex(es), loadout(s) or river dock(s) or other point(s) of origin that seller and buyer agree are acceptable origins for the coal product. For international coal transactions, this is the origin of the coal product.  \
 \
See http://www.fpml.org/coding-scheme/commodity-coal-product-source for values.*/ \
X(LegMarketDisruptionProvision,                                          41462) /*!< 41462 (int FIX.5.0SP2) The consequences of market disruption events.*/ \
X(LegMarketDisruptionFallbackProvision,                                  41463) /*!< 41463 (int FIX.5.0SP2) Specifies the location of the fallback provision documentation.*/ \
X(LegMarketDisruptionMaximumDays,                                        41464) /*!< 41464 (int FIX.5.0SP2) Specifies the maximum number of market disruption days (commodity or bullion business days) in a contract or confirmation. If none are specified, the maximum number of market disruption days is five (5).*/ \
X(LegMarketDisruptionMaterialityPercentage,                              41465) /*!< 41465 (Percentage FIX.5.0SP2) Used when a price materiality percentage applies to the price source disruption event and this event has been specified.*/ \
X(LegMarketDisruptionMinimumFuturesContracts,                            41466) /*!< 41466 (int FIX.5.0SP2) Specifies the minimum futures contracts level that dictates whether or not a 'De Minimis Trading' event has occurred. */ \
X(NoLegMarketDisruptionEvents,                                           41467) /*!< 41467 (NumInGroup FIX.5.0SP2) Number of disruption events in the repeating group.*/ \
X(LegMarketDisruptionEvent,                                              41468) /*!< 41468 (String FIX.5.0SP2) Specifies the market disruption event.  \
 \
For commodities see http://www.fpml.org/coding-scheme/commodity-market-disruption for values.  \
 \
For foreign exchange, see http://www.fixtradingcommunity.org/codelists#Market_Disruption_Event for code list of applicable event types.*/ \
X(NoLegMarketDisruptionFallbacks,                                        41469) /*!< 41469 (NumInGroup FIX.5.0SP2) Number of fallbacks in the repeating group.*/ \
X(LegMarketDisruptionFallbackType,                                       41470) /*!< 41470 (String FIX.5.0SP2) Specifies the type of disruption fallback.   \
 \
See http://www.fpml.org/coding-scheme/commodity-market-disruption-fallback for values. */ \
X(NoLegMarketDisruptionFallbackReferencePrices,                          41471) /*!< 41471 (NumInGroup FIX.5.0SP2) Number of fallback reference securities in the repeating group.*/ \
X(LegMarketDisruptionFallbackUnderlierType,                              41472) /*!< 41472 (int FIX.5.0SP2) The type of reference price underlier.*/ \
X(LegMarketDisruptionFallbackUnderlierSecurityID,                        41473) /*!< 41473 (String FIX.5.0SP2) Specifies the identifier value of the security.*/ \
X(LegMarketDisruptionFallbackUnderlierSecurityIDSource,                  41474) /*!< 41474 (String FIX.5.0SP2) Specifies the class or source scheme of the security identifier.*/ \
X(LegMarketDisruptionFallbackUnderlierSecurityDesc,                      41475) /*!< 41475 (String FIX.5.0SP2) Specifies the description of the underlying security.*/ \
X(EncodedLegMarketDisruptionFallbackUnderlierSecurityDescLen,            41476) /*!< 41476 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegMarketDisruptionFallbackUnderlierSecurityDesc (41477) field.*/ \
X(EncodedLegMarketDisruptionFallbackUnderlierSecurityDesc,               41477) /*!< 41477 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegMarketDisruptionFallbackUnderlierSecurityDesc(41475) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegMarketDisruptionFallbackUnderlierSecurityDesc(41475) field.*/ \
X(LegMarketDisruptionFallbackOpenUnits,                                  41478) /*!< 41478 (Qty FIX.5.0SP2) If there are multiple underlying assets, this specifies the number of units (index or securities) that constitute the underlier of the swap. In the case of a basket swap, this is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.*/ \
X(LegMarketDisruptionFallbackBasketCurrency,                             41479) /*!< 41479 (Currency FIX.5.0SP2) Specifies the currency if the underlier is a basket.  Uses ISO 4217 currency codes.*/ \
X(LegMarketDisruptionFallbackBasketDivisor,                              41480) /*!< 41480 (float FIX.5.0SP2) Specifies the basket divisor amount. This value is normally used to adjust the constituent weight for pricing or to adjust for dividends, or other corporate actions.*/ \
X(LegExerciseDesc,                                                       41481) /*!< 41481 (String FIX.5.0SP2) A description of the option exercise.*/ \
X(EncodedLegExerciseDescLen,                                             41482) /*!< 41482 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegExerciseDesc(41483) field.*/ \
X(EncodedLegExerciseDesc,                                                41483) /*!< 41483 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegExerciseDesc(41481) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegExerciseDesc(41481) field.*/ \
X(LegAutomaticExerciseIndicator,                                         41484) /*!< 41484 (Boolean FIX.5.0SP2) Indicates (when 'Y') that exercise is automatic when the strike price is crossed or the underlying trade is in the money.*/ \
X(LegAutomaticExerciseThresholdRate,                                     41485) /*!< 41485 (float FIX.5.0SP2) The threshold rate for triggering automatic exercise.*/ \
X(LegExerciseConfirmationMethod,                                         41486) /*!< 41486 (int FIX.5.0SP2) Indicates whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.*/ \
X(LegManualNoticeBusinessCenter,                                         41487) /*!< 41487 (String FIX.5.0SP2) Identifies the business center used for adjusting the time for manual exercise notice. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegFallbackExerciseIndicator,                                          41488) /*!< 41488 (Boolean FIX.5.0SP2) Indicates whether the notional amount of the underlying swap, not previously exercised under the option, will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than one tenth of a percentage point (0.10% or 0.001).*/ \
X(LegLimitRightToConfirmIndicator,                                       41489) /*!< 41489 (Boolean FIX.5.0SP2) Indicates whether the Seller may request the Buyer to confirm its intent to exercise if not done on or before the expiration time on the expiration date. If true ("Y") specific rules will apply in relation to the settlement mode.*/ \
X(LegExerciseSplitTicketIndicator,                                       41490) /*!< 41490 (Boolean FIX.5.0SP2) Indicates in physical settlement of bond and convertible bond options whether the party required to deliver the bonds will divide those to be delivered as notifying party desires to facilitate delivery obligations.*/ \
X(NoLegOptionExerciseBusinessCenters,                                    41491) /*!< 41491 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group. */ \
X(LegOptionExerciseBusinessCenter,                                       41492) /*!< 41492 (String FIX.5.0SP2) The business center calendar used to adjust the option exercise dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegOptionExerciseBusinessDayConvention,                                41493) /*!< 41493 (int FIX.5.0SP2) The business day convention used to adjust the option exercise dates. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegOptionExerciseEarliestDateOffsetDayType,                            41494) /*!< 41494 (int FIX.5.0SP2) Specifies the day type of the relative earliest exercise date offset.*/ \
X(LegOptionExerciseEarliestDateOffsetPeriod,                             41495) /*!< 41495 (int FIX.5.0SP2) Time unit multiplier for the relative earliest exercise date offset.*/ \
X(LegOptionExerciseEarliestDateOffsetUnit,                               41496) /*!< 41496 (String FIX.5.0SP2) Time unit associated with the relative earliest exercise date offset.*/ \
X(LegOptionExerciseFrequencyPeriod,                                      41497) /*!< 41497 (int FIX.5.0SP2) Time unit multiplier for the frequency of exercise dates. */ \
X(LegOptionExerciseFrequencyUnit,                                        41498) /*!< 41498 (String FIX.5.0SP2) Time unit associated with the frequency of exercise dates.*/ \
X(LegOptionExerciseStartDateUnadjusted,                                  41499) /*!< 41499 (LocalMktDate FIX.5.0SP2) The unadjusted start date for calculating periodic exercise dates.*/ \
X(LegOptionExerciseStartDateRelativeTo,                                  41500) /*!< 41500 (int FIX.5.0SP2) Specifies the anchor date when the option exercise start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegOptionExerciseStartDateOffsetPeriod,                                41501) /*!< 41501 (int FIX.5.0SP2) Time unit multiplier for the relative exercise start date offset. */ \
X(LegOptionExerciseStartDateOffsetUnit,                                  41502) /*!< 41502 (String FIX.5.0SP2) Time unit associated with the relative exercise start date offset. */ \
X(LegOptionExerciseStartDateOffsetDayType,                               41503) /*!< 41503 (int FIX.5.0SP2) Specifies the day type of the relative option exercise start date offset.*/ \
X(LegOptionExerciseStartDateAdjusted,                                    41504) /*!< 41504 (LocalMktDate FIX.5.0SP2) The adjusted start date for calculating periodic exercise dates.*/ \
X(LegOptionExerciseSkip,                                                 41505) /*!< 41505 (int FIX.5.0SP2) The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.*/ \
X(LegOptionExerciseNominationDeadline,                                   41506) /*!< 41506 (LocalMktDate FIX.5.0SP2) The last date (adjusted) for establishing the option exercise terms.*/ \
X(LegOptionExerciseFirstDateUnadjusted,                                  41507) /*!< 41507 (LocalMktDate FIX.5.0SP2) The unadjusted first exercise date.*/ \
X(LegOptionExerciseLastDateUnadjusted,                                   41508) /*!< 41508 (LocalMktDate FIX.5.0SP2) The unadjusted last exercise date.*/ \
X(LegOptionExerciseEarliestTime,                                         41509) /*!< 41509 (LocalMktTime FIX.5.0SP2) The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) (i) on the expriation date, in the case of a European style option, (ii) on each Bermuda option exercise date and the expiration date, in the case of a Bermuda style option, (iii) the commencement date to, and including, the expiration date, in the case of an American option.*/ \
X(LegOptionExerciseLatestTime,                                           41510) /*!< 41510 (LocalMktTime FIX.5.0SP2) The latest exercise time.  See also LegOptionExerciseEarliestTime(41509).*/ \
X(LegOptionExerciseTimeBusinessCenter,                                   41511) /*!< 41511 (String FIX.5.0SP2) The business center used to determine the locale for option exercise time, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegOptionExerciseDates,                                              41512) /*!< 41512 (NumInGroup FIX.5.0SP2) Number of dates in the repeating group.*/ \
X(LegOptionExerciseDate,                                                 41513) /*!< 41513 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted option exercise fixed date.*/ \
X(LegOptionExerciseDateType,                                             41514) /*!< 41514 (int FIX.5.0SP2) Specifies the type of option exercise date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(NoLegOptionExerciseExpirationDateBusinessCenters,                      41515) /*!< 41515 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegOptionExerciseExpirationDateBusinessCenter,                         41516) /*!< 41516 (String FIX.5.0SP2) The business center calendar used to adjust the option exercise expiration dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegOptionExerciseExpirationDateBusinessDayConvention,                  41517) /*!< 41517 (int FIX.5.0SP2) The business day convention used to adjust the option exercise expiration dates. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegOptionExerciseExpirationDateRelativeTo,                             41518) /*!< 41518 (int FIX.5.0SP2) Specifies the anchor date when the option exercise expiration date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegOptionExerciseExpirationDateOffsetPeriod,                           41519) /*!< 41519 (int FIX.5.0SP2) Time unit multiplier for the relative exercise expiration date offset.*/ \
X(LegOptionExerciseExpirationDateOffsetUnit,                             41520) /*!< 41520 (String FIX.5.0SP2) Time unit associated with the relative exercise expiration date offset.*/ \
X(LegOptionExerciseExpirationFrequencyPeriod,                            41521) /*!< 41521 (int FIX.5.0SP2) Time unit multiplier for the frequency of exercise expiration dates.*/ \
X(LegOptionExerciseExpirationFrequencyUnit,                              41522) /*!< 41522 (String FIX.5.0SP2) Time unit associated with the frequency of exercise expiration dates.*/ \
X(LegOptionExerciseExpirationRollConvention,                             41523) /*!< 41523 (String FIX.5.0SP2) The convention for determining the sequence of exercise expiration dates. It is used in conjunction with a specified frequency. Used only to override the roll convention defined in the LegDateAdjustment component in InstrumentLeg.*/ \
X(LegOptionExerciseExpirationDateOffsetDayType,                          41524) /*!< 41524 (int FIX.5.0SP2) Specifies the day type of the relative option exercise expiration date offset.*/ \
X(LegOptionExerciseExpirationTime,                                       41525) /*!< 41525 (LocalMktTime FIX.5.0SP2) The option exercise expiration time.*/ \
X(LegOptionExerciseExpirationTimeBusinessCenter,                         41526) /*!< 41526 (String FIX.5.0SP2) The business center used to determine the locale for option exercise expiration time, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegOptionExerciseExpirationDates,                                    41527) /*!< 41527 (NumInGroup FIX.5.0SP2) Number of fixed exercise expiration dates in the repeating group.*/ \
X(LegOptionExerciseExpirationDate,                                       41528) /*!< 41528 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted option exercise expiration fixed date.*/ \
X(LegOptionExerciseExpirationDateType,                                   41529) /*!< 41529 (int FIX.5.0SP2) Specifies the type of option exercise expiration date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(NoLegPaymentScheduleFixingDays,                                        41530) /*!< 41530 (NumInGroup FIX.5.0SP2) Number of fixing days in the repeating group.*/ \
X(LegPaymentScheduleFixingDayOfWeek,                                     41531) /*!< 41531 (int FIX.5.0SP2) The day of the week on which fixing takes place. */ \
X(LegPaymentScheduleFixingDayNumber,                                     41532) /*!< 41532 (int FIX.5.0SP2) The occurrence of the day of week on which fixing takes place.*/ \
X(LegPaymentScheduleXID,                                                 41533) /*!< 41533 (XID FIX.5.0SP2) Identifier of this LegPaymentSchedule for cross referencing elsewhere in the message.*/ \
X(LegPaymentScheduleXIDRef,                                              41534) /*!< 41534 (XIDREF FIX.5.0SP2) Reference to payment schedule elsewhere in the message.*/ \
X(LegPaymentScheduleRateCurrency,                                        41535) /*!< 41535 (Currency FIX.5.0SP2) The currency of the schedule rate.  Uses ISO 4217 currency codes.*/ \
X(LegPaymentScheduleRateUnitOfMeasure,                                   41536) /*!< 41536 (String FIX.5.0SP2) The schedule rate unit of measure (UOM).*/ \
X(LegPaymentScheduleRateConversionFactor,                                41537) /*!< 41537 (float FIX.5.0SP2) The number multipled by the derived floating rate of the leg's payment schedule in order to arrive at the payment rate. If omitted, the schedule rate conversion factor is 1. */ \
X(LegPaymentScheduleRateSpreadType,                                      41538) /*!< 41538 (int FIX.5.0SP2) Identifies whether the rate spread is an absolute value to be added to the index rate or a percentage of the index rate.*/ \
X(LegPaymentScheduleSettlPeriodPrice,                                    41539) /*!< 41539 (Price FIX.5.0SP2) The schedule settlement period price.*/ \
X(LegPaymentScheduleSettlPeriodPriceCurrency,                            41540) /*!< 41540 (Currency FIX.5.0SP2) The currency of the schedule settlement period price. Uses ISO 4217 currency codes.*/ \
X(LegPaymentScheduleSettlPeriodPriceUnitOfMeasure,                       41541) /*!< 41541 (String FIX.5.0SP2) The settlement period price unit of measure (UOM).*/ \
X(LegPaymentScheduleStepUnitOfMeasure,                                   41542) /*!< 41542 (String FIX.5.0SP2) The schedule step unit of measure (UOM).*/ \
X(LegPaymentScheduleFixingDayDistribution,                               41543) /*!< 41543 (int FIX.5.0SP2) The distribution of fixing days.*/ \
X(LegPaymentScheduleFixingDayCount,                                      41544) /*!< 41544 (int FIX.5.0SP2) The number of days over which fixing should take place. */ \
X(LegPaymentScheduleFixingLagPeriod,                                     41545) /*!< 41545 (int FIX.5.0SP2) Time unit multiplier for the fixing lag duration. */ \
X(LegPaymentScheduleFixingLagUnit,                                       41546) /*!< 41546 (String FIX.5.0SP2) Time unit associated with the fixing lag duration.*/ \
X(LegPaymentScheduleFixingFirstObservationDateOffsetPeriod,              41547) /*!< 41547 (int FIX.5.0SP2) Time unit multiplier for the relative first observation date offset.*/ \
X(LegPaymentScheduleFixingFirstObservationDateOffsetUnit,                41548) /*!< 41548 (String FIX.5.0SP2) Time unit associated with the relative first observation date offset.*/ \
X(LegPaymentStreamFlatRateIndicator,                                     41549) /*!< 41549 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', the Flat Rate is the New Worldwide Tanker Nominal Freight Scale for the Freight Index Route taken at the trade date of the transaction "Fixed". If 'N' it is taken on each pricing date "Floating".*/ \
X(LegPaymentStreamFlatRateAmount,                                        41550) /*!< 41550 (Amt FIX.5.0SP2) Specifies the actual monetary value of the flat rate when LegPaymentStreamFlatRateIndicator(41549) = 'Y'.*/ \
X(LegPaymentStreamFlatRateCurrency,                                      41551) /*!< 41551 (Currency FIX.5.0SP2) Specifies the currency of the actual flat rate.  Uses ISO 4217 currency codes.*/ \
X(LegStreamMaximumPaymentAmount,                                         41552) /*!< 41552 (Amt FIX.5.0SP2) Specifies the limit on the total payment amount.*/ \
X(LegStreamMaximumPaymentCurrency,                                       41553) /*!< 41553 (Currency FIX.5.0SP2) Specifies the currency of total payment amount limit.  Uses ISO 4217 currency codes.*/ \
X(LegStreamMaximumTransactionAmount,                                     41554) /*!< 41554 (Amt FIX.5.0SP2) Specifies the limit on the payment amount that goes out in any particular calculation period.*/ \
X(LegStreamMaximumTransactionCurrency,                                   41555) /*!< 41555 (Currency FIX.5.0SP2) Specifies the currency of the period payment amount limit. Uses ISO 4217 currency codes.*/ \
X(LegPaymentStreamFixedAmountUnitOfMeasure,                              41556) /*!< 41556 (String FIX.5.0SP2) The fixed payment amount unit of measure (UOM).*/ \
X(LegPaymentStreamTotalFixedAmount,                                      41557) /*!< 41557 (Amt FIX.5.0SP2) Specifies the total fixed payment amount.*/ \
X(LegPaymentStreamWorldScaleRate,                                        41558) /*!< 41558 (float FIX.5.0SP2) The number of Worldscale points for purposes of the calculation of a fixed amount for a wet voyage charter commodity swap.*/ \
X(LegPaymentStreamContractPrice,                                         41559) /*!< 41559 (Price FIX.5.0SP2) The price per relevant unit for purposes of the calculation of a fixed amount for a dry voyage charter or time charter commodity swap.*/ \
X(LegPaymentStreamContractPriceCurrency,                                 41560) /*!< 41560 (Currency FIX.5.0SP2) Specifies the currency of LegPaymentStreamContractPrice(41559). Uses ISO 4217 currency codes.*/ \
X(NoLegPaymentStreamPricingBusinessCenters,                              41561) /*!< 41561 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegPaymentStreamPricingBusinessCenter,                                 41562) /*!< 41562 (String FIX.5.0SP2) The business center calendar used to adjust the pricing dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegPaymentStreamRateIndex2CurveUnit,                                   41563) /*!< 41563 (String FIX.5.0SP2) Secondary time unit associated with the payment stream's floating rate index curve.  */ \
X(LegPaymentStreamRateIndex2CurvePeriod,                                 41564) /*!< 41564 (int FIX.5.0SP2) Secondary time unit multiplier for the payment stream's floating rate index curve.  */ \
X(LegPaymentStreamRateIndexLocation,                                     41565) /*!< 41565 (String FIX.5.0SP2) Specifies the location of the floating rate index.*/ \
X(LegPaymentStreamRateIndexLevel,                                        41566) /*!< 41566 (Qty FIX.5.0SP2) This is the weather Cooling Degree Days (CDD), Heating Degree Days (HDD) or HDD index level specified as the number of (amount of) weather index units specified by the parties in the related confirmation.*/ \
X(LegPaymentStreamRateIndexUnitOfMeasure,                                41567) /*!< 41567 (String FIX.5.0SP2) The unit of measure (UOM) of the rate index level. */ \
X(LegPaymentStreamSettlLevel,                                            41568) /*!< 41568 (int FIX.5.0SP2) Specifies how weather index units are to be calculated.*/ \
X(LegPaymentStreamReferenceLevel,                                        41569) /*!< 41569 (Qty FIX.5.0SP2) This is the weather Cooling Degree Days (CDD), Heating Degree Days (HDD) or HDD reference level specified as the number of (amount of) weather index units specified by the parties in the related confirmation.*/ \
X(LegPaymentStreamReferenceLevelUnitOfMeasure,                           41570) /*!< 41570 (String FIX.5.0SP2) The unit of measure (UOM) of the rate reference level. */ \
X(LegPaymentStreamReferenceLevelEqualsZeroIndicator,                     41571) /*!< 41571 (Boolean FIX.5.0SP2) When set to 'Y', it indicates that the weather reference level equals zero.*/ \
X(LegPaymentStreamRateSpreadCurrency,                                    41572) /*!< 41572 (Currency FIX.5.0SP2) Specifies the currency of the floating rate spread. Uses ISO 4217 currency codes.*/ \
X(LegPaymentStreamRateSpreadUnitOfMeasure,                               41573) /*!< 41573 (String FIX.5.0SP2) Specifies the unit of measure (UOM) of the floating rate spread. */ \
X(LegPaymentStreamRateConversionFactor,                                  41574) /*!< 41574 (float FIX.5.0SP2) The number to be multiplied by the derived floating rate of the leg's payment stream in order to arrive at the payment rate. If omitted, the floating rate conversion factor is 1. */ \
X(LegPaymentStreamRateSpreadType,                                        41575) /*!< 41575 (int FIX.5.0SP2) Identifies whether the rate spread is an absolute value to be added to the index rate or a percentage of the index rate.*/ \
X(LegPaymentStreamLastResetRate,                                         41576) /*!< 41576 (Percentage FIX.5.0SP2) The floating rate determined at the most recent reset. The rate is expressed in decimal form, e.g. 5% is represented as 0.05.*/ \
X(LegPaymentStreamFinalRate,                                             41577) /*!< 41577 (Percentage FIX.5.0SP2) The floating rate determined at the final reset. The rate is expressed in decimal form, e.g. 5% is represented as 0.05.*/ \
X(LegPaymentStreamCalculationLagPeriod,                                  41578) /*!< 41578 (int FIX.5.0SP2) Time unit multiplier for the calculation lag duration.*/ \
X(LegPaymentStreamCalculationLagUnit,                                    41579) /*!< 41579 (String FIX.5.0SP2) Time unit associated with the calculation lag duration. */ \
X(LegPaymentStreamFirstObservationDateOffsetPeriod,                      41580) /*!< 41580 (int FIX.5.0SP2) Time unit multiplier for the relative first observation date offset.*/ \
X(LegPaymentStreamFirstObservationDateOffsetUnit,                        41581) /*!< 41581 (String FIX.5.0SP2) Time unit associated with the relative first observation date offset.*/ \
X(LegPaymentStreamPricingDayType,                                        41582) /*!< 41582 (int FIX.5.0SP2) Specifies the commodity pricing day type.*/ \
X(LegPaymentStreamPricingDayDistribution,                                41583) /*!< 41583 (int FIX.5.0SP2) The distribution of pricing days.*/ \
X(LegPaymentStreamPricingDayCount,                                       41584) /*!< 41584 (int FIX.5.0SP2) The number of days over which pricing should take place.*/ \
X(LegPaymentStreamPricingBusinessCalendar,                               41585) /*!< 41585 (String FIX.5.0SP2) Specifies the business calendar to use for pricing.  \
 \
See http://www.fpml.org/coding-scheme/commodity-business-calendar for values.*/ \
X(LegPaymentStreamPricingBusinessDayConvention,                          41586) /*!< 41586 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's pricing dates. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(UnderlyingDeliveryStreamRiskApportionmentSource,                       41587) /*!< 41587 (String FIX.5.0SP2) Specifies the source or legal framework for the risk apportionment.   \
 \
See http://www.fixtradingcommunity.org/codelists#Risk_Apportionment_Source for the details of the external code list.*/ \
X(StreamCommoditySettlTimeType,                                          41588) /*!< 41588 (int FIX.5.0SP2) Specifies the format of the commodities settlement start and end times.*/ \
X(NoLegPaymentStreamPaymentDates,                                        41589) /*!< 41589 (NumInGroup FIX.5.0SP2) Number of payment dates in the repeating group.*/ \
X(LegPaymentStreamPaymentDate,                                           41590) /*!< 41590 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted fixed stream payment date.*/ \
X(LegPaymentStreamPaymentDateType,                                       41591) /*!< 41591 (int FIX.5.0SP2) Specifies the type of payment date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(LegPaymentStreamMasterAgreementPaymentDatesIndicator,                  41592) /*!< 41592 (Boolean FIX.5.0SP2) When set to 'Y', it indicates that payment dates are specified in the relevant master agreement.*/ \
X(NoLegPaymentStreamPricingDates,                                        41593) /*!< 41593 (NumInGroup FIX.5.0SP2) Number of pricing dates in the repeating group.*/ \
X(LegPaymentStreamPricingDate,                                           41594) /*!< 41594 (LocalMktDate FIX.5.0SP2) The adjusted or unadusted fixed stream pricing date.*/ \
X(LegPaymentStreamPricingDateType,                                       41595) /*!< 41595 (int FIX.5.0SP2) Specifies the type of pricing date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(NoLegPaymentStreamPricingDays,                                         41596) /*!< 41596 (NumInGroup FIX.5.0SP2) Number of pricing days in the repeating group.*/ \
X(LegPaymentStreamPricingDayOfWeek,                                      41597) /*!< 41597 (int FIX.5.0SP2) The day of the week on which pricing takes place.. */ \
X(LegPaymentStreamPricingDayNumber,                                      41598) /*!< 41598 (int FIX.5.0SP2) The occurrence of the day of week on which pricing takes place.*/ \
X(NoLegPhysicalSettlTerms,                                               41599) /*!< 41599 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(LegPhysicalSettlTermXID,                                               41600) /*!< 41600 (XID FIX.5.0SP2) A named string value referenced by UnderlyingSettlTermXIDRef(41315).*/ \
X(LegPhysicalSettlCurency,                                               41601) /*!< 41601 (Currency FIX.5.0SP2) Specifies the currency of physical settlement.  Uses ISO 4217 currency codes.*/ \
X(LegPhysicalSettlBusinessDays,                                          41602) /*!< 41602 (int FIX.5.0SP2) The number of business days used in the determination of physical settlement. Its precise meaning is dependant on the context in which this is used.*/ \
X(LegPhysicalSettlMaximumBusinessDays,                                   41603) /*!< 41603 (int FIX.5.0SP2) A maximum number of business days. Its precise meaning is dependant on the context in which this element is used. Intended to be used to limit a particular ISDA fallback provision.*/ \
X(NoLegPhysicalSettlDeliverableObligations,                              41604) /*!< 41604 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(LegPhysicalSettlDeliverableObligationType,                             41605) /*!< 41605 (String FIX.5.0SP2) Specifies the type of delivery obligation applicable for physical settlement.  \
 \
See http://www.fixptradingcommunity.org/codelists#Deliverable_Obligation_Types for code list for applicable deliverable obligation types. */ \
X(LegPhysicalSettlDeliverableObligationValue,                            41606) /*!< 41606 (String FIX.5.0SP2) Physical settlement delivery obligation value appropriate to LegPhysicalSettlDeliverableObligationType(41605). \
 \
See http://www.fixtradingcommunity.org/codelists#Deliverable_Obligation_Types for code list for applicable deliverable obligation types.*/ \
X(NoLegPricingDateBusinessCenters,                                       41607) /*!< 41607 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegPricingDateBusinessCenter,                                          41608) /*!< 41608 (String FIX.5.0SP2) The business center calendar used to adjust the pricing or fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegPricingDateUnadjusted,                                              41609) /*!< 41609 (LocalMktDate FIX.5.0SP2) The unadjusted pricing or fixing date.*/ \
X(LegPricingDateBusinessDayConvention,                                   41610) /*!< 41610 (int FIX.5.0SP2) The business day convention used to adjust the pricing or fixing date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegPricingDateAdjusted,                                                41611) /*!< 41611 (LocalMktDate FIX.5.0SP2) The adjusted pricing or fixing date.*/ \
X(LegPricingTime,                                                        41612) /*!< 41612 (LocalMktTime FIX.5.0SP2) The local market pricing or fixing time.*/ \
X(LegPricingTimeBusinessCenter,                                          41613) /*!< 41613 (String FIX.5.0SP2) Specifies the business center for determining the pricing or fixing time. See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegProtectionTermEventNewsSources,                                   41614) /*!< 41614 (NumInGroup FIX.5.0SP2) Number of event sources in the repeating group.*/ \
X(LegProtectionTermEventNewsSource,                                      41615) /*!< 41615 (String FIX.5.0SP2) A newspaper or electronic news service that may publish relevant information used in the determination of whether or not a credit event has occurred.*/ \
X(NoLegProtectionTerms,                                                  41616) /*!< 41616 (NumInGroup FIX.5.0SP2) Number of protection terms in the repeating group.*/ \
X(LegProtectionTermXID,                                                  41617) /*!< 41617 (XID FIX.5.0SP2) A named string value referenced from UnderlyingLegProtectionTermXIDRef(41314).*/ \
X(LegProtectionTermNotional,                                             41618) /*!< 41618 (Amt FIX.5.0SP2) The notional amount of protection coverage. */ \
X(LegProtectionTermCurrency,                                             41619) /*!< 41619 (Currency FIX.5.0SP2) The currency of LegProtectionTermNotional(41618). Uses ISO 4217 currency codes.*/ \
X(LegProtectionTermSellerNotifies,                                       41620) /*!< 41620 (Boolean FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. LegProtectionTermSellerNotifies(41620)=Y indicates that the seller notifies.*/ \
X(LegProtectionTermBuyerNotifies,                                        41621) /*!< 41621 (Boolean FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. LegProtectionTermBuyerNotifies(41621)=Y indicates that the buyer notifies.*/ \
X(LegProtectionTermEventBusinessCenter,                                  41622) /*!< 41622 (String FIX.5.0SP2) When used, the business center indicates the local time of the business center that replaces the Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProtectionTermStandardSources,                                      41623) /*!< 41623 (Boolean FIX.5.0SP2) Indicates whether ISDA defined Standard Public Sources are applicable (LegProtectionTermStandardSources(41623)=Y) or not.*/ \
X(LegProtectionTermEventMinimumSources,                                  41624) /*!< 41624 (int FIX.5.0SP2) The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two. */ \
X(NoLegProtectionTermEvents,                                             41625) /*!< 41625 (NumInGroup FIX.5.0SP2) Number of protection term events in the repeating group.*/ \
X(LegProtectionTermEventType,                                            41626) /*!< 41626 (String FIX.5.0SP2) Specifies the type of credit event applicable to the protection terms.  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Event_Types for code list of applicable event types.*/ \
X(LegProtectionTermEventValue,                                           41627) /*!< 41627 (String FIX.5.0SP2) Specifies the protection term event value appropriate to LegProtectionTermEventType(41626).  See http:///www.fixtradingcommunity.org/codelists#Protection_Term_Event_Types for applicable event type values.*/ \
X(LegProtectionTermEventCurrency,                                        41628) /*!< 41628 (Currency FIX.5.0SP2) Applicable currency if the event value is an amount. Uses ISO 4217 currency codes.*/ \
X(LegProtectionTermEventPeriod,                                          41629) /*!< 41629 (int FIX.5.0SP2) Time unit multiplier for protection term events.  */ \
X(LegProtectionTermEventUnit,                                            41630) /*!< 41630 (String FIX.5.0SP2) Time unit associated with protection term events.*/ \
X(LegProtectionTermEventDayType,                                         41631) /*!< 41631 (int FIX.5.0SP2) Specifies the day type for protection term events.*/ \
X(LegProtectionTermEventRateSource,                                      41632) /*!< 41632 (String FIX.5.0SP2) Rate source for events that specify a rate source, e.g. floating rate interest shortfall.*/ \
X(NoLegProtectionTermEventQualifiers,                                    41633) /*!< 41633 (NumInGroup FIX.5.0SP2) Number of qualifiers in the repeating group.*/ \
X(LegProtectionTermEventQualifier,                                       41634) /*!< 41634 (char FIX.5.0SP2) Specifies the protection term event qualifier. Used to further qualify LegProtectionTermEventType(41626).*/ \
X(NoLegProtectionTermObligations,                                        41635) /*!< 41635 (NumInGroup FIX.5.0SP2) Number of obligations in the repeating group.*/ \
X(LegProtectionTermObligationType,                                       41636) /*!< 41636 (String FIX.5.0SP2) Specifies the type of obligation applicable to the protection terms.  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Obligation_Types for code list of applicable obligation types.*/ \
X(LegProtectionTermObligationValue,                                      41637) /*!< 41637 (String FIX.5.0SP2) The value associated with the protection term obligation specified in LegProtectionTermObligationType(41636). See http://www.fixtradingcommunity.org/codelists#Protection_Term_Obligation_Types for applicable obligation type values.*/ \
X(NoLegStreamCalculationPeriodDates,                                     41638) /*!< 41638 (NumInGroup FIX.5.0SP2) Number of calculation period dates in the repeating group.*/ \
X(LegStreamCalculationPeriodDate,                                        41639) /*!< 41639 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted fixed calculation period date.*/ \
X(LegStreamCalculationPeriodDateType,                                    41640) /*!< 41640 (int FIX.5.0SP2) Specifies the type of fixed calculation period date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(LegStreamCalculationPeriodDatesXID,                                    41641) /*!< 41641 (XID FIX.5.0SP2) Identifier of this calculation period for cross referencing elsewhere in the message.*/ \
X(LegStreamCalculationPeriodDatesXIDRef,                                 41642) /*!< 41642 (XIDREF FIX.5.0SP2) Cross reference to another calculation period for duplicating its properties.*/ \
X(LegStreamCalculationBalanceOfFirstPeriod,                              41643) /*!< 41643 (Boolean FIX.5.0SP2) When specified and set to 'Y', it indicates that the first calculation period should run from the effective date to the end of the calendar period in which the effective date falls (e.g. Jan 15 - Jan 31 if the calculation periods are one month long and effective date is Jan 15.). If 'N' or not specified, it indicates that the first calculation period should run from the effective date for one whole period (e.g. Jan 15 to Feb 14 if the calculation periods are one month long and the effective date is Jan 15.).*/ \
X(LegStreamCalculationCorrectionPeriod,                                  41644) /*!< 41644 (int FIX.5.0SP2) Time unit multiplier for the length of time after the publication of the data when corrections can be made.*/ \
X(LegStreamCalculationCorrectionUnit,                                    41645) /*!< 41645 (String FIX.5.0SP2) Time unit associated with the length of time after the publication of the data when corrections can be made.*/ \
X(NoLegStreamCommoditySettlBusinessCenters,                              41646) /*!< 41646 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegStreamCommoditySettlBusinessCenter,                                 41647) /*!< 41647 (String FIX.5.0SP2) The business center calendar used to adjust the commodity delivery date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegStreamCommodityBase,                                                41648) /*!< 41648 (String FIX.5.0SP2) Specifies the general base type of the commodity traded. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions. */ \
X(LegStreamCommodityType,                                                41649) /*!< 41649 (String FIX.5.0SP2) Specifies the type of commodity product. \
 \
For coal see http://www.fpml.org/coding-scheme/commodity-coal-product-type for values.  \
 \
For metals see http://www.fpml.org/coding-scheme/commodity-metal-product-type for values.  \
 \
For bullion see http://www.fixtradingcommunity.org/codelists#Bullion_Types for the external code list of bullion types.*/ \
X(LegStreamCommoditySecurityID,                                          41650) /*!< 41650 (String FIX.5.0SP2) Specifies the market identifier for the commodity.*/ \
X(LegStreamCommoditySecurityIDSource,                                    41651) /*!< 41651 (String FIX.5.0SP2) Identifies the class or source of the LegStreamCommoditySecurityIDSource(41650) value.*/ \
X(LegStreamCommodityDesc,                                                41652) /*!< 41652 (String FIX.5.0SP2) Description of the commodity asset.*/ \
X(EncodedLegStreamCommodityDescLen,                                      41653) /*!< 41653 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedLegStreamCommodityDesc(41654) field.*/ \
X(EncodedLegStreamCommodityDesc,                                         41654) /*!< 41654 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the LegStreamCommodityDesc(41652) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the LegStreamCommodityDesc(41652) field.*/ \
X(LegStreamCommodityUnitOfMeasure,                                       41655) /*!< 41655 (String FIX.5.0SP2) The unit of measure (UOM) of the commodity asset.*/ \
X(LegStreamCommodityCurrency,                                            41656) /*!< 41656 (Currency FIX.5.0SP2) Identifies the currency of the commodity asset. Uses ISO 4217 currency codes.*/ \
X(LegStreamCommodityExchange,                                            41657) /*!< 41657 (Exchange FIX.5.0SP2) Identifies the exchange where the commodity is traded.*/ \
X(LegStreamCommodityRateSource,                                          41658) /*!< 41658 (int FIX.5.0SP2) Identifies the source of rate information used for commodities.  \
 \
See http://www.fixtradingcommunity.org/codelists#Commodity_Rate_Source for code list of applicable sources.*/ \
X(LegStreamCommodityRateReferencePage,                                   41659) /*!< 41659 (String FIX.5.0SP2) Identifies the reference "page" from the rate source.*/ \
X(LegStreamCommodityRateReferencePageHeading,                            41660) /*!< 41660 (String FIX.5.0SP2) Identifies the page heading from the rate source.*/ \
X(LegStreamDataProvider,                                                 41661) /*!< 41661 (String FIX.5.0SP2) Specifies the commodity data or information provider.  \
 \
See http://www.fpml.org/coding-scheme/commodity-information-provider for values.*/ \
X(LegStreamCommodityPricingType,                                         41662) /*!< 41662 (String FIX.5.0SP2) Specifies how the pricing or rate setting of the trade is to be determined or based upon.   \
 \
See http://www.fixtradingcommunity.org/codelists#Commodity_Rate_Pricing_Type for code list of applicable commodity pricing types.*/ \
X(LegStreamCommodityNearbySettlDayPeriod,                                41663) /*!< 41663 (int FIX.5.0SP2) Time unit multiplier for the nearby settlement day.  */ \
X(LegStreamCommodityNearbySettlDayUnit,                                  41664) /*!< 41664 (String FIX.5.0SP2) Time unit associated with the nearby settlement day.  */ \
X(LegStreamCommoditySettlDateUnadjusted,                                 41665) /*!< 41665 (LocalMktDate FIX.5.0SP2) The unadjusted commodity delivery date.*/ \
X(LegStreamCommoditySettlDateBusinessDayConvention,                      41666) /*!< 41666 (int FIX.5.0SP2) The business day convention used to adjust the commodity delivery date. Used only to override the business day convention specified in the LegDateAdjustment component within the InstrumentLeg component.*/ \
X(LegStreamCommoditySettlDateAdjusted,                                   41667) /*!< 41667 (LocalMktDate FIX.5.0SP2) The adjusted commodity delivery date.*/ \
X(LegStreamCommoditySettlMonth,                                          41668) /*!< 41668 (int FIX.5.0SP2) Specifies a fixed single month for commodity delivery. */ \
X(LegStreamCommoditySettlDateRollPeriod,                                 41669) /*!< 41669 (int FIX.5.0SP2) Time unit multiplier for the commodity delivery date roll.*/ \
X(LegStreamCommoditySettlDateRollUnit,                                   41670) /*!< 41670 (String FIX.5.0SP2) Time unit associated with the commodity delivery date roll.*/ \
X(LegStreamCommoditySettlDayType,                                        41671) /*!< 41671 (int FIX.5.0SP2) Specifies the commodity delivery roll day type.*/ \
X(LegStreamCommodityXID,                                                 41672) /*!< 41672 (XID FIX.5.0SP2) Identifier of this stream commodity for cross referencing elsewhere in the message.*/ \
X(LegStreamCommodityXIDRef,                                              41673) /*!< 41673 (XIDREF FIX.5.0SP2) Reference to a stream commodity elsewhere in the message.*/ \
X(NoLegStreamCommodityAltIDs,                                            41674) /*!< 41674 (NumInGroup FIX.5.0SP2) Number of alternate security identifers.*/ \
X(LegStreamCommodityAltID,                                               41675) /*!< 41675 (String FIX.5.0SP2) Alternate security identifier value for the commodity.*/ \
X(LegStreamCommodityAltIDSource,                                         41676) /*!< 41676 (String FIX.5.0SP2) Identifies the class or source of the alternate commodity security identifier. */ \
X(NoLegStreamCommodityDataSources,                                       41677) /*!< 41677 (NumInGroup FIX.5.0SP2) Number of data sources in the repeating group. The order of entry determines priority – first is the main source, second is fallback, third is second fallback.*/ \
X(LegStreamCommodityDataSourceID,                                        41678) /*!< 41678 (String FIX.5.0SP2) Specifies the data source identifier.*/ \
X(LegStreamCommodityDataSourceIDType,                                    41679) /*!< 41679 (int FIX.5.0SP2) Specifies the type of data source identifier.*/ \
X(NoLegStreamCommoditySettlDays,                                         41680) /*!< 41680 (NumInGroup FIX.5.0SP2) Number of days in the repeating group.*/ \
X(LegStreamCommoditySettlDay,                                            41681) /*!< 41681 (int FIX.5.0SP2) Specifies the day or group of days for delivery.*/ \
X(LegStreamCommoditySettlTotalHours,                                     41682) /*!< 41682 (int FIX.5.0SP2) Sum of the hours specified in LegStreamCommoditySettlTimeGrp.*/ \
X(NoLegStreamCommoditySettlTimes,                                        41683) /*!< 41683 (NumInGroup FIX.5.0SP2) Number of hour ranges in the repeating group.*/ \
X(LegStreamCommoditySettlStart,                                          41684) /*!< 41684 (String FIX.5.0SP2) The start time for commodity settlement where delivery occurs over time. The time format is specified by the settlement time type.*/ \
X(LegStreamCommoditySettlEnd,                                            41685) /*!< 41685 (String FIX.5.0SP2) The end time for commodity settlement where delivery occurs over time. The time format is specified by the settlement time type.*/ \
X(NoLegStreamCommoditySettlPeriods,                                      41686) /*!< 41686 (NumInGroup FIX.5.0SP2) Number of commodity settlement periods in the repeating group.*/ \
X(LegStreamCommoditySettlCountry,                                        41687) /*!< 41687 (Country FIX.5.0SP2) Specifies the country where delivery takes place. Uses ISO 3166 2-character country code.*/ \
X(LegStreamCommoditySettlTimeZone,                                       41688) /*!< 41688 (String FIX.5.0SP2) Commodity delivery timezone specified as "prevailing" rather than "standard" or "daylight".   \
 \
See http://www.fixtradingcommunity.org/codelists#Prevailing_Timezones for code list of applicable prevailing timezones.*/ \
X(LegStreamCommoditySettlFlowType,                                       41689) /*!< 41689 (int FIX.5.0SP2) Specifies the commodity delivery flow type.*/ \
X(LegStreamCommoditySettlPeriodNotional,                                 41690) /*!< 41690 (Qty FIX.5.0SP2) Delivery quantity associated with this settlement period.*/ \
X(LegStreamCommoditySettlPeriodNotionalUnitOfMeasure,                    41691) /*!< 41691 (String FIX.5.0SP2) Specifies the unit of measure (UOM) of the delivery quantity associated with this settlement period.*/ \
X(LegStreamCommoditySettlPeriodFrequencyPeriod,                          41692) /*!< 41692 (int FIX.5.0SP2) Time unit multiplier for the settlement period frequency. */ \
X(LegStreamCommoditySettlPeriodFrequencyUnit,                            41693) /*!< 41693 (String FIX.5.0SP2) Time unit associated with the settlement period frequency.*/ \
X(LegStreamCommoditySettlPeriodPrice,                                    41694) /*!< 41694 (Price FIX.5.0SP2) The settlement period price.*/ \
X(LegStreamCommoditySettlPeriodPriceUnitOfMeasure,                       41695) /*!< 41695 (String FIX.5.0SP2) The settlement period price unit of measure (UOM).*/ \
X(LegStreamCommoditySettlPeriodPriceCurrency,                            41696) /*!< 41696 (Currency FIX.5.0SP2) The currency of the settlement period price. Uses ISO 4217 currency codes.*/ \
X(LegStreamCommoditySettlHolidaysProcessingInstruction,                  41697) /*!< 41697 (int FIX.5.0SP2) Indicates whether holidays are included in the settlement periods. Required for electricity contracts.*/ \
X(LegStreamCommoditySettlPeriodXID,                                      41698) /*!< 41698 (XID FIX.5.0SP2) Identifier of this settlement period for cross referencing elsewhere in the message.*/ \
X(LegStreamCommoditySettlPeriodXIDRef,                                   41699) /*!< 41699 (XIDREF FIX.5.0SP2) Cross reference to another settlement period for duplicating its properties.*/ \
X(LegStreamXID,                                                          41700) /*!< 41700 (XID FIX.5.0SP2) Identifier of this LegStream for cross referencing elsewhere in the message.*/ \
X(UnderlyingAdditionalTermBondSecurityIDSource,                          41701) /*!< 41701 (String FIX.5.0SP2) Identifies the source scheme of the UnderlyingAdditionalTermBondSecurityID(41341) value. */ \
X(LegStreamNotionalXIDRef,                                               41702) /*!< 41702 (XIDREF FIX.5.0SP2) Cross reference to another LegStream notional for duplicating its properties.*/ \
X(LegStreamNotionalFrequencyPeriod,                                      41703) /*!< 41703 (int FIX.5.0SP2) Time unit multiplier for the swap stream's notional frequency.*/ \
X(LegStreamNotionalFrequencyUnit,                                        41704) /*!< 41704 (String FIX.5.0SP2) Time unit associated with the swap stream's notional frequency. */ \
X(LegStreamNotionalCommodityFrequency,                                   41705) /*!< 41705 (int FIX.5.0SP2) The commodity's notional or quantity delivery frequency.*/ \
X(LegStreamNotionalUnitOfMeasure,                                        41706) /*!< 41706 (String FIX.5.0SP2) Specifies the delivery quantity unit of measure (UOM).*/ \
X(LegStreamTotalNotional,                                                41707) /*!< 41707 (Qty FIX.5.0SP2) Specifies the total notional or delivery quantity over the term of the contract.*/ \
X(LegStreamTotalNotionalUnitOfMeasure,                                   41708) /*!< 41708 (String FIX.5.0SP2) Specifies the unit of measure (UOM) for the total notional or delivery quantity over the term of the contract.*/ \
X(UnderlyingAdditionalTermBondDesc,                                      41709) /*!< 41709 (String FIX.5.0SP2) Description of the bond.*/ \
X(EncodedUnderlyingAdditionalTermBondDescLen,                            41710) /*!< 41710 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingAdditionalTermBondDesc(41711) field.*/ \
X(EncodedUnderlyingAdditionalTermBondDesc,                               41711) /*!< 41711 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingAdditionalTermBondDesc(41709) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingAdditionalTermBondDesc(41709) field.*/ \
X(UnderlyingAdditionalTermBondCurrency,                                  41712) /*!< 41712 (Currency FIX.5.0SP2) Specifies the currency the bond value is denominated in.  Uses ISO 4217 currency codes.*/ \
X(NoUnderlyingComplexEventAveragingObservations,                         41713) /*!< 41713 (NumInGroup FIX.5.0SP2) The number of averaging observations in the repeating group.*/ \
X(UnderlyingComplexEventAveragingObservationNumber,                      41714) /*!< 41714 (int FIX.5.0SP2) Cross reference to the ordinal observation as specified either in the UnderlyingComplexEventScheduleGrp or UnderlyingComplexEventPeriodDateGrp components.*/ \
X(UnderlyingComplexEventAveragingWeight,                                 41715) /*!< 41715 (float FIX.5.0SP2) The weight factor to be applied to the observation.*/ \
X(NoUnderlyingComplexEventCreditEvents,                                  41716) /*!< 41716 (NumInGroup FIX.5.0SP2) The number of credit events specified in the repeating group.*/ \
X(UnderlyingComplexEventCreditEventType,                                 41717) /*!< 41717 (String FIX.5.0SP2) Specifies the type of credit event.  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Types for code list of applicable event types.*/ \
X(UnderlyingComplexEventCreditEventValue,                                41718) /*!< 41718 (String FIX.5.0SP2) The credit event value appropriate to UnderlyingComplexEventCreditEventType(41717).  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Types for applicable event type values. */ \
X(UnderlyingComplexEventCreditEventCurrency,                             41719) /*!< 41719 (Currency FIX.5.0SP2) Specifies the applicable currency when UnderlyingComplexEventCreditEventValue(41718) is an amount. Uses ISO 4217 currency codes. */ \
X(UnderlyingComplexEventCreditEventPeriod,                               41720) /*!< 41720 (int FIX.5.0SP2) Time unit multiplier for complex credit events.*/ \
X(UnderlyingComplexEventCreditEventUnit,                                 41721) /*!< 41721 (String FIX.5.0SP2) Time unit associated with complex credit events.*/ \
X(UnderlyingComplexEventCreditEventDayType,                              41722) /*!< 41722 (int FIX.5.0SP2) Specifies the day type for the complex credit events. */ \
X(UnderlyingComplexEventCreditEventRateSource,                           41723) /*!< 41723 (int FIX.5.0SP2) Identifies the source of rate information used for credit events.  \
 \
See http://www.fixtradingcommunity.org/codelists#Credit_Event_Rate_Source for code list of applicable sources.*/ \
X(NoUnderlyingComplexEventCreditEventQualifiers,                         41724) /*!< 41724 (NumInGroup FIX.5.0SP2) Number of qualifiers in the repeating group.*/ \
X(UnderlyingComplexEventCreditEventQualifier,                            41725) /*!< 41725 (char FIX.5.0SP2) Specifies a complex event qualifier. Used to further qualify UnderlyingComplexEventCreditEventType(41717). */ \
X(NoUnderlyingComplexEventPeriodDateTimes,                               41726) /*!< 41726 (NumInGroup FIX.5.0SP2) Number of entries in the date-time repeating group.*/ \
X(UnderlyingComplexEventPeriodDate,                                      41727) /*!< 41727 (LocalMktDate FIX.5.0SP2) The averaging date for an Asian option.  \
 \
The trigger date for a Barrier or Knock option.*/ \
X(UnderlyingComplexEventPeriodTime,                                      41728) /*!< 41728 (LocalMktTime FIX.5.0SP2) The averaging time for an Asian option.*/ \
X(NoUnderlyingComplexEventPeriods,                                       41729) /*!< 41729 (NumInGroup FIX.5.0SP2) Number of periods in the repeating group.*/ \
X(UnderlyingComplexEventPeriodType,                                      41730) /*!< 41730 (int FIX.5.0SP2) Specifies the period type.*/ \
X(UnderlyingComplexEventBusinessCenter,                                  41731) /*!< 41731 (String FIX.5.0SP2) The business center for adjusting dates and times in the schedule or date-time group. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingComplexEventRateSources,                                   41732) /*!< 41732 (NumInGroup FIX.5.0SP2) Number of rate sources in the repeating group.*/ \
X(UnderlyingComplexEventRateSource,                                      41733) /*!< 41733 (int FIX.5.0SP2) Identifies the source of rate information. \
 \
*/ \
X(UnderlyingComplexEventRateSourceType,                                  41734) /*!< 41734 (int FIX.5.0SP2) Indicates whether the rate source specified is a primary or secondary source.*/ \
X(UnderlyingComplexEventReferencePage,                                   41735) /*!< 41735 (String FIX.5.0SP2) Identifies the reference page from the rate source. \
 \
For FX, the reference page to the spot rate is to be used for the reference FX spot rate. \
 \
When UnderlyingComplexEventRateSource(41733) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions. See: http://www.fpml.org/coding-scheme/settlement-rate-option.*/ \
X(UnderlyingComplexEventReferencePageHeading,                            41736) /*!< 41736 (String FIX.5.0SP2) Identifies the reference page heading from the rate source.*/ \
X(NoUnderlyingComplexEventDateBusinessCenters,                           41737) /*!< 41737 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingComplexEventDateBusinessCenter,                              41738) /*!< 41738 (String FIX.5.0SP2) The business center calendar is used to adjust the event date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingComplexEventDateUnadjusted,                                  41739) /*!< 41739 (LocalMktDate FIX.5.0SP2) The unadjusted complex event date.*/ \
X(UnderlyingComplexEventDateRelativeTo,                                  41740) /*!< 41740 (int FIX.5.0SP2) Specifies the anchor date when the complex event date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingComplexEventDateOffsetPeriod,                                41741) /*!< 41741 (int FIX.5.0SP2) Time unit multiplier for the relative date offset.*/ \
X(UnderlyingComplexEventDateOffsetUnit,                                  41742) /*!< 41742 (String FIX.5.0SP2) Time unit associated with the relative date offset.*/ \
X(UnderlyingComplexEventDateOffsetDayType,                               41743) /*!< 41743 (int FIX.5.0SP2) Specifies the day type of the relative date offset.*/ \
X(UnderlyingComplexEventDateBusinessDayConvention,                       41744) /*!< 41744 (int FIX.5.0SP2) The business day convention used to adjust the event date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingComplexEventDateAdjusted,                                    41745) /*!< 41745 (LocalMktDate FIX.5.0SP2) The adjusted complex event date.*/ \
X(UnderlyingComplexEventFixingTime,                                      41746) /*!< 41746 (LocalMktTime FIX.5.0SP2) The local market fixing time.*/ \
X(UnderlyingComplexEventFixingTimeBusinessCenter,                        41747) /*!< 41747 (String FIX.5.0SP2) The business center for determining the actual fixing times. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingComplexEventCreditEventSources,                            41748) /*!< 41748 (NumInGroup FIX.5.0SP2) Number of event sources in the repeating group.*/ \
X(UnderlyingComplexEventCreditEventSource,                               41749) /*!< 41749 (String FIX.5.0SP2) A newspaper or electronic news service that may publish relevant information used in the determination of whether or not a credit event has occurred.*/ \
X(NoUnderlyingComplexEventSchedules,                                     41750) /*!< 41750 (NumInGroup FIX.5.0SP2) Number of schedules in the repeating group.*/ \
X(UnderlyingComplexEventScheduleStartDate,                               41751) /*!< 41751 (LocalMktDate FIX.5.0SP2) The start date of the schedule.*/ \
X(UnderlyingComplexEventScheduleEndDate,                                 41752) /*!< 41752 (LocalMktDate FIX.5.0SP2) The end date of the schedule.*/ \
X(UnderlyingComplexEventScheduleFrequencyPeriod,                         41753) /*!< 41753 (int FIX.5.0SP2) Time unit multiplier for the schedule date frequency.*/ \
X(UnderlyingComplexEventScheduleFrequencyUnit,                           41754) /*!< 41754 (String FIX.5.0SP2) Time unit associated with the schedule date frequency.*/ \
X(UnderlyingComplexEventScheduleRollConvention,                          41755) /*!< 41755 (String FIX.5.0SP2) The convention for determining the sequence of dates. It is used in conjunction with a specified frequency. Used only to override the roll convention defined in the UnderlyingDateAdjustment component in UnderlyingInstrument.*/ \
X(NoUnderlyingDeliverySchedules,                                         41756) /*!< 41756 (NumInGroup FIX.5.0SP2) Number of delivery schedules in the repeating group.*/ \
X(UnderlyingDeliveryScheduleType,                                        41757) /*!< 41757 (int FIX.5.0SP2) Specifies the type of delivery schedule.*/ \
X(UnderlyingDeliveryScheduleXID,                                         41758) /*!< 41758 (XID FIX.5.0SP2) Identifier for this instance of delivery schedule for cross referencing elsewhere in the message.*/ \
X(UnderlyingDeliveryScheduleNotional,                                    41759) /*!< 41759 (Qty FIX.5.0SP2) Physical delivery quantity.*/ \
X(UnderlyingDeliveryScheduleNotionalUnitOfMeasure,                       41760) /*!< 41760 (String FIX.5.0SP2) Specifies the delivery quantity unit of measure (UOM).*/ \
X(UnderlyingDeliveryScheduleNotionalCommodityFrequency,                  41761) /*!< 41761 (int FIX.5.0SP2) The frequency of notional delivery.*/ \
X(UnderlyingDeliveryScheduleNegativeTolerance,                           41762) /*!< 41762 (float FIX.5.0SP2) Specifies the negative tolerance value.  The value may be an absolute quantity or a percentage, as specified in UnderlyingDeliveryScheduleToleranceType(41765).  Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(UnderlyingDeliverySchedulePositiveTolerance,                           41763) /*!< 41763 (float FIX.5.0SP2) Specifies the positive tolerance value. The value may be an absolute quantity or a percentage, as specified in UnderlyingDeliveryScheduleToleranceType(41765). Value may exceed agreed upon value. Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(UnderlyingDeliveryScheduleToleranceUnitOfMeasure,                      41764) /*!< 41764 (String FIX.5.0SP2) Specifies the tolerance value's unit of measure (UOM).*/ \
X(UnderlyingDeliveryScheduleToleranceType,                               41765) /*!< 41765 (int FIX.5.0SP2) Specifies the tolerance value type.*/ \
X(UnderlyingDeliveryScheduleSettlCountry,                                41766) /*!< 41766 (Country FIX.5.0SP2) Specifies the country where delivery takes place. Uses ISO 3166 2-character country code.*/ \
X(UnderlyingDeliveryScheduleSettlTimeZone,                               41767) /*!< 41767 (String FIX.5.0SP2) Delivery timezone specified as "prevailing" rather than "standard" or "daylight".   \
 \
See http://www.fixtradingcommunity.org/codelists#Prevailing_Timezones for code list of applicable prevailing timezones.*/ \
X(UnderlyingDeliveryScheduleSettlFlowType,                               41768) /*!< 41768 (int FIX.5.0SP2) Specifies the delivery flow type.*/ \
X(UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction,          41769) /*!< 41769 (int FIX.5.0SP2) Indicates whether holidays are included in the settlement periods. Required for electricity contracts.*/ \
X(NoUnderlyingDeliveryScheduleSettlDays,                                 41770) /*!< 41770 (NumInGroup FIX.5.0SP2) Number of delivery schedules in the repeating group.*/ \
X(UnderlyingDeliveryScheduleSettlDay,                                    41771) /*!< 41771 (int FIX.5.0SP2) Specifies the day or group of days for delivery.*/ \
X(UnderlyingDeliveryScheduleSettlTotalHours,                             41772) /*!< 41772 (int FIX.5.0SP2) The sum of the total hours specified in the UnderlyingDeliveryScheduleSettlTimeGrp component.*/ \
X(NoUnderlyingDeliveryScheduleSettlTimes,                                41773) /*!< 41773 (NumInGroup FIX.5.0SP2) Number of hour ranges in the repeating group.*/ \
X(UnderlyingDeliveryScheduleSettlStart,                                  41774) /*!< 41774 (String FIX.5.0SP2) The scheduled start time for the delivery of the commodity where delivery occurs over specified times. The format of the time value is specified in UnderlyingDeliveryScheduleSettlTimeType(41776).*/ \
X(UnderlyingDeliveryScheduleSettlEnd,                                    41775) /*!< 41775 (String FIX.5.0SP2) The scheduled end time for the delivery of the commodity where delivery occurs over specified times. The format of the time value is specified in UnderlyingDeliveryScheduleSettlTimeType(41776).*/ \
X(UnderlyingDeliveryScheduleSettlTimeType,                               41776) /*!< 41776 (int FIX.5.0SP2) Specifies the format of the delivery start and end time values.*/ \
X(UnderlyingDeliveryStreamType,                                          41777) /*!< 41777 (int FIX.5.0SP2) Specifies the type of delivery stream.*/ \
X(UnderlyingDeliveryStreamPipeline,                                      41778) /*!< 41778 (String FIX.5.0SP2) The name of the oil delivery pipeline.*/ \
X(UnderlyingDeliveryStreamEntryPoint,                                    41779) /*!< 41779 (String FIX.5.0SP2) The point at which the commodity will enter the delivery mechanism or pipeline.*/ \
X(UnderlyingDeliveryStreamWithdrawalPoint,                               41780) /*!< 41780 (String FIX.5.0SP2) The point at which the commodity product will be withdrawn prior to delivery.*/ \
X(UnderlyingDeliveryStreamDeliveryPoint,                                 41781) /*!< 41781 (String FIX.5.0SP2) The point at which the commodity product will be delivered and received. Value specified should follow market convention appropriate for the commodity product. \
 \
For bullion see http://www.fpml.org/coding-scheme/bullion-delivery-location for values.*/ \
X(UnderlyingDeliveryStreamDeliveryRestriction,                           41782) /*!< 41782 (int FIX.5.0SP2) Specifies under what conditions the buyer and seller should be excused of their delivery obligations.*/ \
X(UnderlyingDeliveryStreamDeliveryContingency,                           41783) /*!< 41783 (String FIX.5.0SP2) Specifies the electricity delivery contingency.  \
 \
See http://www.fpml.org/coding-scheme/electricity-transmission-contingency for values.*/ \
X(UnderlyingDeliveryStreamDeliveryContingentPartySide,                   41784) /*!< 41784 (int FIX.5.0SP2) The trade side value of the party responsible for electricity delivery contingency.*/ \
X(UnderlyingDeliveryStreamDeliverAtSourceIndicator,                      41785) /*!< 41785 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', delivery of the coal product is to be at its source.*/ \
X(UnderlyingDeliveryStreamRiskApportionment,                             41786) /*!< 41786 (String FIX.5.0SP2) Specifies how the parties to the trade apportion responsibility for the delivery of the commodity product.  \
 \
See http://www.fixtradingcommunity.org/codelists#Risk_Apportionment for the details of the external code list.*/ \
X(UnderlyingDeliveryStreamTitleTransferLocation,                         41787) /*!< 41787 (String FIX.5.0SP2) Specifies the title transfer location.*/ \
X(UnderlyingDeliveryStreamTitleTransferCondition,                        41788) /*!< 41788 (int FIX.5.0SP2) Specifies the title transfer condition.*/ \
X(UnderlyingDeliveryStreamImporterOfRecord,                              41789) /*!< 41789 (String FIX.5.0SP2) A party, not necessarily of the trade, who is the Importer of Record for the purposes of paying customs duties and applicable taxes or costs related to importation.*/ \
X(UnderlyingDeliveryStreamNegativeTolerance,                             41790) /*!< 41790 (float FIX.5.0SP2) Specifies the negative tolerance value.  The value may be an absolute quantity or a percentage, as specified in UnderlyingDeliveryStreamToleranceType(41793).  Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(UnderlyingDeliveryStreamPositiveTolerance,                             41791) /*!< 41791 (float FIX.5.0SP2) Specifies the positive tolerance value. The value may be an absolute quantity or a percentage, as specified in UnderlyingDeliveryStreamToleranceType(41793). Value may exceed agreed upon value. Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%).*/ \
X(UnderlyingDeliveryStreamToleranceUnitOfMeasure,                        41792) /*!< 41792 (String FIX.5.0SP2) Specifies the tolerance value's unit of measure (UOM).*/ \
X(UnderlyingDeliveryStreamToleranceType,                                 41793) /*!< 41793 (int FIX.5.0SP2) Specifies the tolerance value type.*/ \
X(UnderlyingDeliveryStreamToleranceOptionSide,                           41794) /*!< 41794 (int FIX.5.0SP2) Indicates whether the tolerance is at the seller's or buyer's option.*/ \
X(UnderlyingDeliveryStreamTotalPositiveTolerance,                        41795) /*!< 41795 (Percentage FIX.5.0SP2) The positive percent tolerance which applies to the total quantity delivered over all shipment periods. \
 \
Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%.).*/ \
X(UnderlyingDeliveryStreamTotalNegativeTolerance,                        41796) /*!< 41796 (Percentage FIX.5.0SP2) The negative percent tolerance which applies to the total quantity delivered over all shipment periods. \
 \
Percentage value is to be expressed relative to "1.0" representing 100% (e.g. a value of "0.0575" represents 5.75%.).*/ \
X(UnderlyingDeliveryStreamNotionalConversionFactor,                      41797) /*!< 41797 (float FIX.5.0SP2) If the notional quantity is specified in a unit that does not match the unit in which the commodity reference price is quoted, the scaling or conversion factor used to convert the commodity reference price unit into the notional quantity unit should be stated here. If there is no conversion, this field is not intended to be used.*/ \
X(UnderlyingDeliveryStreamTransportEquipment,                            41798) /*!< 41798 (String FIX.5.0SP2) The transportation equipment with which the commodity product will be delivered and received.*/ \
X(UnderlyingDeliveryStreamElectingPartySide,                             41799) /*!< 41799 (int FIX.5.0SP2) A reference to the party able to choose whether the gas is delivered for a particular period e.g. a swing or interruptible contract.*/ \
X(NoUnderlyingStreamAssetAttributes,                                     41800) /*!< 41800 (NumInGroup FIX.5.0SP2) Number of asset attribute entries in the group.*/ \
X(UnderlyingStreamAssetAttributeType,                                    41801) /*!< 41801 (String FIX.5.0SP2) Specifies the name of the attribute.   \
 \
See http://www.fixtradingcommunity.org/codelists#Asset_Attribute_Types for code list of applicable asset attribute types.*/ \
X(UnderlyingStreamAssetAttributeValue,                                   41802) /*!< 41802 (String FIX.5.0SP2) Specifies the value of the attribute.*/ \
X(UnderlyingStreamAssetAttributeLimit,                                   41803) /*!< 41803 (String FIX.5.0SP2) The limit or lower acceptable value of the attribute.*/ \
X(NoUnderlyingDeliveryStreamCycles,                                      41804) /*!< 41804 (NumInGroup FIX.5.0SP2) Number of delivery cycles in the repeating group.*/ \
X(UnderlyingDeliveryStreamCycleDesc,                                     41805) /*!< 41805 (String FIX.5.0SP2) The delivery cycles during which the oil product will be transported in the pipeline.*/ \
X(EncodedUnderlyingDeliveryStreamCycleDescLen,                           41806) /*!< 41806 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingDeliveryStreamCycleDesc(41807) field.*/ \
X(EncodedUnderlyingDeliveryStreamCycleDesc,                              41807) /*!< 41807 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingDeliveryStreamCycleDesc(41805) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingDeliveryStreamCycleDesc(41805) field.*/ \
X(NoUnderlyingDeliveryStreamCommoditySources,                            41808) /*!< 41808 (NumInGroup FIX.5.0SP2) Number of commodity sources in the repeating group.*/ \
X(UnderlyingDeliveryStreamCommoditySource,                               41809) /*!< 41809 (String FIX.5.0SP2) The SCoTA coal cargo origin, mining region, mine(s), mining complex(es), loadout(s) or river dock(s) or other point(s) of origin that seller and buyer agree are acceptable origins for the coal product. For international coal transactions, this is the origin of the coal product.  \
 \
See http://www.fpml.org/coding-scheme/commodity-coal-product-source for values.*/ \
X(UnderlyingExerciseDesc,                                                41810) /*!< 41810 (String FIX.5.0SP2) A description of  the option exercise.*/ \
X(EncodedUnderlyingExerciseDescLen,                                      41811) /*!< 41811 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingExerciseDesc(41812) field.*/ \
X(EncodedUnderlyingExerciseDesc,                                         41812) /*!< 41812 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingExerciseDesc(41810) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingExerciseDesc(41810) field.*/ \
X(UnderlyingAutomaticExerciseIndicator,                                  41813) /*!< 41813 (Boolean FIX.5.0SP2) Indicates (when 'Y') that exercise is automatic when the strike price is crossed or the underlying trade is in the money.*/ \
X(UnderlyingAutomaticExerciseThresholdRate,                              41814) /*!< 41814 (float FIX.5.0SP2) The threshold rate for triggering automatic exercise.*/ \
X(UnderlyingExerciseConfirmationMethod,                                  41815) /*!< 41815 (int FIX.5.0SP2) Indicates whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.*/ \
X(UnderlyingManualNoticeBusinessCenter,                                  41816) /*!< 41816 (String FIX.5.0SP2) Identifies the business center used for adjusting the time for manual exercise notice. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingFallbackExerciseIndicator,                                   41817) /*!< 41817 (Boolean FIX.5.0SP2) Indicates whether the notional amount of the underlying swap, not previously exercised under the option, will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than one tenth of a percentage point (0.10% or 0.001).*/ \
X(UnderlyingLimitedRightToConfirmIndicator,                              41818) /*!< 41818 (Boolean FIX.5.0SP2) Indicates whether the Seller may request the Buyer to confirm its intent to exercise if not done on or before the expiration time on the Expiration date. If true ("Y") specific rules will apply in relation to the settlement mode.*/ \
X(UnderlyingExerciseSplitTicketIndicator,                                41819) /*!< 41819 (Boolean FIX.5.0SP2) Indicates in physical settlement of bond and convertible bond options whether the party required to deliver the bonds will divide those to be delivered as notifying party desires to facilitate delivery obligations.*/ \
X(NoUnderlyingOptionExerciseBusinessCenters,                             41820) /*!< 41820 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingOptionExerciseBusinessCenter,                                41821) /*!< 41821 (String FIX.5.0SP2) The business center calendar used to adjust the option exercise dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingOptionExerciseBusinessDayConvention,                         41822) /*!< 41822 (int FIX.5.0SP2) The business day convention used to adjust the option exercise dates. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingOptionExerciseEarliestDateOffsetDayType,                     41823) /*!< 41823 (int FIX.5.0SP2) Specifies the day type of the relative earliest exercise date offset.*/ \
X(UnderlyingOptionExerciseEarliestDateOffsetPeriod,                      41824) /*!< 41824 (int FIX.5.0SP2) Time unit multiplier for the relative earliest exercise date offset. */ \
X(UnderlyingOptionExerciseEarliestDateOffsetUnit,                        41825) /*!< 41825 (String FIX.5.0SP2) Time unit associated with the relative earliest exercise date offset.*/ \
X(UnderlyingOptionExerciseFrequencyPeriod,                               41826) /*!< 41826 (int FIX.5.0SP2) Time unit multiplier for the frequency of exercise dates. */ \
X(UnderlyingOptionExerciseFrequencyUnit,                                 41827) /*!< 41827 (String FIX.5.0SP2) Time unit associated with the frequency of exercise dates. */ \
X(UnderlyingOptionExerciseStartDateUnadjusted,                           41828) /*!< 41828 (LocalMktDate FIX.5.0SP2) The unadjusted start date for calculating periodic exercise dates.*/ \
X(UnderlyingOptionExerciseStartDateRelativeTo,                           41829) /*!< 41829 (int FIX.5.0SP2) Specifies the anchor date when the option exercise start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingOptionExerciseStartDateOffsetPeriod,                         41830) /*!< 41830 (int FIX.5.0SP2) Time unit multiplier for the relative exercise start date offset.  */ \
X(UnderlyingOptionExerciseStartDateOffsetUnit,                           41831) /*!< 41831 (String FIX.5.0SP2) Time unit associated with the relative exercise start date offset.*/ \
X(UnderlyingOptionExerciseStartDateOffsetDayType,                        41832) /*!< 41832 (int FIX.5.0SP2) Specifies the day type of the relative option exercise start date offset.*/ \
X(UnderlyingOptionExerciseStartDateAdjusted,                             41833) /*!< 41833 (LocalMktDate FIX.5.0SP2) The adjusted start date for calculating periodic exercise dates.*/ \
X(UnderlyingOptionExerciseSkip,                                          41834) /*!< 41834 (int FIX.5.0SP2) The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.*/ \
X(UnderlyingOptionExerciseNominationDeadline,                            41835) /*!< 41835 (LocalMktDate FIX.5.0SP2) The last date (adjusted) for establishing the option exercise terms.*/ \
X(UnderlyingOptionExerciseFirstDateUnadjusted,                           41836) /*!< 41836 (LocalMktDate FIX.5.0SP2) The unadjusted first exercise date.*/ \
X(UnderlyingOptionExerciseLastDateUnadjusted,                            41837) /*!< 41837 (LocalMktDate FIX.5.0SP2) The unadjusted last exercise date.*/ \
X(UnderlyingOptionExerciseEarliestTime,                                  41838) /*!< 41838 (LocalMktTime FIX.5.0SP2) The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) (i) on the expriation date, in the case of a European style option, (ii) on each Bermuda option exercise date and the expiration date, in the case of a Bermuda style option, (iii) the commencement date to, and including, the expiration date, in the case of an American option.*/ \
X(UnderlyingOptionExerciseLatestTime,                                    41839) /*!< 41839 (LocalMktTime FIX.5.0SP2) Latest exercise time.  See also UnderlyingOptionExerciseEarliestTime(41838).*/ \
X(UnderlyingOptionExerciseTimeBusinessCenter,                            41840) /*!< 41840 (String FIX.5.0SP2) The business center used to determine the locale for option exercise time, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values*/ \
X(NoUnderlyingOptionExerciseDates,                                       41841) /*!< 41841 (NumInGroup FIX.5.0SP2) Number of dates in the repeating group.*/ \
X(UnderlyingOptionExerciseDate,                                          41842) /*!< 41842 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted option exercise fixed date.*/ \
X(UnderlyingOptionExerciseDateType,                                      41843) /*!< 41843 (int FIX.5.0SP2) Specifies the type of option exercise date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(NoUnderlyingOptionExerciseExpirationDateBusinessCenters,               41844) /*!< 41844 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingOptionExerciseExpirationDateBusinessCenter,                  41845) /*!< 41845 (String FIX.5.0SP2) The business center calendar used to adjust the option exercise expiration dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingOptionExerciseExpirationDateBusinessDayConvention,           41846) /*!< 41846 (int FIX.5.0SP2) The business day convention used to adjust the option exercise expiration dates. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingOptionExerciseExpirationDateRelativeTo,                      41847) /*!< 41847 (int FIX.5.0SP2) Specifies the anchor date when the option exercise expiration date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingOptionExerciseExpirationDateOffsetPeriod,                    41848) /*!< 41848 (int FIX.5.0SP2) Time unit multiplier for the relative exercise expiration date offset. */ \
X(UnderlyingOptionExerciseExpirationDateOffsetUnit,                      41849) /*!< 41849 (String FIX.5.0SP2) Time unit associated with the relative exercise expiration date offset.*/ \
X(UnderlyingOptionExerciseExpirationFrequencyPeriod,                     41850) /*!< 41850 (int FIX.5.0SP2) Time unit multiplier for the frequency of exercise expiration dates. */ \
X(UnderlyingOptionExerciseExpirationFrequencyUnit,                       41851) /*!< 41851 (String FIX.5.0SP2) Time unit associated with the frequency of exercise expiration dates. */ \
X(UnderlyingOptionExerciseExpirationRollConvention,                      41852) /*!< 41852 (String FIX.5.0SP2) The convention for determining the sequence of exercise expiration dates. It is used in conjunction with a specified frequency. Used only to override the roll convention defined in the UnderlyingDateAdjustment component in UnderlyingInstrument.*/ \
X(UnderlyingOptionExerciseExpirationDateOffsetDayType,                   41853) /*!< 41853 (int FIX.5.0SP2) Specifies the day type of the relative option exercise expiration date offset.*/ \
X(UnderlyingOptionExerciseExpirationTime,                                41854) /*!< 41854 (LocalMktTime FIX.5.0SP2) The option exercise expiration time.*/ \
X(UnderlyingOptionExerciseExpirationTimeBusinessCenter,                  41855) /*!< 41855 (String FIX.5.0SP2) The business center used to determine the locale for option exercise expiration time, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingOptionExerciseExpirationDates,                             41856) /*!< 41856 (NumInGroup FIX.5.0SP2) Number of fixed exercise expiration dates in the repeating group.*/ \
X(UnderlyingOptionExerciseExpirationDate,                                41857) /*!< 41857 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted option exercise expiration fixed date.*/ \
X(UnderlyingOptionExerciseExpirationDateType,                            41858) /*!< 41858 (int FIX.5.0SP2) Specifies the type of option exercise expiration date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(UnderlyingMarketDisruptionProvision,                                   41859) /*!< 41859 (int FIX.5.0SP2) The consequences of market disruption events.*/ \
X(UnderlyingMarketDisruptionFallbackProvision,                           41860) /*!< 41860 (int FIX.5.0SP2) Specifies the location of the fallback provision documentation.*/ \
X(UnderlyingMarketDisruptionMaximumDays,                                 41861) /*!< 41861 (int FIX.5.0SP2) Specifies the maximum number of market disruption days (commodity or bullion business days) in a contract or confirmation. If none are specified, the maximum number of market disruption days is five (5).*/ \
X(UnderlyingMarketDisruptionMaterialityPercentage,                       41862) /*!< 41862 (Percentage FIX.5.0SP2) Used when a price materiality percentage applies to the price source disruption event and this event has been specified.*/ \
X(UnderlyingMarketDisruptionMinimumFuturesContracts,                     41863) /*!< 41863 (int FIX.5.0SP2) Specifies the minimum futures contracts level that dictates whether or not a 'De Minimis Trading' event has occurred. */ \
X(NoUnderlyingMarketDisruptionEvents,                                    41864) /*!< 41864 (NumInGroup FIX.5.0SP2) Number of disruption events in the repeating group.*/ \
X(UnderlyingMarketDisruptionEvent,                                       41865) /*!< 41865 (String FIX.5.0SP2) Specifies the market disruption event.  \
 \
For commodities see http://www.fpml.org/coding-scheme/commodity-market-disruption for values.  \
 \
For foreign exchange, see http://www.fixtradingcommunity.org/codelists#Market_Disruption_Event for code list of applicable event types.*/ \
X(NoUnderlyingMarketDisruptionFallbacks,                                 41866) /*!< 41866 (NumInGroup FIX.5.0SP2) Number of fallbacks in the repeating group.*/ \
X(UnderlyingMarketDisruptionFallbackType,                                41867) /*!< 41867 (String FIX.5.0SP2) Specifies the type of disruption fallback.  \
 \
See http://www.fpml.org/coding-scheme/commodity-market-disruption-fallback for values. */ \
X(NoUnderlyingMarketDisruptionFallbackReferencePrices,                   41868) /*!< 41868 (NumInGroup FIX.5.0SP2) Number of fallback reference securities in the repeating group.*/ \
X(UnderlyingMarketDisruptionFallbackUnderlierType,                       41869) /*!< 41869 (int FIX.5.0SP2) The type of reference price underlier.*/ \
X(UnderlyingMarketDisruptionFallbackUnderlierSecurityID,                 41870) /*!< 41870 (String FIX.5.0SP2) Specifies the identifier value of the security.*/ \
X(UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource,           41871) /*!< 41871 (String FIX.5.0SP2) Specifies the class or source scheme of the security identifier.*/ \
X(UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc,               41872) /*!< 41872 (String FIX.5.0SP2) Specifies the description of underlying security.*/ \
X(EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen,     41873) /*!< 41873 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(41874) field.*/ \
X(EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc,        41874) /*!< 41874 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(41872) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(41872).*/ \
X(UnderlyingMarketDisruptionFallbackOpenUnits,                           41875) /*!< 41875 (Qty FIX.5.0SP2) If there are multiple underlying assets, this specifies the number of units (index or securities) that constitute the underlier of the swap. In the case of a basket swap, this is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.*/ \
X(UnderlyingMarketDisruptionFallbackBasketCurrency,                      41876) /*!< 41876 (Currency FIX.5.0SP2) Specifies the currency if the underlier is a basket.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingMarketDisruptionFallbackBasketDivisor,                       41877) /*!< 41877 (float FIX.5.0SP2) Specifies the basket divisor amount. This value is normally used to adjust the constituent weight for pricing or to adjust for dividends, or other corporate actions.*/ \
X(NoUnderlyingPaymentScheduleFixingDays,                                 41878) /*!< 41878 (NumInGroup FIX.5.0SP2) Number of fixing days in the repeating group.*/ \
X(UnderlyingPaymentScheduleFixingDayOfWeek,                              41879) /*!< 41879 (int FIX.5.0SP2) The day of the week on which fixing takes place. */ \
X(UnderlyingPaymentScheduleFixingDayNumber,                              41880) /*!< 41880 (int FIX.5.0SP2) The occurrence of the day of week on which fixing takes place. */ \
X(UnderlyingPaymentScheduleXID,                                          41881) /*!< 41881 (XID FIX.5.0SP2) Identifier of this UnderlyingPaymentSchedule for cross referencing elsewhere in the message.*/ \
X(UnderlyingPaymentScheduleXIDRef,                                       41882) /*!< 41882 (XIDREF FIX.5.0SP2) Reference to payment schedule elsewhere in the message.*/ \
X(UnderlyingPaymentScheduleRateCurrency,                                 41883) /*!< 41883 (Currency FIX.5.0SP2) Specifies the currency of the schedule rate.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentScheduleRateUnitOfMeasure,                            41884) /*!< 41884 (String FIX.5.0SP2) The schedule rate unit of measure (UOM).*/ \
X(UnderlyingPaymentScheduleRateConversionFactor,                         41885) /*!< 41885 (float FIX.5.0SP2) The number to be multiplied by the derived floating rate of the underlying's payment schedule in order to arrive at the payment rate. If ommitted, the schedule rate conversion factor is 1. */ \
X(UnderlyingPaymentScheduleRateSpreadType,                               41886) /*!< 41886 (int FIX.5.0SP2) Specifies whether the rate spread is an absolute value to be added to the index rate or a percentage of the index rate.*/ \
X(UnderlyingPaymentScheduleSettlPeriodPrice,                             41887) /*!< 41887 (Price FIX.5.0SP2) The schedule settlement period price.*/ \
X(UnderlyingPaymentScheduleSettlPeriodPriceCurrency,                     41888) /*!< 41888 (Currency FIX.5.0SP2) The currency of the schedule settlement period price. Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure,                41889) /*!< 41889 (String FIX.5.0SP2) The settlement period price unit of measure (UOM).*/ \
X(UnderlyingPaymentScheduleStepUnitOfMeasure,                            41890) /*!< 41890 (String FIX.5.0SP2) The schedule step unit of measure (UOM).*/ \
X(UnderlyingPaymentScheduleFixingDayDistribution,                        41891) /*!< 41891 (int FIX.5.0SP2) The distribution of fixing days.*/ \
X(UnderlyingPaymentScheduleFixingDayCount,                               41892) /*!< 41892 (int FIX.5.0SP2) The number of days over which fixing should take place.*/ \
X(UnderlyingPaymentScheduleFixingLagPeriod,                              41893) /*!< 41893 (int FIX.5.0SP2) Time unit multiplier for the fixing lag duration. */ \
X(UnderlyingPaymentScheduleFixingLagUnit,                                41894) /*!< 41894 (String FIX.5.0SP2) Time unit associated with the fixing lag duration.*/ \
X(UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod,       41895) /*!< 41895 (int FIX.5.0SP2) Time unit multiplier for the relative first observation date offset.*/ \
X(UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit,         41896) /*!< 41896 (String FIX.5.0SP2) Time unit associated with the relative first observation date offset.*/ \
X(UnderlyingPaymentStreamFlatRateIndicator,                              41897) /*!< 41897 (Boolean FIX.5.0SP2) When this element is specified and set to 'Y', the Flat Rate is the New Worldwide Tanker Nominal Freight Scale for the Freight Index Route taken at the Trade Date of the transaction "Fixed". If 'N' it is taken on each Pricing Date "Floating".*/ \
X(UnderlyingPaymentStreamFlatRateAmount,                                 41898) /*!< 41898 (Amt FIX.5.0SP2) Specifies the actual monetary value of the flat rate when UnderlyingPaymentStreamFlatRateIndicator(41897) = 'Y'.*/ \
X(UnderlyingPaymentStreamFlatRateCurrency,                               41899) /*!< 41899 (Currency FIX.5.0SP2) Specifies the currency of the actual flat rate.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentStreamMaximumPaymentAmount,                           41900) /*!< 41900 (Amt FIX.5.0SP2) Specifies the limit on the total payment amount.*/ \
X(UnderlyingPaymentStreamMaximumPaymentCurrency,                         41901) /*!< 41901 (Currency FIX.5.0SP2) Specifies the currency of total payment amount limit. Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentStreamMaximumTransactionAmount,                       41902) /*!< 41902 (Amt FIX.5.0SP2) Specifies the limit on the payment amount that goes out in any particular calculation period.*/ \
X(UnderlyingPaymentStreamMaximumTransactionCurrency,                     41903) /*!< 41903 (Currency FIX.5.0SP2) Specifies the currency of the period payment amount limit. Uses ISO 4217 currency codes. */ \
X(UnderlyingPaymentStreamFixedAmountUnitOfMeasure,                       41904) /*!< 41904 (String FIX.5.0SP2) Fixed payment amount unit of measure (UOM).*/ \
X(UnderlyingPaymentStreamTotalFixedAmount,                               41905) /*!< 41905 (Amt FIX.5.0SP2) Specifies the total fixed payment amount.*/ \
X(UnderlyingPaymentStreamWorldScaleRate,                                 41906) /*!< 41906 (float FIX.5.0SP2) The number of Worldscale points for purposes of the calculation of a fixed amount for a wet voyage charter commodity swap.*/ \
X(UnderlyingPaymentStreamContractPrice,                                  41907) /*!< 41907 (Price FIX.5.0SP2) The price per relevant unit for purposes of the calculation of a fixed amount for a dry voyage charter or time charter commodity swap.*/ \
X(UnderlyingPaymentStreamContractPriceCurrency,                          41908) /*!< 41908 (Currency FIX.5.0SP2) Specifies the currency of UnderlyingPaymentStreamContractPrice(41907).  Uses ISO 4217 currency codes.*/ \
X(NoUnderlyingPaymentStreamPricingBusinessCenters,                       41909) /*!< 41909 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingPaymentStreamPricingBusinessCenter,                          41910) /*!< 41910 (String FIX.5.0SP2) The business center calendar used to adjust the payment stream's pricing dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentStreamRateIndex2CurveUnit,                            41911) /*!< 41911 (String FIX.5.0SP2) Secondary time unit associated with the payment stream’s floating rate index curve.  */ \
X(UnderlyingPaymentStreamRateIndex2CurvePeriod,                          41912) /*!< 41912 (int FIX.5.0SP2) Secondary time unit multiplier for the payment stream’s floating rate index curve.  */ \
X(UnderlyingPaymentStreamRateIndexLocation,                              41913) /*!< 41913 (String FIX.5.0SP2) Specifies the location of the floating rate index.*/ \
X(UnderlyingPaymentStreamRateIndexLevel,                                 41914) /*!< 41914 (Qty FIX.5.0SP2) This is the weather Cooling Degree Days (CDD), Heating Degree Days (HDD) or HDD index level specified as the number of (amount of) weather index units specified by the parties in the related confirmation.*/ \
X(UnderlyingPaymentStreamRateIndexUnitOfMeasure,                         41915) /*!< 41915 (String FIX.5.0SP2) The unit of measure (UOM) of the rate index level.*/ \
X(UnderlyingPaymentStreamSettlLevel,                                     41916) /*!< 41916 (int FIX.5.0SP2) Specifies how weather index units are to be calculated.*/ \
X(UnderlyingPaymentStreamReferenceLevel,                                 41917) /*!< 41917 (Qty FIX.5.0SP2) This is the weather Cooling Degree Days (CDD), Heating Degree Days (HDD) or HDD reference level specified as the number of (amount of) weather index units specified by the parties in the related confirmation.*/ \
X(UnderlyingPaymentStreamReferenceLevelUnitOfMeasure,                    41918) /*!< 41918 (String FIX.5.0SP2) The unit of measure (UOM) of the rate reference level.*/ \
X(UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator,              41919) /*!< 41919 (Boolean FIX.5.0SP2) When set to 'Y', it indicates that the weather reference level equals zero.*/ \
X(UnderlyingPaymentStreamRateSpreadCurrency,                             41920) /*!< 41920 (Currency FIX.5.0SP2) Specifies the currency of the floating rate spread. Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentStreamRateSpreadUnitOfMeasure,                        41921) /*!< 41921 (String FIX.5.0SP2) Specifies the unit of measure (UOM) of the floating rate spread. */ \
X(UnderlyingPaymentStreamRateConversionFactor,                           41922) /*!< 41922 (float FIX.5.0SP2) The number to be multiplied by the derived floating rate of the underlying's payment stream in order to arrive at the payment rate. If omitted, the floating rate conversion factor is 1. */ \
X(UnderlyingPaymentStreamRateSpreadType,                                 41923) /*!< 41923 (int FIX.5.0SP2) Identifies whether the rate spread is an absolute value to be added to the index rate or a percentage of the index rate.*/ \
X(UnderlyingPaymentStreamLastResetRate,                                  41924) /*!< 41924 (Percentage FIX.5.0SP2) The floating rate determined at the most recent reset. The rate is expressed in decimal form, e.g. 5% is represented as 0.05.*/ \
X(UnderlyingPaymentStreamFinalRate,                                      41925) /*!< 41925 (Percentage FIX.5.0SP2) The floating rate determined at the final reset. The rate is expressed in decimal form, e.g. 5% is represented as 0.05.*/ \
X(UnderlyingPaymentStreamCalculationLagPeriod,                           41926) /*!< 41926 (int FIX.5.0SP2) Time unit multiplier for the calculation lag duration.  */ \
X(UnderlyingPaymentStreamCalculationLagUnit,                             41927) /*!< 41927 (String FIX.5.0SP2) Time unit associated with the calculation lag duration.*/ \
X(UnderlyingPaymentStreamFirstObservationDateOffsetPeriod,               41928) /*!< 41928 (int FIX.5.0SP2) Time unit multiplier for the relative first observation date offset.*/ \
X(UnderlyingPaymentStreamFirstObservationDateOffsetUnit,                 41929) /*!< 41929 (String FIX.5.0SP2) Time unit associated with the relative first observation date offset.*/ \
X(UnderlyingPaymentStreamPricingDayType,                                 41930) /*!< 41930 (int FIX.5.0SP2) Specifies the commodity pricing day type.*/ \
X(UnderlyingPaymentStreamPricingDayDistribution,                         41931) /*!< 41931 (int FIX.5.0SP2) The distribution of pricing days.*/ \
X(UnderlyingPaymentStreamPricingDayCount,                                41932) /*!< 41932 (int FIX.5.0SP2) The number of days over which pricing should take place.*/ \
X(UnderlyingPaymentStreamPricingBusinessCalendar,                        41933) /*!< 41933 (String FIX.5.0SP2) Specifies the business calendar to use for pricing.  \
 \
See http://www.fpml.org/coding-scheme/commodity-business-calendar for values.*/ \
X(UnderlyingPaymentStreamPricingBusinessDayConvention,                   41934) /*!< 41934 (int FIX.5.0SP2) The business day convention used to adjust the payment stream's pricing dates. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(LegStreamCommoditySettlTimeType,                                       41935) /*!< 41935 (int FIX.5.0SP2) Specifies the format of the commodity settlement start and end times.*/ \
X(UnderlyingStreamCommoditySettlTimeType,                                41936) /*!< 41936 (int FIX.5.0SP2) Specifies the format of the commodity settlement start and end times.*/ \
X(NoUnderlyingPaymentStreamPaymentDates,                                 41937) /*!< 41937 (NumInGroup FIX.5.0SP2) Number of payment dates in the repeating group.*/ \
X(UnderlyingPaymentStreamPaymentDate,                                    41938) /*!< 41938 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted fixed stream payment date.*/ \
X(UnderlyingPaymentStreamPaymentDateType,                                41939) /*!< 41939 (int FIX.5.0SP2) Specifies the type of payment date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator,           41940) /*!< 41940 (Boolean FIX.5.0SP2) When set to 'Y', it indicates that payment dates are specified in the relevant master agreement.*/ \
X(NoUnderlyingPaymentStreamPricingDates,                                 41941) /*!< 41941 (NumInGroup FIX.5.0SP2) Number of pricing dates in the repeating group.*/ \
X(UnderlyingPaymentStreamPricingDate,                                    41942) /*!< 41942 (LocalMktDate FIX.5.0SP2) An adjusted or unadjusted fixed pricing date. */ \
X(UnderlyingPaymentStreamPricingDateType,                                41943) /*!< 41943 (int FIX.5.0SP2) Specifies the type of pricing date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(NoUnderlyingPaymentStreamPricingDays,                                  41944) /*!< 41944 (NumInGroup FIX.5.0SP2) Number of pricing days in the repeating group.*/ \
X(UnderlyingPaymentStreamPricingDayOfWeek,                               41945) /*!< 41945 (int FIX.5.0SP2) The day of the week on which pricing takes place.*/ \
X(UnderlyingPaymentStreamPricingDayNumber,                               41946) /*!< 41946 (int FIX.5.0SP2) The occurrence of the day of week on which pricing takes place. */ \
X(NoUnderlyingPricingDateBusinessCenters,                                41947) /*!< 41947 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingPricingDateBusinessCenter,                                   41948) /*!< 41948 (String FIX.5.0SP2) The business center calendar used to adjust the pricing or fixing date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPricingDateUnadjusted,                                       41949) /*!< 41949 (LocalMktDate FIX.5.0SP2) The unadjusted pricing or fixing date.*/ \
X(UnderlyingPricingDateBusinessDayConvention,                            41950) /*!< 41950 (int FIX.5.0SP2) The business day convention used to adjust the pricing or fixing date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingPricingDateAdjusted,                                         41951) /*!< 41951 (LocalMktDate FIX.5.0SP2) The adjusted pricing or fixing date.*/ \
X(UnderlyingPricingTime,                                                 41952) /*!< 41952 (LocalMktTime FIX.5.0SP2) The local market pricing or fixing time.*/ \
X(UnderlyingPricingTimeBusinessCenter,                                   41953) /*!< 41953 (String FIX.5.0SP2) Specifies the business center for determining the pricing or fixing time. See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingStreamCalculationPeriodDates,                              41954) /*!< 41954 (NumInGroup FIX.5.0SP2) Number of calculation period dates in the repeating group.*/ \
X(UnderlyingStreamCalculationPeriodDate,                                 41955) /*!< 41955 (LocalMktDate FIX.5.0SP2) The adjusted or unadjusted fixed calculation period date.*/ \
X(UnderlyingStreamCalculationPeriodDateType,                             41956) /*!< 41956 (int FIX.5.0SP2) Specifies the type of fixed calculation period date. When specified it applies not only to the current date but to all subsequent dates in the group until overridden with a new type.*/ \
X(UnderlyingStreamCalculationPeriodDatesXID,                             41957) /*!< 41957 (XID FIX.5.0SP2) Identifier of this calculation period for cross referencing elsewhere in the message.*/ \
X(UnderlyingStreamCalculationPeriodDatesXIDRef,                          41958) /*!< 41958 (XIDREF FIX.5.0SP2) Cross reference to another calculation period for duplicating its properties.*/ \
X(UnderlyingStreamCalculationBalanceOfFirstPeriod,                       41959) /*!< 41959 (Boolean FIX.5.0SP2) When specified and set to 'Y', it indicates that the first calculation period should run from the effective date to the end of the calendar period in which the effective date falls (e.g. Jan 15 - Jan 31 if the calculation periods are one month long and effective date is Jan 15.). If 'N' or not specified, it indicates that the first calculation period should run from the effective date for one whole period (e.g. Jan 15 to Feb 14 if the calculation periods are one month long and the effective date is Jan 15.).*/ \
X(UnderlyingStreamCalculationCorrectionPeriod,                           41960) /*!< 41960 (int FIX.5.0SP2) Time unit multiplier for the length of time after the publication of the data when corrections can be made.*/ \
X(UnderlyingStreamCalculationCorrectionUnit,                             41961) /*!< 41961 (String FIX.5.0SP2) Time unit associated with the length of time after the publication of the data when corrections can be made. */ \
X(NoUnderlyingStreamCommoditySettlBusinessCenters,                       41962) /*!< 41962 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingStreamCommoditySettlBusinessCenter,                          41963) /*!< 41963 (String FIX.5.0SP2) The business center calendar used to adjust the commodity delivery date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingStreamCommodityBase,                                         41964) /*!< 41964 (String FIX.5.0SP2) Specifies the general base type of the commodity traded. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions. */ \
X(UnderlyingStreamCommodityType,                                         41965) /*!< 41965 (String FIX.5.0SP2) Specifies the type of commodity product. \
 \
For coal see http://www.fpml.org/coding-scheme/commodity-coal-product-type for values.  \
 \
For metals see http://www.fpml.org/coding-scheme/commodity-metal-product-type for values.  \
 \
For bullion see http://www.fixtradingcommunity.org/codelists#Bullion_Types for the external code list of bullion types.*/ \
X(UnderlyingStreamCommoditySecurityID,                                   41966) /*!< 41966 (String FIX.5.0SP2) Specifies the market identifier for the commodity.*/ \
X(UnderlyingStreamCommoditySecurityIDSource,                             41967) /*!< 41967 (String FIX.5.0SP2) Identifies the class or source of the UnderlyingStreamCommoditySecurityIDSource(41966) value.*/ \
X(UnderlyingStreamCommodityDesc,                                         41968) /*!< 41968 (String FIX.5.0SP2) Description of the commodity asset.*/ \
X(EncodedUnderlyingStreamCommodityDescLen,                               41969) /*!< 41969 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingStreamCommodityDesc(41970) field.*/ \
X(EncodedUnderlyingStreamCommodityDesc,                                  41970) /*!< 41970 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingStreamCommodityDesc(41968) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingStreamCommodityDesc(41968) field.*/ \
X(UnderlyingStreamCommodityUnitOfMeasure,                                41971) /*!< 41971 (String FIX.5.0SP2) The unit of measure (UOM) of the commodity asset.*/ \
X(UnderlyingStreamCommodityCurrency,                                     41972) /*!< 41972 (Currency FIX.5.0SP2) Identifies the currency of the commodity asset.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingStreamCommodityExchange,                                     41973) /*!< 41973 (Exchange FIX.5.0SP2) Identifies the exchange where the commodity is traded.*/ \
X(UnderlyingStreamCommodityRateSource,                                   41974) /*!< 41974 (int FIX.5.0SP2) Identifies the source of rate information used for commodities.  \
 \
See http://www.fixtradingcommunity.org/codelists#Commodity_Rate_Source for code list of applicable sources.*/ \
X(UnderlyingStreamCommodityRateReferencePage,                            41975) /*!< 41975 (String FIX.5.0SP2) Identifies the reference "page" from the rate source.*/ \
X(UnderlyingStreamCommodityRateReferencePageHeading,                     41976) /*!< 41976 (String FIX.5.0SP2) Identifies the page heading from the rate source.*/ \
X(UnderlyingStreamDataProvider,                                          41977) /*!< 41977 (String FIX.5.0SP2) Specifies the commodity data or information provider.  \
 \
See http://www.fpml.org/coding-scheme/commodity-information-provider for values.*/ \
X(UnderlyingStreamCommodityPricingType,                                  41978) /*!< 41978 (String FIX.5.0SP2) Specifies how the pricing or rate setting of the trade is to be determined or based upon.   \
 \
See http://www.fixtradingcommunity.org/codelists#Commodity_Rate_Pricing_Type for code list of applicable commodity pricing types.*/ \
X(UnderlyingStreamCommodityNearbySettlDayPeriod,                         41979) /*!< 41979 (int FIX.5.0SP2) Time unit multiplier for the nearby settlement day. */ \
X(UnderlyingStreamCommodityNearbySettlDayUnit,                           41980) /*!< 41980 (String FIX.5.0SP2) Time unit associated with the nearby settlement day.*/ \
X(UnderlyingStreamCommoditySettlDateUnadjusted,                          41981) /*!< 41981 (LocalMktDate FIX.5.0SP2) The unadjusted commodity delivery date.*/ \
X(UnderlyingStreamCommoditySettlDateBusinessDayConvention,               41982) /*!< 41982 (int FIX.5.0SP2) The business day convention used to adjust the commodity delivery date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingStreamCommoditySettlDateAdjusted,                            41983) /*!< 41983 (LocalMktDate FIX.5.0SP2) The adjusted commodity delivery date.*/ \
X(UnderlyingStreamCommoditySettlMonth,                                   41984) /*!< 41984 (int FIX.5.0SP2) Specifies a fixed single month for commodity delivery. */ \
X(UnderlyingStreamCommoditySettlDateRollPeriod,                          41985) /*!< 41985 (int FIX.5.0SP2) Time unit multiplier for the commodity delivery date roll.  */ \
X(UnderlyingStreamCommoditySettlDateRollUnit,                            41986) /*!< 41986 (String FIX.5.0SP2) Time unit associated with the commodity delivery date roll.*/ \
X(UnderlyingStreamCommoditySettlDayType,                                 41987) /*!< 41987 (int FIX.5.0SP2) Specifies the commodity delivery roll day type.*/ \
X(UnderlyingStreamCommodityXID,                                          41988) /*!< 41988 (XID FIX.5.0SP2) Identifier of this stream commodity for cross referencing elsewhere in the message.*/ \
X(UnderlyingStreamCommodityXIDRef,                                       41989) /*!< 41989 (XIDREF FIX.5.0SP2) Reference to a stream commodity elsewhere in the message.*/ \
X(NoUnderlyingStreamCommodityAltIDs,                                     41990) /*!< 41990 (NumInGroup FIX.5.0SP2) Number of alternate security identifers.*/ \
X(UnderlyingStreamCommodityAltID,                                        41991) /*!< 41991 (String FIX.5.0SP2) Alternate security identifier value for the commodity.*/ \
X(UnderlyingStreamCommodityAltIDSource,                                  41992) /*!< 41992 (String FIX.5.0SP2) Identifies the class or source of the alternate commodity security identifier.*/ \
X(NoUnderlyingStreamCommodityDataSources,                                41993) /*!< 41993 (NumInGroup FIX.5.0SP2) Number of commodity data sources in the repeating group.  */ \
X(UnderlyingStreamCommodityDataSourceID,                                 41994) /*!< 41994 (String FIX.5.0SP2) Data source identifier.*/ \
X(UnderlyingStreamCommodityDataSourceIDType,                             41995) /*!< 41995 (int FIX.5.0SP2) Specifies the type of data source identifier.*/ \
X(NoUnderlyingStreamCommoditySettlDays,                                  41996) /*!< 41996 (NumInGroup FIX.5.0SP2) Number of days in the repeating group.*/ \
X(UnderlyingStreamCommoditySettlDay,                                     41997) /*!< 41997 (int FIX.5.0SP2) Specifies the day or group of days for delivery.*/ \
X(UnderlyingStreamCommoditySettlTotalHours,                              41998) /*!< 41998 (int FIX.5.0SP2) Sum of the hours specified in UnderlyingStreamCommoditySettlTimeGrp.*/ \
X(NoUnderlyingStreamCommoditySettlTimes,                                 41999) /*!< 41999 (NumInGroup FIX.5.0SP2) Number of hour ranges in the repeating group.*/ \
X(UnderlyingStreamCommoditySettlStart,                                   42000) /*!< 42000 (String FIX.5.0SP2) The start time for commodity settlement where delivery occurs over time. The time format is specified by the settlement time type.*/ \
X(UnderlyingStreamCommoditySettlEnd,                                     42001) /*!< 42001 (String FIX.5.0SP2) The end time for commodity settlement where delivery occurs over time. The time format is specified by the settlement time type.*/ \
X(NoUnderlyingStreamCommoditySettlPeriods,                               42002) /*!< 42002 (NumInGroup FIX.5.0SP2) Number of commodity settlement periods in the repeating group.*/ \
X(UnderlyingStreamCommoditySettlCountry,                                 42003) /*!< 42003 (Country FIX.5.0SP2) Specifies the country where delivery takes place. Uses ISO 3166 2-character country code.*/ \
X(UnderlyingStreamCommoditySettlTimeZone,                                42004) /*!< 42004 (String FIX.5.0SP2) Commodity delivery timezone specified as "prevailing" rather than "standard" or "daylight".   \
 \
See http://www.fixtradingcommunity.org/codelists#Prevailing_Timezones for code list of applicable prevailing timezones.*/ \
X(UnderlyingStreamCommoditySettlFlowType,                                42005) /*!< 42005 (int FIX.5.0SP2) Specifies the commodity delivery flow type.*/ \
X(UnderlyingStreamCommoditySettlPeriodNotional,                          42006) /*!< 42006 (Qty FIX.5.0SP2) Specifies the delivery quantity associated with this settlement period.*/ \
X(UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure,             42007) /*!< 42007 (String FIX.5.0SP2) Specifies the unit of measure (UOM) of the delivery quantity associated with this settlement period.*/ \
X(UnderlyingStreamCommoditySettlPeriodFrequencyPeriod,                   42008) /*!< 42008 (int FIX.5.0SP2) Time unit multiplier for the settlement period frequency.*/ \
X(UnderlyingStreamCommoditySettlPeriodFrequencyUnit,                     42009) /*!< 42009 (String FIX.5.0SP2) Time unit associated with the settlement period frequency.*/ \
X(UnderlyingStreamCommoditySettlPeriodPrice,                             42010) /*!< 42010 (Price FIX.5.0SP2) The settlement period price.*/ \
X(UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure,                42011) /*!< 42011 (String FIX.5.0SP2) Specifies the settlement period price unit of measure (UOM).*/ \
X(UnderlyingStreamCommoditySettlPeriodPriceCurrency,                     42012) /*!< 42012 (Currency FIX.5.0SP2) The currency of the settlement period price.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingStreamCommoditySettlHolidaysProcessingInstruction,           42013) /*!< 42013 (int FIX.5.0SP2) Indicates whether holidays are included in the settlement periods. Required for electricity contracts.*/ \
X(UnderlyingStreamCommoditySettlPeriodXID,                               42014) /*!< 42014 (XID FIX.5.0SP2) Identifier of this settlement period for cross referencing elsewhere in the message.*/ \
X(UnderlyingStreamCommoditySettlPeriodXIDRef,                            42015) /*!< 42015 (XIDREF FIX.5.0SP2) Cross reference to another settlement period for duplicating its properties.*/ \
X(UnderlyingStreamXID,                                                   42016) /*!< 42016 (XID FIX.5.0SP2) Identifier of this UnderlyingStream for cross referencing elsewhere in the message.*/ \
X(UnderlyingAdditionalTermBondIssuer,                                    42017) /*!< 42017 (String FIX.5.0SP2) Issuer of the bond.*/ \
X(UnderlyingStreamNotionalXIDRef,                                        42018) /*!< 42018 (XIDREF FIX.5.0SP2) Cross reference to another UnderlyingStream notional for duplicating its properties.*/ \
X(UnderlyingStreamNotionalFrequencyPeriod,                               42019) /*!< 42019 (int FIX.5.0SP2) Time unit multiplier for the swap stream's notional frequency.*/ \
X(UnderlyingStreamNotionalFrequencyUnit,                                 42020) /*!< 42020 (String FIX.5.0SP2) Time unit associated with the swap stream's notional frequency.*/ \
X(UnderlyingStreamNotionalCommodityFrequency,                            42021) /*!< 42021 (int FIX.5.0SP2) The commodity's notional or quantity delivery frequency.*/ \
X(UnderlyingStreamNotionalUnitOfMeasure,                                 42022) /*!< 42022 (String FIX.5.0SP2) Specifies the delivery quantity unit of measure (UOM).*/ \
X(UnderlyingStreamTotalNotional,                                         42023) /*!< 42023 (Qty FIX.5.0SP2) Specifies the total notional or delivery quantity over the term of the contract.*/ \
X(UnderlyingStreamTotalNotionalUnitOfMeasure,                            42024) /*!< 42024 (String FIX.5.0SP2) Specifies the unit of measure (UOM) for the total notional or delivery quantity over the term of the contract.*/ \
X(EncodedUnderlyingAdditionalTermBondIssuerLen,                          42025) /*!< 42025 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingAdditionalTermBondIssuer(42026) field.*/ \
X(EncodedUnderlyingAdditionalTermBondIssuer,                             42026) /*!< 42026 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingAdditionalTermBondIssuer(42017) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingAdditionalTermBondIssuer(42017) field.*/ \
X(UnderlyingAdditionalTermBondSeniority,                                 42027) /*!< 42027 (String FIX.5.0SP2) Specifies the bond's payment priority in the event of a default. */ \
X(UnderlyingAdditionalTermBondCouponType,                                42028) /*!< 42028 (int FIX.5.0SP2) Coupon type of the bond.*/ \
X(UnderlyingAdditionalTermBondCouponRate,                                42029) /*!< 42029 (Percentage FIX.5.0SP2) Coupon rate of the bond.  See also CouponRate(223).*/ \
X(UnderlyingAdditionalTermBondMaturityDate,                              42030) /*!< 42030 (LocalMktDate FIX.5.0SP2) The maturity date of the bond.*/ \
X(UnderlyingAdditionalTermBondParValue,                                  42031) /*!< 42031 (Amt FIX.5.0SP2) The par value of the bond.*/ \
X(UnderlyingAdditionalTermBondCurrentTotalIssuedAmount,                  42032) /*!< 42032 (Amt FIX.5.0SP2) Total issued amount of the bond.*/ \
X(UnderlyingAdditionalTermBondCouponFrequencyPeriod,                     42033) /*!< 42033 (int FIX.5.0SP2) Time unit multiplier for the frequency of the bond's coupon payment.*/ \
X(UnderlyingAdditionalTermBondCouponFrequencyUnit,                       42034) /*!< 42034 (String FIX.5.0SP2) Time unit associated with the frequency of the bond's coupon payment.  */ \
X(UnderlyingAdditionalTermBondDayCount,                                  42035) /*!< 42035 (int FIX.5.0SP2) The day count convention used in interest calculations for a bond or an interest bearing security.*/ \
X(NoUnderlyingAdditionalTerms,                                           42036) /*!< 42036 (NumInGroup FIX.5.0SP2) Number of additional terms in the repeating group.*/ \
X(UnderlyingAdditionalTermConditionPrecedentBondIndicator,               42037) /*!< 42037 (Boolean FIX.5.0SP2) Indicates whether the condition precedent bond is applicable. The swap contract is only valid if the bond is issued and if there is any dispute over the terms of fixed stream then the bond terms would be used.*/ \
X(UnderlyingAdditionalTermDiscrepancyClauseIndicator,                    42038) /*!< 42038 (Boolean FIX.5.0SP2) Indicates whether the discrepancy clause is applicable.*/ \
X(NoUnderlyingCashSettlDealers,                                          42039) /*!< 42039 (NumInGroup FIX.5.0SP2) Number of dealers in the repeating group.*/ \
X(UnderlyingCashSettlDealer,                                             42040) /*!< 42040 (String FIX.5.0SP2) Identifies the dealer from whom price quotations for the reference obligation are obtained for the purpose of cash settlement valuation calculation.*/ \
X(NoUnderlyingCashSettlTerms,                                            42041) /*!< 42041 (NumInGroup FIX.5.0SP2) Number of elements in the repeating group.*/ \
X(UnderlyingCashSettlCurrency,                                           42042) /*!< 42042 (Currency FIX.5.0SP2) Specifies the currency the UnderlyingCashSettlAmount(42054) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingCashSettlValuationFirstBusinessDayOffset,                    42043) /*!< 42043 (int FIX.5.0SP2) The number of business days after settlement conditions have been satisfied, when the calculation agent is to obtain a price quotation on the reference obligation for purposes of cash settlement. */ \
X(UnderlyingCashSettlValuationSubsequentBusinessDaysOffset,              42044) /*!< 42044 (int FIX.5.0SP2) The number of business days between successive valuation dates when multiple valuation dates are applicable for cash settlement.*/ \
X(UnderlyingCashSettlNumOfValuationDates,                                42045) /*!< 42045 (int FIX.5.0SP2) Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies the number of applicable valuation dates.*/ \
X(UnderlyingCashSettlValuationTime,                                      42046) /*!< 42046 (LocalMktTime FIX.5.0SP2) Time of valuation.*/ \
X(UnderlyingCashSettlBusinessCenter,                                     42047) /*!< 42047 (String FIX.5.0SP2) Identifies the business center calendar  used at valuation time for cash settlement purposes e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingCashSettlQuoteMethod,                                        42048) /*!< 42048 (int FIX.5.0SP2) The type of quote used to determine the cash settlement price.*/ \
X(UnderlyingCashSettlQuoteAmount,                                        42049) /*!< 42049 (Amt FIX.5.0SP2) When determining the cash settlement amount, if weighted average price quotes are to be obtained for the reference obligation, this is the upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained.  If not specifed, the ISDA definitions provide for a fallback amount equal to floating rate payer calculation amount.*/ \
X(UnderlyingCashSettlQuoteCurrency,                                      42050) /*!< 42050 (Currency FIX.5.0SP2) Specifies the currency the UnderlyingCashSettlQuoteAmount(42049) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingCashSettlMinimumQuoteAmount,                                 42051) /*!< 42051 (Amt FIX.5.0SP2) When determining the cash settlement amount, if weighted average price quotes are to be obtained for the reference obligation, this is the minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained.  If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD1,000,000 (or its equivalent in the relevent obligation currency) or the (minimum) quoted amount.*/ \
X(UnderlyingCashSettlMinimumQuoteCurrency,                               42052) /*!< 42052 (Currency FIX.5.0SP2) Specifies the currency the UnderlyingCashSettlQuoteAmount(42049) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingCashSettlBusinessDays,                                       42053) /*!< 42053 (int FIX.5.0SP2) The number of business days used in the determination of the cash settlement payment date. */ \
X(UnderlyingCashSettlAmount,                                             42054) /*!< 42054 (Amt FIX.5.0SP2) The amount paid between the trade parties, seller to the buyer, for cash settlement on the cash settlement date.	*/ \
X(UnderlyingCashSettlRecoveryFactor,                                     42055) /*!< 42055 (float FIX.5.0SP2) Used for fixed recovery, this specifies the recovery level as determined at contract inception, to be applied in the event of a default.  The factor is used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date.  The amount is calculated is (1 - UnderlyingCashSettlRecoveryFactor(42055)) x floating rate payer calculation amount.  The currency is derived from the floating rate payer calculation amount.*/ \
X(UnderlyingCashSettlFixedTermIndicator,                                 42056) /*!< 42056 (Boolean FIX.5.0SP2) Indicates whether fixed settlement is applicable or not applicable in a recovery lock.*/ \
X(UnderlyingCashSettlAccruedInterestIndicator,                           42057) /*!< 42057 (Boolean FIX.5.0SP2) Indicates whether accrued interest is included or not in the value provided in UnderlyingCashSettlAmount(42054). \
 \
For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest.  \
 \
For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest.  \
 \
*/ \
X(UnderlyingCashSettlValuationMethod,                                    42058) /*!< 42058 (int FIX.5.0SP2) The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement. */ \
X(UnderlyingCashSettlTermXID,                                            42059) /*!< 42059 (XID FIX.5.0SP2) Name referenced from UnderlyingSettlementTermXIDRef(41315).*/ \
X(NoUnderlyingPhysicalSettlTerms,                                        42060) /*!< 42060 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(UnderlyingPhysicalSettlCurrency,                                       42061) /*!< 42061 (Currency FIX.5.0SP2) Currency of physical settlement.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPhysicalSettlBusinessDays,                                   42062) /*!< 42062 (int FIX.5.0SP2) A number of business days. Its precise meaning is dependent on the context in which this element is used. */ \
X(UnderlyingPhysicalSettlMaximumBusinessDays,                            42063) /*!< 42063 (int FIX.5.0SP2) A maximum number of business days. Its precise meaning is dependent on the context in which this element is used. Intended to be used to limit a particular ISDA fallback provision.*/ \
X(UnderlyingPhysicalSettlTermXID,                                        42064) /*!< 42064 (XID FIX.5.0SP2) A named string value referenced by UnderlyingSettlementTermXIDRef(41315).*/ \
X(NoUnderlyingPhysicalSettlDeliverableObligations,                       42065) /*!< 42065 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(UnderlyingPhysicalSettlDeliverableObligationType,                      42066) /*!< 42066 (String FIX.5.0SP2) Specifies the type of delivery obligation applicable for physical settlement.  \
 \
See http://www.fixtradingcommunity.org/codelists#Deliverable_Obligation_Types for code list for applicable deliverable obligation types.*/ \
X(UnderlyingPhysicalSettlDeliverableObligationValue,                     42067) /*!< 42067 (String FIX.5.0SP2) Physical settlement delivery obligation value appropriate to UnderlyingPhysicalSettlDeliverableObligationType(42066).  \
 \
See http://www.fixtradingcommunity.org/codelists#Deliverable_Obligation_Types for applicable obligation type values.*/ \
X(NoUnderlyingProtectionTerms,                                           42068) /*!< 42068 (NumInGroup FIX.5.0SP2) Number of protection terms in the repeating group.*/ \
X(UnderlyingProtectionTermNotional,                                      42069) /*!< 42069 (Amt FIX.5.0SP2) The notional amount of protection coverage for a floating rate. */ \
X(UnderlyingProtectionTermCurrency,                                      42070) /*!< 42070 (Currency FIX.5.0SP2) The currency of UnderlyingProtectionTermNotional(42069). Uses ISO 4217 currency codes.*/ \
X(UnderlyingProtectionTermSellerNotifies,                                42071) /*!< 42071 (Boolean FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. \
 \
UnderlyingProtectionTermSellerNotifies(42071)=Y indicates that the seller notifies. \
 \
*/ \
X(UnderlyingProtectionTermBuyerNotifies,                                 42072) /*!< 42072 (Boolean FIX.5.0SP2) The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. \
 \
UnderlyingProtectionTermBuyerNotifies(42072)=Y indicates that the buyer notifies.*/ \
X(UnderlyingProtectionTermEventBusinessCenter,                           42073) /*!< 42073 (String FIX.5.0SP2) When used, the business center indicates the local time of the business center that replaces the Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingProtectionTermStandardSources,                               42074) /*!< 42074 (Boolean FIX.5.0SP2) Indicates whether ISDA defined Standard Public Sources are applicable (UnderlyingProtectionTermStandardSources(42074)=Y) or not.*/ \
X(UnderlyingProtectionTermEventMinimumSources,                           42075) /*!< 42075 (int FIX.5.0SP2) The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two. */ \
X(UnderlyingProtectionTermXID,                                           42076) /*!< 42076 (XID FIX.5.0SP2) A named string value referenced by UnderlyingProtectionTermXIDRef(41314).*/ \
X(NoUnderlyingProtectionTermEvents,                                      42077) /*!< 42077 (NumInGroup FIX.5.0SP2) Number of protection term events in the repeating group.*/ \
X(UnderlyingProtectionTermEventType,                                     42078) /*!< 42078 (String FIX.5.0SP2) Specifies the type of credit event applicable to the protection terms.  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Event_Types for code list of applicable event types.*/ \
X(UnderlyingProtectionTermEventValue,                                    42079) /*!< 42079 (String FIX.5.0SP2) Protection term event value appropriate to UnderlyingProtectionTermEventType(42078).  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Event_Types for applicable event type values.*/ \
X(UnderlyingProtectionTermEventCurrency,                                 42080) /*!< 42080 (Currency FIX.5.0SP2) Applicable currency if UnderlyingProtectionTermEventValue(42079) is an amount. Uses ISO 4217 currency codes.*/ \
X(UnderlyingProtectionTermEventPeriod,                                   42081) /*!< 42081 (int FIX.5.0SP2) Time unit multiplier for protection term events.*/ \
X(UnderlyingProtectionTermEventUnit,                                     42082) /*!< 42082 (String FIX.5.0SP2) Time unit associated with protection term events.*/ \
X(UnderlyingProtectionTermEventDayType,                                  42083) /*!< 42083 (int FIX.5.0SP2) Day type for events that specify a period and unit.*/ \
X(UnderlyingProtectionTermEventRateSource,                               42084) /*!< 42084 (String FIX.5.0SP2) Rate source for events that specify a rate source, e.g. Floating rate interest shortfall.*/ \
X(NoUnderlyingProtectionTermEventQualifiers,                             42085) /*!< 42085 (NumInGroup FIX.5.0SP2) Number of qualifiers in the repeating group.*/ \
X(UnderlyingProtectionTermEventQualifier,                                42086) /*!< 42086 (char FIX.5.0SP2) Protection term event qualifier. Used to further qualify UnderlyingProtectionTermEventType(43078).*/ \
X(NoUnderlyingProtectionTermObligations,                                 42087) /*!< 42087 (NumInGroup FIX.5.0SP2) Number of obligations in the repeating group.*/ \
X(UnderlyingProtectionTermObligationType,                                42088) /*!< 42088 (String FIX.5.0SP2) Specifies the type of obligation applicable to the protection terms.  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Obligation_Types for code list of applicable obligation types.*/ \
X(UnderlyingProtectionTermObligationValue,                               42089) /*!< 42089 (String FIX.5.0SP2) Protection term obligation value appropriate to UnderlyingProtectionTermObligationType(42088).  \
 \
See http://www.fixtradingcommunity.org/codelists#Protection_Term_Obligation_Types for applicable obligation type values.*/ \
X(NoUnderlyingProtectionTermEventNewsSources,                            42090) /*!< 42090 (NumInGroup FIX.5.0SP2) Number of event news sources in the repeating group.*/ \
X(UnderlyingProtectionTermEventNewsSource,                               42091) /*!< 42091 (String FIX.5.0SP2) Newspaper or electronic news service or source that may publish relevant information used in the determination of whether or not a credit event has occurred.*/ \
X(UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention,          42092) /*!< 42092 (int FIX.5.0SP2) The business day convention used to adjust the provisional cash settlement payment's termination, or relative termination, date.  Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingProvisionCashSettlPaymentDateRelativeTo,                     42093) /*!< 42093 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingProvisionCashSettlPaymentDateOffsetPeriod,                   42094) /*!< 42094 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement payment date offset.*/ \
X(UnderlyingProvisionCashSettlPaymentDateOffsetUnit,                     42095) /*!< 42095 (String FIX.5.0SP2) Time unit associated with the relative cash settlement payment date offset.*/ \
X(UnderlyingProvisionCashSettlPaymentDateOffsetDayType,                  42096) /*!< 42096 (int FIX.5.0SP2) Specifies the day type of the provision's relative cash settlement payment date offset.*/ \
X(UnderlyingProvisionCashSettlPaymentDateRangeFirst,                     42097) /*!< 42097 (LocalMktDate FIX.5.0SP2) First date in range when a settlement date range is provided.*/ \
X(UnderlyingProvisionCashSettlPaymentDateRangeLast,                      42098) /*!< 42098 (LocalMktDate FIX.5.0SP2) Last date in range when a settlement date range is provided.*/ \
X(NoUnderlyingProvisionCashSettlPaymentDates,                            42099) /*!< 42099 (NumInGroup FIX.5.0SP2) Number of UnderlyingProvision cash settlement payment dates in the repeating group.*/ \
X(UnderlyingProvisionCashSettlPaymentDate,                               42100) /*!< 42100 (LocalMktDate FIX.5.0SP2) The cash settlement payment date, unadjusted or adjusted depending on UnderlyingProvisionCashSettlPaymentDateType(42101).*/ \
X(UnderlyingProvisionCashSettlPaymentDateType,                           42101) /*!< 42101 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(UnderlyingProvisionCashSettlQuoteSource,                               42102) /*!< 42102 (int FIX.5.0SP2) Identifies the source of quote information.*/ \
X(UnderlyingProvisionCashSettlQuoteReferencePage,                        42103) /*!< 42103 (String FIX.5.0SP2) Identifies the reference "page" from the quote source.*/ \
X(UnderlyingProvisionCashSettlValueTime,                                 42104) /*!< 42104 (LocalMktTime FIX.5.0SP2) A time specified in 24-hour format, e.g. 11am would be represented as 11:00:00. The time of the cash settlement valuation date when the cash settlement amount will be determined according to the cash settlement method if the parties have not otherwise been able to agree to the cash settlement amount.*/ \
X(UnderlyingProvisionCashSettlValueTimeBusinessCenter,                   42105) /*!< 42105 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's cash settlement valuation time. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingProvisionCashSettlValueDateBusinessDayConvention,            42106) /*!< 42106 (int FIX.5.0SP2) The business day convention used to adjust the cash settlement valuation date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingProvisionCashSettlValueDateRelativeTo,                       42107) /*!< 42107 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement value date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingProvisionCashSettlValueDateOffsetPeriod,                     42108) /*!< 42108 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement value date offset.*/ \
X(UnderlyingProvisionCashSettlValueDateOffsetUnit,                       42109) /*!< 42109 (String FIX.5.0SP2) Time unit associated with the relative cash settlement value date offset.*/ \
X(UnderlyingProvisionCashSettlValueDateOffsetDayType,                    42110) /*!< 42110 (int FIX.5.0SP2) Specifies the day type of the provision's relative cash settlement value date offset.*/ \
X(UnderlyingProvisionCashSettlValueDateAdjusted,                         42111) /*!< 42111 (LocalMktDate FIX.5.0SP2) The adjusted cash settlement value date.*/ \
X(NoUnderlyingProvisionOptionExerciseFixedDates,                         42112) /*!< 42112 (NumInGroup FIX.5.0SP2) Number of UnderlyingProvision option exercise fixed dates in the repeating group.*/ \
X(UnderlyingProvisionOptionExerciseFixedDate,                            42113) /*!< 42113 (LocalMktDate FIX.5.0SP2) A predetermined option exercise date, unadjusted or adjusted depending on UnderlyingProvisionOptionExerciseFixedDateType(42114).*/ \
X(UnderlyingProvisionOptionExerciseFixedDateType,                        42114) /*!< 42114 (int FIX.5.0SP2) Specifies the type of date (e.g. adjusted for holidays).*/ \
X(UnderlyingProvisionOptionExerciseBusinessDayConvention,                42115) /*!< 42115 (int FIX.5.0SP2) The business day convention used to adjust the underlying instrument's provision's option exercise date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod,             42116) /*!< 42116 (int FIX.5.0SP2) Time unit multiplier for  the interval to the first (and possibly only) exercise date in the exercise period.*/ \
X(UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit,               42117) /*!< 42117 (String FIX.5.0SP2) Time unit associated with the interval to the first (and possibly only) exercise date in the exercise period.*/ \
X(UnderlyingProvisionOptionExerciseFrequencyPeriod,                      42118) /*!< 42118 (int FIX.5.0SP2) Time unit multiplier for the frequency of subsequent exercise dates in the exercise period following the earliest exercise date. An interval of 1 day should be used to indicate an American style exercise frequency.*/ \
X(UnderlyingProvisionOptionExerciseFrequencyUnit,                        42119) /*!< 42119 (String FIX.5.0SP2) Time unit associated with the frequency of subsequent exercise dates in the exercise period following the earliest exercise date.*/ \
X(UnderlyingProvisionOptionExerciseStartDateUnadjusted,                  42120) /*!< 42120 (LocalMktDate FIX.5.0SP2) The unadjusted first day of the exercise period for an American style option.*/ \
X(UnderlyingProvisionOptionExerciseStartDateRelativeTo,                  42121) /*!< 42121 (int FIX.5.0SP2) Specifies the anchor date when the option exercise start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingProvisionOptionExerciseStartDateOffsetPeriod,                42122) /*!< 42122 (int FIX.5.0SP2) Time unit multiplier for the relative option exercise start date offset.*/ \
X(UnderlyingProvisionOptionExerciseStartDateOffsetUnit,                  42123) /*!< 42123 (String FIX.5.0SP2) Time unit associated with the relative option exercise start date offset.*/ \
X(UnderlyingProvisionOptionExerciseStartDateOffsetDayType,               42124) /*!< 42124 (int FIX.5.0SP2) Specifies the day type of the provision's relative option exercise start date offset.*/ \
X(UnderlyingProvisionOptionExerciseStartDateAdjusted,                    42125) /*!< 42125 (LocalMktDate FIX.5.0SP2) The adjusted first day of the exercise period for an American style option.*/ \
X(UnderlyingProvisionOptionExercisePeriodSkip,                           42126) /*!< 42126 (int FIX.5.0SP2) The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.*/ \
X(UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted,            42127) /*!< 42127 (LocalMktDate FIX.5.0SP2) The unadjusted first date of a schedule. This can be used to restrict the range of exercise dates when they are relative.*/ \
X(UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted,             42128) /*!< 42128 (LocalMktDate FIX.5.0SP2) The unadjusted last date of a schedule. This can be used to restrict the range of exercise dates when they are relative.*/ \
X(UnderlyingProvisionOptionExerciseEarliestTime,                         42129) /*!< 42129 (LocalMktTime FIX.5.0SP2) The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date, in the case of an American option.*/ \
X(UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter,           42130) /*!< 42130 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's earliest time for notice of exercise.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingProvisionOptionExerciseLatestTime,                           42131) /*!< 42131 (LocalMktTime FIX.5.0SP2) For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller's agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.*/ \
X(UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter,             42132) /*!< 42132 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's latest time for notice of exercise. \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingProvisionOptionExpirationDateUnadjusted,                     42133) /*!< 42133 (LocalMktDate FIX.5.0SP2) The unadjusted last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.*/ \
X(UnderlyingProvisionOptionExpirationDateBusinessDayConvention,          42134) /*!< 42134 (int FIX.5.0SP2) The business day convention used to adjust the underlying instrument's provision's option expiration date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingProvisionOptionExpirationDateRelativeTo,                     42135) /*!< 42135 (int FIX.5.0SP2) Specifies the anchor date when the option expiration date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingProvisionOptionExpirationDateOffsetPeriod,                   42136) /*!< 42136 (int FIX.5.0SP2) Time unit multiplier for the relative option expiration date offset.*/ \
X(UnderlyingProvisionOptionExpirationDateOffsetUnit,                     42137) /*!< 42137 (String FIX.5.0SP2) Time unit associated with the relative option expiration date offset.*/ \
X(UnderlyingProvisionOptionExpirationDateOffsetDayType,                  42138) /*!< 42138 (int FIX.5.0SP2) Specifies the day type of the provision's relative option expiration date offset.*/ \
X(UnderlyingProvisionOptionExpirationDateAdjusted,                       42139) /*!< 42139 (LocalMktDate FIX.5.0SP2) The adjusted last date within an exercise period for an American style option. For a European style option it is the only date within the exercise period.*/ \
X(UnderlyingProvisionOptionExpirationTime,                               42140) /*!< 42140 (LocalMktTime FIX.5.0SP2) The latest time for exercise on the expiration date.*/ \
X(UnderlyingProvisionOptionExpirationTimeBusinessCenter,                 42141) /*!< 42141 (String FIX.5.0SP2) Identifies the business center calendar used with the provision's latest exercise time on expiration date.  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted,             42142) /*!< 42142 (LocalMktDate FIX.5.0SP2) The unadjusted date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention,  42143) /*!< 42143 (int FIX.5.0SP2) The business day convnetion used to adjust the underlying instrument provision's option underlying date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo,             42144) /*!< 42144 (int FIX.5.0SP2) Specifies the anchor date when the date relevant to the underlying trade on exercise is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod,           42145) /*!< 42145 (int FIX.5.0SP2) Time unit multiplier for the relative option relevant underlying date offset.*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit,             42146) /*!< 42146 (String FIX.5.0SP2) Time unit associated with the relative option relevant underlying date offset.*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType,          42147) /*!< 42147 (int FIX.5.0SP2) Specifies the day type of the provision's relative option relevant underlying date offset.*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted,               42148) /*!< 42148 (LocalMktDate FIX.5.0SP2) The adjusted date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).*/ \
X(NoUnderlyingProvisions,                                                42149) /*!< 42149 (NumInGroup FIX.5.0SP2) Number of provisions in the repeating group.*/ \
X(UnderlyingProvisionType,                                               42150) /*!< 42150 (int FIX.5.0SP2) Type of provision.*/ \
X(UnderlyingProvisionDateUnadjusted,                                     42151) /*!< 42151 (LocalMktDate FIX.5.0SP2) The unadjusted date of the provision.*/ \
X(UnderlyingProvisionDateBusinessDayConvention,                          42152) /*!< 42152 (int FIX.5.0SP2) The business day convention used to adjust the underlying instrument's provision's date. Used only to override the business day convention specified in the UnderlyingDateAdjustment component within the UnderlyingInstrument component.*/ \
X(UnderlyingProvisionDateAdjusted,                                       42153) /*!< 42153 (LocalMktDate FIX.5.0SP2) The adjusted date of the provision.*/ \
X(UnderlyingProvisionDateTenorPeriod,                                    42154) /*!< 42154 (int FIX.5.0SP2) Time unit multiplier for the provision's tenor period.*/ \
X(UnderlyingProvisionDateTenorUnit,                                      42155) /*!< 42155 (String FIX.5.0SP2) Time unit associated with the provision's tenor period.*/ \
X(UnderlyingProvisionCalculationAgent,                                   42156) /*!< 42156 (int FIX.5.0SP2) Used to identify the calculation agent.  The calculation agent may be identified in UnderlyingProvisionCalculationAgent(42156) or in the underlying provision parties component.*/ \
X(UnderlyingProvisionOptionSinglePartyBuyerSide,                         42157) /*!< 42157 (int FIX.5.0SP2) If optional early termination is not available to both parties then this component identifies the buyer of the option through its side of the trade.*/ \
X(UnderlyingProvisionOptionSinglePartySellerSide,                        42158) /*!< 42158 (int FIX.5.0SP2) If optional early termination is not available to both parties then this component identifies the seller of the option through its side of the trade.*/ \
X(UnderlyingProvisionOptionExerciseStyle,                                42159) /*!< 42159 (int FIX.5.0SP2) The instrument provision's exercise style.*/ \
X(UnderlyingProvisionOptionExerciseMultipleNotional,                     42160) /*!< 42160 (Amt FIX.5.0SP2) A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.*/ \
X(UnderlyingProvisionOptionExerciseMinimumNotional,                      42161) /*!< 42161 (Amt FIX.5.0SP2) The minimum notional amount that can be exercised on a given exercise date.*/ \
X(UnderlyingProvisionOptionExerciseMaximumNotional,                      42162) /*!< 42162 (Amt FIX.5.0SP2) The maximum notional amount that can be exercised on a given exercise date.*/ \
X(UnderlyingProvisionOptionMinimumNumber,                                42163) /*!< 42163 (int FIX.5.0SP2) The minimum number of options that can be exercised on a given exercise date.*/ \
X(UnderlyingProvisionOptionMaximumNumber,                                42164) /*!< 42164 (int FIX.5.0SP2) The maximum number of options that can be exercised on a given exercise date. If the number is not specified, it means that the maximum number of options corresponds to the remaining unexercised options.*/ \
X(UnderlyingProvisionOptionExerciseConfirmation,                         42165) /*!< 42165 (Boolean FIX.5.0SP2) Used to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.*/ \
X(UnderlyingProvisionCashSettlMethod,                                    42166) /*!< 42166 (int FIX.5.0SP2) 	An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (e).*/ \
X(UnderlyingProvisionCashSettlCurrency,                                  42167) /*!< 42167 (Currency FIX.5.0SP2) Specifies the currency of settlement. Uses ISO 4217 currency codes.*/ \
X(UnderlyingProvisionCashSettlCurrency2,                                 42168) /*!< 42168 (Currency FIX.5.0SP2) Specifies the currency of settlement for a cross-currency provision.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingProvisionCashSettlQuoteType,                                 42169) /*!< 42169 (int FIX.5.0SP2) Identifies the type of quote to be used.*/ \
X(UnderlyingProvisionText,                                               42170) /*!< 42170 (String FIX.5.0SP2) Free form text to specify additional information or enumeration description when a standard value does not apply.*/ \
X(EncodedUnderlyingProvisionTextLen,                                     42171) /*!< 42171 (Length FIX.5.0SP2) Byte length of encoded (non-ASCII characters) EncodedUnderlyingProvisionText(42712) field.*/ \
X(EncodedUnderlyingProvisionText,                                        42172) /*!< 42172 (data FIX.5.0SP2) Encoded (non-ASCII characters) representation of the UnderlyingProvisionText(42170) field in the encoded format specified via the MessageEncoding (347) field. If used, the ASCII (English) representation should also be specified in the UnderlyingProvisionText(42170) field.*/ \
X(NoUnderlyingProvisionPartyIDs,                                         42173) /*!< 42173 (NumInGroup FIX.5.0SP2) Number of parties identified in the contract provision.*/ \
X(UnderlyingProvisionPartyID,                                            42174) /*!< 42174 (String FIX.5.0SP2) The party identifier for the payment settlement party. */ \
X(UnderlyingProvisionPartyIDSource,                                      42175) /*!< 42175 (char FIX.5.0SP2) Identifies the class or source of the UnderlyingProvisionPartyID(42174) value. */ \
X(UnderlyingProvisionPartyRole,                                          42176) /*!< 42176 (int FIX.5.0SP2) Identifies the type or role of UnderlyingProvisionPartyID(42174) specified.*/ \
X(NoUnderlyingProvisionPartySubIDs,                                      42177) /*!< 42177 (NumInGroup FIX.5.0SP2) Number of sub-party IDs to be reported for the party.*/ \
X(UnderlyingProvisionPartySubID,                                         42178) /*!< 42178 (String FIX.5.0SP2) Underlying provision party sub-identifier, if applicable for UnderlyingProvisionPartyID(42174). */ \
X(UnderlyingProvisionPartySubIDType,                                     42179) /*!< 42179 (int FIX.5.0SP2) The type of UnderlyingProvisionPartySubID(42178).*/ \
X(NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters,              42180) /*!< 42180 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingProvisionCashSettlPaymentDateBusinessCenter,                 42181) /*!< 42181 (String FIX.5.0SP2) The business center calendar used to adjust the provision's cash settlement payment's termination, or relative termination, date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingProvisionCashSettlValueDateBusinessCenters,                42182) /*!< 42182 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingProvisionCashSettlValueDateBusinessCenter,                   42183) /*!< 42183 (String FIX.5.0SP2) The business center calendar used to adjust the cash settlement valuation date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingProvisionOptionExerciseBusinessCenters,                    42184) /*!< 42184 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingProvisionOptionExerciseBusinessCenter,                       42185) /*!< 42185 (String FIX.5.0SP2) The business center calendar used to adjust the underlying instrument's provision's option exercise date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingProvisionOptionExpirationDateBusinessCenters,              42186) /*!< 42186 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingProvisionOptionExpirationDateBusinessCenter,                 42187) /*!< 42187 (String FIX.5.0SP2) The business center calendar used to adjust the underlying instrument's provision's option expiration date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters,      42188) /*!< 42188 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter,         42189) /*!< 42189 (String FIX.5.0SP2) The business center calendar used to adjust the underlying instrument's provision's option underlying date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingProvisionDateBusinessCenters,                              42190) /*!< 42190 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingProvisionDateBusinessCenter,                                 42191) /*!< 42191 (String FIX.5.0SP2) The business center calendar used to adjust the underlying instrument's provision's date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(DeliveryStreamDeliveryPointSource,                                     42192) /*!< 42192 (int FIX.5.0SP2) Identifies the class or source of DeliveryStreamDeliveryPoint(41062).*/ \
X(DeliveryStreamDeliveryPointDesc,                                       42193) /*!< 42193 (String FIX.5.0SP2) Description of the delivery point identified in DeliveryStreamDeliveryPoint(41062).*/ \
X(LegDeliveryStreamDeliveryPointSource,                                  42194) /*!< 42194 (int FIX.5.0SP2) Identifies the class or source of LegDeliveryStreamDeliveryPoint(41433).*/ \
X(LegDeliveryStreamDeliveryPointDesc,                                    42195) /*!< 42195 (String FIX.5.0SP2) Description of the delivery point identified in LegDeliveryStreamDeliveryPoint(41433).*/ \
X(UnderlyingDeliveryStreamDeliveryPointSource,                           42196) /*!< 42196 (int FIX.5.0SP2) Identifies the class or source of UnderlyingDeliveryStreamDeliveryPoint(41781).*/ \
X(UnderlyingDeliveryStreamDeliveryPointDesc,                             42197) /*!< 42197 (String FIX.5.0SP2) Description of the delivery point identified in UnderlyingDeliveryStreamDeliveryPoint(41781).*/ \
X(NoLegContractualDefinitions,                                           42198) /*!< 42198 (NumInGroup FIX.5.0SP2) Number of financing definitions in the repeating group.*/ \
X(LegContractualDefinition,                                              42199) /*!< 42199 (String FIX.5.0SP2) Specifies which contract definition, such as those published by ISDA, will apply for the terms of the trade. See http://www.fpml.org/coding-scheme/contractual-definitions for values.*/ \
X(NoLegFinancingTermSupplements,                                         42200) /*!< 42200 (NumInGroup FIX.5.0SP2) Number of financing terms supplements in the repeating group.*/ \
X(LegFinancingTermSupplementDesc,                                        42201) /*!< 42201 (String FIX.5.0SP2) Identifies the applicable contractual supplement. See http://www.fpml.org/coding-scheme/contractual-supplement for values.*/ \
X(LegFinancingTermSupplementDate,                                        42202) /*!< 42202 (LocalMktDate FIX.5.0SP2) Specifies the publication date of the applicable version of the contractual supplement.*/ \
X(NoLegContractualMatrices,                                              42203) /*!< 42203 (NumInGroup FIX.5.0SP2) Number of contractual matrices in the repeating group.*/ \
X(LegContractualMatrixSource,                                            42204) /*!< 42204 (String FIX.5.0SP2) Identifies the applicable contract matrix. See http://www.fpml.org/coding-scheme/matrix-type-1-0.xml for values.*/ \
X(LegContractualMatrixDate,                                              42205) /*!< 42205 (LocalMktDate FIX.5.0SP2) Specifies the publication date of the applicable version of the contract matrix. If not specified, the ISDA Standard Terms Supplement defines rules for which version of the matrix is applicable.*/ \
X(LegContractualMatrixTerm,                                              42206) /*!< 42206 (String FIX.5.0SP2) Specifies the applicable key into the relevent contract matrix. In the case of 2000 ISDA Definitions Settlement Matrix for Early Termination and Swaptions, the LegContractualMatrixTerm(42206) is not applicable and is to be omitted. See http://www.fpml.org/coding-scheme/credit-matrix-transaction-type for values.*/ \
X(CashSettlDateUnadjusted,                                               42207) /*!< 42207 (LocalMktDate FIX.5.0SP2) The unadjusted cash settlement date.*/ \
X(CashSettlDateBusinessDayConvention,                                    42208) /*!< 42208 (int FIX.5.0SP2) The business day convention used to adjust the cash settlement provision's date. Used only to override the business day convention defined in the Instrument component.*/ \
X(CashSettlDateRelativeTo,                                               42209) /*!< 42209 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(CashSettlDateOffsetPeriod,                                             42210) /*!< 42210 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement date offset.*/ \
X(CashSettlDateOffsetUnit,                                               42211) /*!< 42211 (String FIX.5.0SP2) Time unit associated with the relative cash settlement date offset.*/ \
X(CashSettlDateOffsetDayType,                                            42212) /*!< 42212 (int FIX.5.0SP2) Specifies the day type of the relative cash settlement date offset.*/ \
X(CashSettlDateAdjusted,                                                 42213) /*!< 42213 (LocalMktDate FIX.5.0SP2) The adjusted cash settlement date.*/ \
X(NoCashSettlDateBusinessCenters,                                        42214) /*!< 42214 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(CashSettlDateBusinessCenter,                                           42215) /*!< 42215 (String FIX.5.0SP2) The business center calendar used for date adjustment of the cash settlement unadjusted or relative date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(CashSettlPriceSource,                                                  42216) /*!< 42216 (String FIX.5.0SP2) The source from which the settlement price is to be obtained. \
 \
See http://www.fpml.org/coding-scheme/settlement-price-source for values.*/ \
X(CashSettlPriceDefault,                                                 42217) /*!< 42217 (int FIX.5.0SP2) The default election for determining settlement price.*/ \
X(DividendFloatingRateIndex,                                             42218) /*!< 42218 (String FIX.5.0SP2) The dividend accrual floating rate index.*/ \
X(DividendFloatingRateIndexCurvePeriod,                                  42219) /*!< 42219 (int FIX.5.0SP2) Time unit multiplier for the dividend accrual floating rate index curve.*/ \
X(DividendFloatingRateIndexCurveUnit,                                    42220) /*!< 42220 (String FIX.5.0SP2) Time unit associated with the dividend accrual floating rate index curve period. \
 \
*/ \
X(DividendFloatingRateMultiplier,                                        42221) /*!< 42221 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This should only be included if the multiplier is not equal to 1 (one) for the term of the contract.*/ \
X(DividendFloatingRateSpread,                                            42222) /*!< 42222 (PriceOffset FIX.5.0SP2) The basis points spread from the index specified in DividendFloatingRateIndex(42218).*/ \
X(DividendFloatingRateSpreadPositionType,                                42223) /*!< 42223 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(DividendFloatingRateTreatment,                                         42224) /*!< 42224 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(DividendCapRate,                                                       42225) /*!< 42225 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. It is only required where the floating rate is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as "0.05".*/ \
X(DividendCapRateBuySide,                                                42226) /*!< 42226 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(DividendCapRateSellSide,                                               42227) /*!< 42227 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(DividendFloorRate,                                                     42228) /*!< 42228 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate. The rate is expressed as a decimal, e.g. 5% is represented as "0.05".*/ \
X(DividendFloorRateBuySide,                                              42229) /*!< 42229 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(DividendFloorRateSellSide,                                             42230) /*!< 42230 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(DividendInitialRate,                                                   42231) /*!< 42231 (Percentage FIX.5.0SP2) The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. The initial rate is expressed in decimal form, e.g. 5% is represented as "0.05".*/ \
X(DividendFinalRateRoundingDirection,                                    42232) /*!< 42232 (char FIX.5.0SP2) Specifies the rounding direction of the final rate.*/ \
X(DividendFinalRatePrecision,                                            42233) /*!< 42233 (int FIX.5.0SP2) Specifies the rounding precision of the final rate in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(DividendAveragingMethod,                                               42234) /*!< 42234 (int FIX.5.0SP2) When averaging is applicable, used to specify whether a weighted or unweighted average method of calculation is to be used. */ \
X(DividendNegativeRateTreatment,                                         42235) /*!< 42235 (int FIX.5.0SP2) The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(NoDividendAccrualPaymentDateBusinessCenters,                           42236) /*!< 42236 (NumInGroup FIX.5.0SP2) Number of entries in the DividendAccrualPaymentDateBusinessCenterGrp.*/ \
X(DividendAccrualPaymentDateBusinessCenter,                              42237) /*!< 42237 (String FIX.5.0SP2) The business center calendar used for date adjustment of the  instrument's dividend accrual payment date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(DividendAccrualPaymentDateRelativeTo,                                  42238) /*!< 42238 (int FIX.5.0SP2) Specifies the anchor date when the accrual payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(DividendAccrualPaymentDateOffsetPeriod,                                42239) /*!< 42239 (int FIX.5.0SP2) Time unit multiplier for the relative accrual payment date offset.*/ \
X(DividendAccrualPaymentDateOffsetUnit,                                  42240) /*!< 42240 (String FIX.5.0SP2) Time unit associated with the relative accrual payment date offset.*/ \
X(DividendAccrualPaymentDateOffsetDayType,                               42241) /*!< 42241 (int FIX.5.0SP2) Specifies the day type of the relative accrual payment date offset.*/ \
X(DividendAccrualPaymentDateUnadjusted,                                  42242) /*!< 42242 (LocalMktDate FIX.5.0SP2) The unadjusted accrual payment date.*/ \
X(DividendAccrualPaymeentDateBusinessDayConvention,                      42243) /*!< 42243 (int FIX.5.0SP2) Accrual payment date adjustment business day convention.*/ \
X(DividendAccrualPaymentDateAdjusted,                                    42244) /*!< 42244 (LocalMktDate FIX.5.0SP2) The adjusted accrual payment date.*/ \
X(DividendReinvestmentIndicator,                                         42245) /*!< 42245 (Boolean FIX.5.0SP2) Indicates whether the dividend will be reinvested.*/ \
X(DividendEntitlementEvent,                                              42246) /*!< 42246 (int FIX.5.0SP2) Defines the contract event which the receiver of the derivative is entitled to the dividend.*/ \
X(DividendAmountType,                                                    42247) /*!< 42247 (int FIX.5.0SP2) Indicates how the gross cash dividend amount per share is determined.*/ \
X(DividendUnderlierRefID,                                                42248) /*!< 42248 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(ExtraordinaryDividendPartySide,                                        42249) /*!< 42249 (int FIX.5.0SP2) Reference to the party through its side in the trade who makes the determination whether dividends are extraordinary in relation to normal levels.*/ \
X(ExtraordinaryDividendAmountType,                                       42250) /*!< 42250 (int FIX.5.0SP2) Indicates how the extraordinary gross cash dividend per share is determined.*/ \
X(ExtraordinaryDividendCurrency,                                         42251) /*!< 42251 (Currency FIX.5.0SP2) The currency in which the excess dividend is denominated. Uses ISO 4217 currency codes.*/ \
X(ExtraordinaryDividendDeterminationMethod,                              42252) /*!< 42252 (String FIX.5.0SP2) Specifies the method in which the excess amount is determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(DividendAccrualFixedRate,                                              42253) /*!< 42253 (Percentage FIX.5.0SP2) The dividend accrual fixed rate per annum expressed as a decimal.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(DividendCompoundingMethod,                                             42254) /*!< 42254 (int FIX.5.0SP2) The compounding method to be used when more than one dividend period contributes to a single payment.*/ \
X(DividendNumOfIndexUnits,                                               42255) /*!< 42255 (int FIX.5.0SP2) The number of index units applicable to dividends.*/ \
X(DividendCashPercentage,                                                42256) /*!< 42256 (Percentage FIX.5.0SP2) Declared cash dividend percentage.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(DividendCashEquivalentPercentage,                                      42257) /*!< 42257 (Percentage FIX.5.0SP2) Declared cash-equivalent dividend percentage.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(NonCashDividendTreatment,                                              42258) /*!< 42258 (int FIX.5.0SP2) Defines the treatment of non-cash dividends.*/ \
X(DividendComposition,                                                   42259) /*!< 42259 (int FIX.5.0SP2) Defines how the composition of dividends is to be determined.*/ \
X(SpecialDividendsIndicator,                                             42260) /*!< 42260 (Boolean FIX.5.0SP2) Indicates whether special dividends are applicable.*/ \
X(MaterialDividendsIndicator,                                            42261) /*!< 42261 (Boolean FIX.5.0SP2) Indicates whether material non-cash dividends are applicable.*/ \
X(OptionsExchangeDividendsIndicator,                                     42262) /*!< 42262 (Boolean FIX.5.0SP2) Indicates whether option exchange dividends are applicable.*/ \
X(AdditionalDividendsIndicator,                                          42263) /*!< 42263 (Boolean FIX.5.0SP2) Indicates whether additional dividends are applicable.*/ \
X(AllDividendsIndicator,                                                 42264) /*!< 42264 (Boolean FIX.5.0SP2) Represents the European Master Confirmation value of 'All Dividends' which, when applicable, signifies that, for a given Ex-Date, the daily observed share price for that day is adjusted (reduced) by the cash dividend and/or the cash value of any non-cash dividend per share (including extraordinary dividends) declared by the issuer.*/ \
X(DividendFXTriggerDateRelativeTo,                                       42265) /*!< 42265 (int FIX.5.0SP2) Specifies the anchor date when the FX trigger date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(DividendFXTriggerDateOffsetPeriod,                                     42266) /*!< 42266 (int FIX.5.0SP2) Time unit multiplier for the relative FX trigger date offset.*/ \
X(DividendFXTriggerDateOffsetUnit,                                       42267) /*!< 42267 (String FIX.5.0SP2) Time unit associated with the relative FX trigger date offset.*/ \
X(DividendFXTriggerDateOffsetDayType,                                    42268) /*!< 42268 (int FIX.5.0SP2) Specifies the day type of the relative FX trigger date offset.*/ \
X(DividendFXTriggerDateUnadjusted,                                       42269) /*!< 42269 (LocalMktDate FIX.5.0SP2) The unadjusted FX trigger date.*/ \
X(DividendFXTriggerDateBusinessDayConvention,                            42270) /*!< 42270 (int FIX.5.0SP2) The business day convention used for the FX trigger date adjustment.*/ \
X(DividendFXTriggerDateAdjusted,                                         42271) /*!< 42271 (LocalMktDate FIX.5.0SP2) The adjusted FX trigger date.*/ \
X(NoDividendFXTriggerDateBusinessCenters,                                42272) /*!< 42272 (NumInGroup FIX.5.0SP2) Number of entries in the DividendFXTriggerDateBusinessCenterGrp.*/ \
X(DividendFXTriggerDateBusinessCenter,                                   42273) /*!< 42273 (String FIX.5.0SP2) The business center calendar used for date adjustment of the  instrument's FX trigger date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoDividendPeriods,                                                     42274) /*!< 42274 (NumInGroup FIX.5.0SP2) Number of entries in the DividendPeriodGrp component.*/ \
X(DividendPeriodSequence,                                                42275) /*!< 42275 (int FIX.5.0SP2) Defines the ordinal dividend period. E.g. 1 = First period, 2 = Second period, etc.*/ \
X(DividendPeriodStartDateUnadjusted,                                     42276) /*!< 42276 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the dividend period will begin.*/ \
X(DividendPeriodEndDateUnadjusted,                                       42277) /*!< 42277 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the dividend period will end.*/ \
X(DividendPeriodUnderlierRefID,                                          42278) /*!< 42278 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(DividendPeriodStrikePrice,                                             42279) /*!< 42279 (Price FIX.5.0SP2) Specifies the fixed strike price of the dividend period.*/ \
X(DividendPeriodBusinessDayConvention,                                   42280) /*!< 42280 (int FIX.5.0SP2) The dividend period dates business day convention.*/ \
X(DividendPeriodValuationDateUnadjusted,                                 42281) /*!< 42281 (LocalMktDate FIX.5.0SP2) The unadjusted dividend period valuation date.*/ \
X(DividendPeriodValuationDateRelativeTo,                                 42282) /*!< 42282 (int FIX.5.0SP2) Specifies the anchor date when the dividend period valuation date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(DividendPeriodValuationDateOffsetPeriod,                               42283) /*!< 42283 (int FIX.5.0SP2) Time unit multiplier for the relative dividend period valuation date offset.*/ \
X(DividendPeriodValuationDateOffsetUnit,                                 42284) /*!< 42284 (String FIX.5.0SP2) Time unit associated with the relative dividend period valuation date offset.*/ \
X(DividendPeriodValuationDateOffsetDayType,                              42285) /*!< 42285 (int FIX.5.0SP2) Specifies the day type of the relative dividend period valuation date offset.*/ \
X(DividendPeriodValuationDateAdjusted,                                   42286) /*!< 42286 (LocalMktDate FIX.5.0SP2) The adjusted dividend period valuation date.*/ \
X(DividendPeriodPaymentDateUnadjusted,                                   42287) /*!< 42287 (LocalMktDate FIX.5.0SP2) The unadjusted dividend period payment date.*/ \
X(DividendPeriodPaymentDateRelativeTo,                                   42288) /*!< 42288 (int FIX.5.0SP2) Specifies the anchor date when the dividend period payment date is relative to an anchor date.   \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(DividendPeriodPaymentDateOffsetPeriod,                                 42289) /*!< 42289 (int FIX.5.0SP2) Time unit multiplier for the relative dividend period payment date offset.*/ \
X(DividendPeriodPaymentDateOffsetUnit,                                   42290) /*!< 42290 (String FIX.5.0SP2) Time unit associated with the relative dividend period payment date offset.*/ \
X(DividendPeriodPaymentDateOffsetDayType,                                42291) /*!< 42291 (int FIX.5.0SP2) Specifies the day type of the relative dividend period payment date offset.*/ \
X(DividendPeriodPaymentDateAdjusted,                                     42292) /*!< 42292 (LocalMktDate FIX.5.0SP2) The adjusted dividend period payment date.*/ \
X(DividendPeriodXID,                                                     42293) /*!< 42293 (XID FIX.5.0SP2) Identifier for linking this stream dividend period to an underlier through an instance of RelatedInstrumentGrp.*/ \
X(NoDividendPeriodBusinessCenters,                                       42294) /*!< 42294 (NumInGroup FIX.5.0SP2) Number of entries in the DividendPeriodBusinessCenterGrp.*/ \
X(DividendPeriodBusinessCenter,                                          42295) /*!< 42295 (String FIX.5.0SP2) The business center calendar used for date adjustment of the instrument's dividend period date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoExtraordinaryEvents,                                                 42296) /*!< 42296 (NumInGroup FIX.5.0SP2) Number of extraordinary events in the repeating group.*/ \
X(ExtraordinaryEventType,                                                42297) /*!< 42297 (String FIX.5.0SP2) Identifies the type of extraordinary or disruptive event applicable to the reference entity. \
 \
See http://www.fixtradingcommunity.org/codelists#Extraordinary_Event_Type for code list of extraordinary event types and values.*/ \
X(ExtraordinaryEventValue,                                               42298) /*!< 42298 (String FIX.5.0SP2) The extraordinary or disruptive event value appropriate to ExtraordinaryEventType(42297).  \
 \
See http://www.fixtradingcommunity.org/codelists#Extraordinary_Event_Type for code list of extraordinary event types and values.*/ \
X(LegCashSettlDateUnadjusted,                                            42299) /*!< 42299 (LocalMktDate FIX.5.0SP2) The unadjusted cash settlement date.*/ \
X(LegCashSettlDateBusinessDayConvention,                                 42300) /*!< 42300 (int FIX.5.0SP2) The business day convention used to adjust the cash settlement provision's date.  Used only to override the business day convention defined in the InstrumentLeg component.*/ \
X(LegCashSettlDateRelativeTo,                                            42301) /*!< 42301 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegCashSettlDateOffsetPeriod,                                          42302) /*!< 42302 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement date offset.*/ \
X(LegCashSettlDateOffsetUnit,                                            42303) /*!< 42303 (String FIX.5.0SP2) Time unit associated with the relative cash settlement date offset.*/ \
X(LegCashSettlDateOffsetDayType,                                         42304) /*!< 42304 (int FIX.5.0SP2) Specifies the day type of the relative cash settlement date offset.*/ \
X(LegCashSettlDateAdjusted,                                              42305) /*!< 42305 (LocalMktDate FIX.5.0SP2) The adjusted cash settlement date.*/ \
X(NoLegCashSettlDateBusinessCenters,                                     42306) /*!< 42306 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegCashSettlDateBusinessCenter,                                        42307) /*!< 42307 (String FIX.5.0SP2) The business center calendar used for date adjustment of the cash settlement unadjusted or relative date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegCashSettlPriceSource,                                               42308) /*!< 42308 (String FIX.5.0SP2) The source from which the settlement price is to be obtained. \
 \
See http://www.fpml.org/coding-scheme/settlement-price-source for values.*/ \
X(LegCashSettlPriceDefault,                                              42309) /*!< 42309 (int FIX.5.0SP2) The default election for determining settlement price. */ \
X(NoLegDividendAccrualPaymentDateBusinessCenters,                        42310) /*!< 42310 (NumInGroup FIX.5.0SP2) Number of entries in the LegDividendAccrualPaymentDateBusinessCenterGrp.*/ \
X(LegDividendAccrualPaymentDateBusinessCenter,                           42311) /*!< 42311 (String FIX.5.0SP2) The business center calendar used for date adjustment of the instrument's dividend accrual payment date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegDividendFloatingRateIndex,                                          42312) /*!< 42312 (String FIX.5.0SP2) The dividend accrual floating rate index.*/ \
X(LegDividendFloatingRateIndexCurvePeriod,                               42313) /*!< 42313 (int FIX.5.0SP2) Time unit multiplier for the dividend accrual floating rate index curve.*/ \
X(LegDividendFloatingRateIndexCurveUnit,                                 42314) /*!< 42314 (String FIX.5.0SP2) Time unit associated with the dividend accrual floating rate index curve period. \
 \
*/ \
X(LegDividendFloatingRateMultiplier,                                     42315) /*!< 42315 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This should only be included if the multiplier is not equal to 1 (one) for the term of the contract.*/ \
X(LegDividendFloatingRateSpread,                                         42316) /*!< 42316 (PriceOffset FIX.5.0SP2) The basis points spread from the index specified in LegDividendFloatingRateIndex(42312).*/ \
X(LegDividendFloatingRateSpreadPositionType,                             42317) /*!< 42317 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(LegDividendFloatingRateTreatment,                                      42318) /*!< 42318 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(LegDividendCapRate,                                                    42319) /*!< 42319 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. It is only required where the floating rate is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as "0.05".*/ \
X(LegDividendCapRateBuySide,                                             42320) /*!< 42320 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(LegDividendCapRateSellSide,                                            42321) /*!< 42321 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(LegDividendFloorRate,                                                  42322) /*!< 42322 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate. The rate is expressed as a decimal, e.g. 5% is represented as "0.05".*/ \
X(LegDividendFloorRateBuySide,                                           42323) /*!< 42323 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(LegDividendFloorRateSellSide,                                          42324) /*!< 42324 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(LegDividendInitialRate,                                                42325) /*!< 42325 (Percentage FIX.5.0SP2) The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. The initial rate is expressed in decimal form, e.g. 5% is represented as "0.05".*/ \
X(LegDividendFinalRateRoundingDirection,                                 42326) /*!< 42326 (char FIX.5.0SP2) Specifies the rounding direction of the final rate.*/ \
X(LegDividendFinalRatePrecision,                                         42327) /*!< 42327 (int FIX.5.0SP2) Specifies the rounding precision of the final rate in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(LegDividendAveragingMethod,                                            42328) /*!< 42328 (int FIX.5.0SP2) When averaging is applicable, used to specify whether a weighted or unweighted average method of calculation is to be used. */ \
X(LegDividendNegativeRateTreatment,                                      42329) /*!< 42329 (int FIX.5.0SP2) The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(LegDividendAccrualPaymentDateRelativeTo,                               42330) /*!< 42330 (int FIX.5.0SP2) Specifies the anchor date when the accrual payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegDividendAccrualPaymentDateOffsetPeriod,                             42331) /*!< 42331 (int FIX.5.0SP2) Time unit multiplier for the relative accrual payment date offset.*/ \
X(LegDividendAccrualPaymentDateOffsetUnit,                               42332) /*!< 42332 (String FIX.5.0SP2) Time unit associated with the relative accrual payment date offset.*/ \
X(LegDividendAccrualPaymentDateOffsetDayType,                            42333) /*!< 42333 (int FIX.5.0SP2) Specifies the day type of the relative accrual payment date offset.*/ \
X(LegDividendAccrualPaymentDateUnadjusted,                               42334) /*!< 42334 (LocalMktDate FIX.5.0SP2) The unadjusted accrual payment date.*/ \
X(LegDividendAccrualPaymentDateBusinessDayConvention,                    42335) /*!< 42335 (int FIX.5.0SP2) Accrual payment date adjustment business day convention.*/ \
X(LegDividendAccrualPaymentDateAdjusted,                                 42336) /*!< 42336 (LocalMktDate FIX.5.0SP2) The adjusted accrual payment date.*/ \
X(LegDividendReinvestmentIndicator,                                      42337) /*!< 42337 (Boolean FIX.5.0SP2) Indicates whether the dividend will be reinvested.*/ \
X(LegDividendEntitlementEvent,                                           42338) /*!< 42338 (int FIX.5.0SP2) Defines the contract event which the receiver of the derivative is entitled to the dividend.*/ \
X(LegDividendAmountType,                                                 42339) /*!< 42339 (int FIX.5.0SP2) Indicates how the gross cash dividend amount per share is determined.*/ \
X(LegDividendUnderlierRefID,                                             42340) /*!< 42340 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(LegExtraordinaryDividendPartySide,                                     42341) /*!< 42341 (int FIX.5.0SP2) Reference to the party through its side in the trade who makes the determination whether dividends are extraordinary in relation to normal levels.*/ \
X(LegExtraordinaryDividendAmountType,                                    42342) /*!< 42342 (int FIX.5.0SP2) Indicates how the extraordinary gross cash dividend per share is determined.*/ \
X(LegExtraordinaryDividendCurrency,                                      42343) /*!< 42343 (Currency FIX.5.0SP2) The currency in which the excess dividend is denominated. Uses ISO 4217 currency codes.*/ \
X(LegExtraordinaryDividendDeterminationMethod,                           42344) /*!< 42344 (String FIX.5.0SP2) Specifies the method in which the excess amount is determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(LegDividendAccrualFixedRate,                                           42345) /*!< 42345 (Percentage FIX.5.0SP2) The dividend accrual fixed rate per annum expressed as a decimal.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(LegDividendCompoundingMethod,                                          42346) /*!< 42346 (int FIX.5.0SP2) The compounding method to be used when more than one dividend period contributes to a single payment.*/ \
X(LegDividendNumOfIndexUnits,                                            42347) /*!< 42347 (int FIX.5.0SP2) The number of index units applicable to dividends.*/ \
X(LegDividendCashPercentage,                                             42348) /*!< 42348 (Percentage FIX.5.0SP2) Declared cash dividend percentage.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(LegDividendCashEquivalentPercentage,                                   42349) /*!< 42349 (Percentage FIX.5.0SP2) Declared cash-equivalent dividend percentage.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(LegNonCashDividendTreatment,                                           42350) /*!< 42350 (int FIX.5.0SP2) Defines the treatment of non-cash dividends.*/ \
X(LegDividendComposition,                                                42351) /*!< 42351 (int FIX.5.0SP2) Defines how the composition of dividends is to be determined.*/ \
X(LegSpecialDividendsIndicator,                                          42352) /*!< 42352 (Boolean FIX.5.0SP2) Indicates whether special dividends are applicable.*/ \
X(LegMaterialDividendsIndicator,                                         42353) /*!< 42353 (Boolean FIX.5.0SP2) Indicates whether material non-cash dividends are applicable.*/ \
X(LegOptionsExchangeDividendsIndicator,                                  42354) /*!< 42354 (Boolean FIX.5.0SP2) Indicates whether option exchange dividends are applicable.*/ \
X(LegAdditionalDividendsIndicator,                                       42355) /*!< 42355 (Boolean FIX.5.0SP2) Indicates whether additional dividends are applicable.*/ \
X(LegAllDividendsIndicator,                                              42356) /*!< 42356 (Boolean FIX.5.0SP2) Represents the European Master Confirmation value of 'All Dividends' which, when applicable, signifies that, for a given Ex-Date, the daily observed share price for that day is adjusted (reduced) by the cash dividend and/or the cash value of any non-cash dividend per share (including extraordinary dividends) declared by the issuer.*/ \
X(LegDividendFXTriggerDateRelativeTo,                                    42357) /*!< 42357 (int FIX.5.0SP2) Specifies the anchor date when the FX trigger date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegDividendFXTriggerDateOffsetPeriod,                                  42358) /*!< 42358 (int FIX.5.0SP2) Time unit multiplier for the relative FX trigger date offset.*/ \
X(LegDividendFXTriggerDateOffsetUnit,                                    42359) /*!< 42359 (String FIX.5.0SP2) Time unit associated with the relative FX trigger date offset.*/ \
X(LegDividendFXTriggerDateOffsetDayType,                                 42360) /*!< 42360 (int FIX.5.0SP2) Specifies the day type of the relative FX trigger date offset.*/ \
X(LegDividendFXTriggerDateUnadjusted,                                    42361) /*!< 42361 (LocalMktDate FIX.5.0SP2) The unadjusted FX trigger date.*/ \
X(LegDividendFXTriggerDateBusinessDayConvention,                         42362) /*!< 42362 (int FIX.5.0SP2) The business day convention used for the FX trigger date adjustment.*/ \
X(LegDividendFXTriggerDateAdjusted,                                      42363) /*!< 42363 (LocalMktDate FIX.5.0SP2) The adjusted FX trigger date.*/ \
X(NoLegDividendFXTriggerDateBusinessCenters,                             42364) /*!< 42364 (NumInGroup FIX.5.0SP2) Number of entries in the LegDividendFXTriggerDateBusinessCenterGrp.*/ \
X(LegDividendFXTriggerDateBusinessCenter,                                42365) /*!< 42365 (String FIX.5.0SP2) The business center calendar used for date adjustment of the  instrument's FX trigger date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegDividendPeriods,                                                  42366) /*!< 42366 (NumInGroup FIX.5.0SP2) Number of entries in the LegDividendPeriodGrp component.*/ \
X(LegDividendPeriodSequence,                                             42367) /*!< 42367 (int FIX.5.0SP2) Defines the ordinal dividend period. E.g. 1 = First period, 2 = Second period, etc.*/ \
X(LegDividendPeriodStartDateUnadjusted,                                  42368) /*!< 42368 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the dividend period will begin.*/ \
X(LegDividendPeriodEndDateUnadjusted,                                    42369) /*!< 42369 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the dividend period will end.*/ \
X(LegDividendPeriodUnderlierRefID,                                       42370) /*!< 42370 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(LegDividendPeriodStrikePrice,                                          42371) /*!< 42371 (Price FIX.5.0SP2) Specifies the fixed strike price of the dividend period.*/ \
X(LegDividendPeriodBusinessDayConvention,                                42372) /*!< 42372 (int FIX.5.0SP2) The dividend period dates business day convention.*/ \
X(LegDividendPeriodValuationDateUnadjusted,                              42373) /*!< 42373 (LocalMktDate FIX.5.0SP2) The unadjusted dividend period valuation date.*/ \
X(LegDividendPeriodValuationDateRelativeTo,                              42374) /*!< 42374 (int FIX.5.0SP2) Specifies the anchor date when the dividend period valuation date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegDividendPeriodValuationDateOffsetPeriod,                            42375) /*!< 42375 (int FIX.5.0SP2) Time unit multiplier for the relative dividend period valuation date offset.*/ \
X(LegDividendPeriodValuationDateOffsetUnit,                              42376) /*!< 42376 (String FIX.5.0SP2) Time unit associated with the relative dividend period valuation date offset.*/ \
X(LegDividendPeriodValuationDateOffsetDayType,                           42377) /*!< 42377 (int FIX.5.0SP2) Specifies the day type of the relative dividend period valuation date offset.*/ \
X(LegDividendPeriodValuationDateAdjusted,                                42378) /*!< 42378 (LocalMktDate FIX.5.0SP2) The adjusted dividend period valuation date.*/ \
X(LegDividendPeriodPaymentDateUnadjusted,                                42379) /*!< 42379 (LocalMktDate FIX.5.0SP2) The unadjusted dividend period payment date.*/ \
X(LegDividendPeriodPaymentDateRelativeTo,                                42380) /*!< 42380 (int FIX.5.0SP2) Specifies the anchor date when the dividend period payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegDividendPeriodPaymentDateOffsetPeriod,                              42381) /*!< 42381 (int FIX.5.0SP2) Time unit multiplier for the relative dividend period payment date offset.*/ \
X(LegDividendPeriodPaymentDateOffsetUnit,                                42382) /*!< 42382 (String FIX.5.0SP2) Time unit associated with the relative dividend period payment date offset.*/ \
X(LegDividendPeriodPaymentDateOffsetDayType,                             42383) /*!< 42383 (int FIX.5.0SP2) Specifies the day type of the relative dividend period payment date offset.*/ \
X(LegDividendPeriodPaymentDateAdjusted,                                  42384) /*!< 42384 (LocalMktDate FIX.5.0SP2) The adjusted dividend period payment date.*/ \
X(LegDividendPeriodXID,                                                  42385) /*!< 42385 (XID FIX.5.0SP2) Identifier for linking this stream dividend period to an underlier through an instance of RelatedInstrumentGrp.*/ \
X(NoLegDividendPeriodBusinessCenters,                                    42386) /*!< 42386 (NumInGroup FIX.5.0SP2) The number of entries in the LegDividendPeriodBusinessCentersGrp component.*/ \
X(LegDividendPeriodBusinessCenter,                                       42387) /*!< 42387 (String FIX.5.0SP2) The business center calendar used for date adjustment of the instrument's dividend period date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegExtraordinaryEvents,                                              42388) /*!< 42388 (NumInGroup FIX.5.0SP2) Number of extraordinary events in the repeating group.*/ \
X(LegExtraordinaryEventType,                                             42389) /*!< 42389 (String FIX.5.0SP2) Identifies the type of extraordinary or disruptive event applicable to the reference entity. \
 \
See http://www.fixtradingcommunity.org/codelists#Extraordinary_Event_Type for code list of extraordinary event types and values.*/ \
X(LegExtraordinaryEventValue,                                            42390) /*!< 42390 (String FIX.5.0SP2) The extraordinary or disruptive event value appropriate to LegExtraordinaryEventType(42389).  \
 \
See http://www.fixtradingcommunity.org/codelists#Extraordinary_Event_Type for code list of extraordinary event types and values.*/ \
X(LegSettlMethodElectingPartySide,                                       42391) /*!< 42391 (int FIX.5.0SP2) Side value of the party electing the settlement method.*/ \
X(LegMakeWholeDate,                                                      42392) /*!< 42392 (LocalMktDate FIX.5.0SP2) The date through which option cannot be exercised without penalty.*/ \
X(LegMakeWholeAmount,                                                    42393) /*!< 42393 (Amt FIX.5.0SP2) Amount to be paid by the buyer of the option if the option is exercised prior to the LegMakeWholeDate(42392).*/ \
X(LegMakeWholeBenchmarkCurveName,                                        42394) /*!< 42394 (String FIX.5.0SP2) Identifies the benchmark floating rate index.*/ \
X(LegMakeWholeBenchmarkCurvePoint,                                       42395) /*!< 42395 (String FIX.5.0SP2) The point on the floating rate index curve.  \
 \
Sample values: \
 \
M = combination of a number between 1-12 and an "M" for month, e.g. 3M \
 \
Y = combination of number between 1-100 and a "Y" for year, e.g. 10Y \
 \
10Y-OLD = see above, then add "-OLD" when appropriate \
 \
INTERPOLATED = the point is mathematically derived \
 \
2/2031 5 3/8 = the point is stated via a combination of maturity month / year and coupon.*/ \
X(LegMakeWholeRecallSpread,                                              42396) /*!< 42396 (PriceOffset FIX.5.0SP2) Spread over the floating rate index.*/ \
X(LegMakeWholeBenchmarkQuote,                                            42397) /*!< 42397 (int FIX.5.0SP2) The quote side of the benchmark to be used for calculating the "make whole" amount.*/ \
X(LegMakeWholeInterpolationMethod,                                       42398) /*!< 42398 (int FIX.5.0SP2) The method used when calculating the "make whole" amount. The most common is linear method.*/ \
X(LegPaymentStreamCashSettlIndicator,                                    42399) /*!< 42399 (Boolean FIX.5.0SP2) Indicates whether cash settlement is applicable.*/ \
X(LegPaymentStreamCompoundingXIDRef,                                     42400) /*!< 42400 (XIDREF FIX.5.0SP2) Reference to the stream which details the compounding fixed or floating rate.*/ \
X(LegPaymentStreamCompoundingSpread,                                     42401) /*!< 42401 (PriceOffset FIX.5.0SP2) The spread to be used for compounding. Used in scenarios where the interest payment is based on a compounding formula that uses a compounding spread in addition to the regular spread.*/ \
X(LegPaymentStreamInterpolationMethod,                                   42402) /*!< 42402 (int FIX.5.0SP2) The method used when calculating the index rate from multiple points on the curve. The most common is linear method.*/ \
X(LegPaymentStreamInterpolationPeriod,                                   42403) /*!< 42403 (int FIX.5.0SP2) Defines applicable periods for interpolation.*/ \
X(LegPaymentStreamCompoundingFixedRate,                                  42404) /*!< 42404 (float FIX.5.0SP2) The compounding fixed rate applicable to the payment stream.*/ \
X(NoLegPaymentStreamCompoundingDates,                                    42405) /*!< 42405 (NumInGroup FIX.5.0SP2) Number of dates in the repeating group.*/ \
X(LegPaymentStreamCompoundingDate,                                       42406) /*!< 42406 (LocalMktDate FIX.5.0SP2) The compounding date.  Type of date is specified in LegPaymentStreamCompoundingDateType(42407).*/ \
X(LegPaymentStreamCompoundingDateType,                                   42407) /*!< 42407 (int FIX.5.0SP2) Specifies the type of payment compounding date (e.g. adjusted for holidays).  */ \
X(LegPaymentStreamCompoundingDatesBusinessDayConvention,                 42408) /*!< 42408 (int FIX.5.0SP2) The compounding dates business day convention.*/ \
X(LegPaymentStreamCompoundingDatesRelativeTo,                            42409) /*!< 42409 (int FIX.5.0SP2) Specifies the anchor date when the compounding dates are relative to an anchor  date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamCompoundingDatesOffsetPeriod,                          42410) /*!< 42410 (int FIX.5.0SP2) Time unit multiplier for the relative compounding date offset.*/ \
X(LegPaymentStreamCompoundingDatesOffsetUnit,                            42411) /*!< 42411 (String FIX.5.0SP2) Time unit associated with the relative compounding date offset.*/ \
X(LegPaymentStreamCompoundingDatesOffsetDayType,                         42412) /*!< 42412 (int FIX.5.0SP2) Specifies the day type of the relative compounding date offset.*/ \
X(LegPaymentStreamCompoundingPeriodSkip,                                 42413) /*!< 42413 (int FIX.5.0SP2) The number of periods in the "RelativeTo" schedule that are between each date in the compounding schedule. A skip of 2 would mean that compounding dates are relative to every second date in the "RelativeTo" schedule. If present this should have a value greater than 1.*/ \
X(LegPaymentStreamCompoundingFrequencyPeriod,                            42414) /*!< 42414 (int FIX.5.0SP2) Time unit multiplier for the frequency at which compounding dates occur. */ \
X(LegPaymentStreamCompoundingFrequencyUnit,                              42415) /*!< 42415 (String FIX.5.0SP2) Time unit associated with the frequency at which compounding dates occur.*/ \
X(LegPaymentStreamCompoundingRollConvention,                             42416) /*!< 42416 (String FIX.5.0SP2) The convention for determining the sequence of compounding dates. It is used in conjunction with a specified frequency. */ \
X(LegPaymentStreamBoundsFirstDateUnadjusted,                             42417) /*!< 42417 (LocalMktDate FIX.5.0SP2) The unadjusted first date of the compounding schedule. This can be used to restrict the range of dates when they are relative.*/ \
X(LegPaymentStreamBoundsLastDateUnadjusted,                              42418) /*!< 42418 (LocalMktDate FIX.5.0SP2) The unadjusted last date of the compounding schedule. This can be used to restrict the range of dates when they are relative.*/ \
X(NoLegPaymentStreamCompoundingDatesBusinessCenters,                     42419) /*!< 42419 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegPaymentStreamCompoundingDatesBusinessCenter,                        42420) /*!< 42420 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stream compounding dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegPaymentStreamCompoundingEndDateUnadjusted,                          42421) /*!< 42421 (LocalMktDate FIX.5.0SP2) The unadjusted compounding end date.*/ \
X(LegPaymentStreamCompoundingEndDateRelativeTo,                          42422) /*!< 42422 (int FIX.5.0SP2) Specifies the anchor date when the compounding end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamCompoundingEndDateOffsetPeriod,                        42423) /*!< 42423 (int FIX.5.0SP2) Time unit multiplier for the relative compounding end date offset.*/ \
X(LegPaymentStreamCompoundingEndDateOffsetUnit,                          42424) /*!< 42424 (String FIX.5.0SP2) Time unit associated with the relative compounding end date offset.*/ \
X(LegPaymentStreamCompoundingEndDateOffsetDayType,                       42425) /*!< 42425 (int FIX.5.0SP2) Specifies the day type of the relative compounding end date offset.*/ \
X(LegPaymentStreamCompoundingEndDateAdjusted,                            42426) /*!< 42426 (LocalMktDate FIX.5.0SP2) The adjusted compounding end date.*/ \
X(LegPaymentStreamCompoundingRateIndex,                                  42427) /*!< 42427 (String FIX.5.0SP2) The payment stream's compounding floating rate index.*/ \
X(LegPaymentStreamCompoundingRateIndexCurvePeriod,                       42428) /*!< 42428 (int FIX.5.0SP2) Time unit multiplier for the payment stream's compounding floating rate index curve period.*/ \
X(LegPaymentStreamCompoundingRateIndexCurveUnit,                         42429) /*!< 42429 (String FIX.5.0SP2) Time unit associated with the payment stream's compounding floating rate index curve period. */ \
X(LegPaymentStreamCompoundingRateMultiplier,                             42430) /*!< 42430 (float FIX.5.0SP2) A rate multiplier to apply to the compounding floating rate. The multiplier can be less than or greater than 1 (one). This should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(LegPaymentStreamCompoundingRateSpread,                                 42431) /*!< 42431 (PriceOffset FIX.5.0SP2) The basis points spread from the index specified in LegPaymentStreamCompoundingRateIndex(42427).*/ \
X(LegPaymentStreamCompoundingRateSpreadPositionType,                     42432) /*!< 42432 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(LegPaymentStreamCompoundingRateTreatment,                              42433) /*!< 42433 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(LegPaymentStreamCompoundingCapRate,                                    42434) /*!< 42434 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the compounding floating rate. It is only required where the compounding floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as "0.05".*/ \
X(LegPaymentStreamCompoundingCapRateBuySide,                             42435) /*!< 42435 (int FIX.5.0SP2) Reference to the buyer of the compounding cap rate option through its trade side.*/ \
X(LegPaymentStreamCompoundingCapRateSellSide,                            42436) /*!< 42436 (int FIX.5.0SP2) Reference to the seller of the compounding cap rate option through its trade side.*/ \
X(LegPaymentStreamCompoundingFloorRate,                                  42437) /*!< 42437 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the compounding floating rate. The floor rate (strike) is only required where the compounding floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate. The rate is expressed as a decimal, e.g. 5% is represented as "0.05".*/ \
X(LegPaymentStreamCompoundingFloorRateBuySide,                           42438) /*!< 42438 (int FIX.5.0SP2) Reference to the buyer of the compounding floor rate option through its trade side.*/ \
X(LegPaymentStreamCompoundingFloorRateSellSide,                          42439) /*!< 42439 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(LegPaymentStreamCompoundingInitialRate,                                42440) /*!< 42440 (Percentage FIX.5.0SP2) The initial compounding floating rate reset agreed between the principal parties involved in the trade. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. The initial rate is expressed in decimal form, e.g. 5% is represented as "0.05".*/ \
X(LegPaymentStreamCompoundingFinalRateRoundingDirection,                 42441) /*!< 42441 (char FIX.5.0SP2) Specifies the rounding direction for the compounding floating rate.*/ \
X(LegPaymentStreamCompoundingFinalRatePrecision,                         42442) /*!< 42442 (int FIX.5.0SP2) Specifies the compounding floating rate rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(LegPaymentStreamCompoundingAveragingMethod,                            42443) /*!< 42443 (int FIX.5.0SP2) Specifies the averaging method when compounding floating rate averaging is applicable (e.g. weighted or unweighted). */ \
X(LegPaymentStreamCompoundingNegativeRateTreatment,                      42444) /*!< 42444 (int FIX.5.0SP2) Specifies the method for calculating payment obligations when a compounding floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(LegPaymentStreamCompoundingStartDateUnadjusted,                        42445) /*!< 42445 (LocalMktDate FIX.5.0SP2) The unadjusted compounding start date.*/ \
X(LegPaymentStreamCompoundingStartDateRelativeTo,                        42446) /*!< 42446 (int FIX.5.0SP2) Specifies the anchor date when the compounding start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamCompoundingStartDateOffsetPeriod,                      42447) /*!< 42447 (int FIX.5.0SP2) Time unit multiplier for the relative compounding start date offset.*/ \
X(LegPaymentStreamCompoundingStartDateOffsetUnit,                        42448) /*!< 42448 (String FIX.5.0SP2) Time unit associated with the relative compounding start date offset.*/ \
X(LegPaymentStreamCompoundingStartDateOffsetDayType,                     42449) /*!< 42449 (int FIX.5.0SP2) Specifies the day type of the relative compounding start date offset.*/ \
X(LegPaymentStreamCompoundingStartDateAdjusted,                          42450) /*!< 42450 (LocalMktDate FIX.5.0SP2) The adjusted compounding start date.*/ \
X(LegPaymentStreamFormulaImageLength,                                    42451) /*!< 42451 (Length FIX.5.0SP2) Length in bytes of the LegPaymentStreamFormulaImage(42452) field.*/ \
X(LegPaymentStreamFormulaImage,                                          42452) /*!< 42452 (data FIX.5.0SP2) Image of the formula image when represented through an encoded clip in base64Binary.*/ \
X(LegPaymentStreamFinalPricePaymentDateUnadjusted,                       42453) /*!< 42453 (LocalMktDate FIX.5.0SP2) The unadjusted final price payment date.*/ \
X(LegPaymentStreamFinalPricePaymentDateRelativeTo,                       42454) /*!< 42454 (int FIX.5.0SP2) Specifies the anchor date when the final price payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamFinalPricePaymentDateOffsetPeriod,                     42455) /*!< 42455 (int FIX.5.0SP2) Time unit multiplier for the relative final price payment date offset.*/ \
X(LegPaymentStreamFinalPricePaymentDateOffsetUnit,                       42456) /*!< 42456 (String FIX.5.0SP2) Time unit associated with the relative final price payment date offset.*/ \
X(LegPaymentStreamFinalPricePaymentDateOffsetDayType,                    42457) /*!< 42457 (int FIX.5.0SP2) Specifies the day type of the relative final price payment date offset.*/ \
X(LegPaymentStreamFinalPricePaymentDateAdjusted,                         42458) /*!< 42458 (LocalMktDate FIX.5.0SP2) The adjusted final price payment date.*/ \
X(NoLegPaymentStreamFixingDates,                                         42459) /*!< 42459 (NumInGroup FIX.5.0SP2) Number of fixing dates in the repeating group.*/ \
X(LegPaymentStreamFixingDate,                                            42460) /*!< 42460 (LocalMktDate FIX.5.0SP2) The fixing date.  Type of date is specified in LegPaymentStreamFixingDateType(42461).*/ \
X(LegPaymentStreamFixingDateType,                                        42461) /*!< 42461 (int FIX.5.0SP2) Specifies the type of fixing date (e.g. adjusted for holidays).  */ \
X(LegPaymentStreamFirstObservationDateUnadjusted,                        42462) /*!< 42462 (LocalMktDate FIX.5.0SP2) The unadjusted initial price observation date.*/ \
X(LegPaymentStreamFirstObservationDateRelativeTo,                        42463) /*!< 42463 (int FIX.5.0SP2) Specifies the anchor date when the initial price observation date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStreamFirstObservationDateOffsetDayType,                     42464) /*!< 42464 (int FIX.5.0SP2) Specifies the day type of the initial price observation date offset.*/ \
X(LegPaymentStreamFirstObservationDateAdjusted,                          42465) /*!< 42465 (LocalMktDate FIX.5.0SP2) The adjusted initial price observation date.*/ \
X(LegPaymentStreamUnderlierRefID,                                        42466) /*!< 42466 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(LegReturnRateNotionalReset,                                            42467) /*!< 42467 (Boolean FIX.5.0SP2) Indicates whether the term "Equity Notional Reset" as defined in the ISDA 2002 Equity Derivatives Definitions is applicable ("Y") or not.*/ \
X(LegPaymentStreamLinkInitialLevel,                                      42468) /*!< 42468 (Price FIX.5.0SP2) Price level at which the correlation or variance swap contract will strike.*/ \
X(LegPaymentStreamLinkClosingLevelIndicator,                             42469) /*!< 42469 (Boolean FIX.5.0SP2) Indicates whether the correlation or variance swap contract will ("Y") strike off the closing level of the default exchange traded contract or not.*/ \
X(LegPaymentStreamLinkExpiringLevelIndicator,                            42470) /*!< 42470 (Boolean FIX.5.0SP2) Indicates whether the correlation or variance swap contract will ("Y") strike off the expiring level of the default exchange traded contract or not.*/ \
X(LegPaymentStreamLinkEstimatedTradingDays,                              42471) /*!< 42471 (int FIX.5.0SP2) The expected number of trading days in the variance or correlation swap stream.*/ \
X(LegPaymentStreamLinkStrikePrice,                                       42472) /*!< 42472 (Price FIX.5.0SP2) The strike price of a correlation or variance swap stream.*/ \
X(LegPaymentStreamLinkStrikePriceType,                                   42473) /*!< 42473 (int FIX.5.0SP2) For a variance swap specifies how LegPaymentStreamLinkStrikePrice(42472) is expressed.*/ \
X(LegPaymentStreamLinkMaximumBoundary,                                   42474) /*!< 42474 (float FIX.5.0SP2) Specifies the maximum or upper boundary for variance or strike determination. \
 \
For a variation swap stream all observations above this price level will be excluded from the variance calculation.  \
 \
For a correlation swap stream the maximum boundary is a percentage of the strike price.*/ \
X(LegPaymentStreamLinkMinimumBoundary,                                   42475) /*!< 42475 (float FIX.5.0SP2) Specifies the minimum or lower boundary for variance or strike determination. \
 \
For a variation swap stream all observations below this price level will be excluded from the variance calculation. \
 \
For a correlation swap stream the minimum boundary is a percentage of the strike price.*/ \
X(LegPaymentStreamLinkNumberOfDataSeries,                                42476) /*!< 42476 (int FIX.5.0SP2) Number of data series for a correlation swap.  Normal market practice is that correlation data sets are drawn from geographic market areas, such as America, Europe and Asia Pacific.  Each of these geographic areas will have its own data series to avoid contagion.*/ \
X(LegPaymentStreamVarianceUnadjustedCap,                                 42477) /*!< 42477 (float FIX.5.0SP2) Indicates the scaling factor to be multiplied by the variance strike price thereby making variance cap applicable.*/ \
X(LegPaymentStreamRealizedVarianceMethod,                                42478) /*!< 42478 (int FIX.5.0SP2) Indicates which price to use to satisfy the boundary condition.*/ \
X(LegPaymentStreamDaysAdjustmentIndicator,                               42479) /*!< 42479 (Boolean FIX.5.0SP2) Indicates whether the contract specifies that the notional should be scaled by the number of days in range divided by the estimate trading days or not. The number of "days in range" refers to the number of returns that contribute to the realized volatility.*/ \
X(LegPaymentStreamNearestExchangeContractRefID,                          42480) /*!< 42480 (String FIX.5.0SP2) References a contract listed on an exchange through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(LegPaymentStreamVegaNotionalAmount,                                    42481) /*!< 42481 (float FIX.5.0SP2) Vega Notional represents the approximate gain/loss at maturity for a 1% difference between RVol (realized volatility) and KVol (strike volatility). It does not necessarily represent the Vega risk of the trade.*/ \
X(LegPaymentStreamFormulaCurrency,                                       42482) /*!< 42482 (Currency FIX.5.0SP2) The currency in which the formula amount is denominated.  Uses ISO 4217 currency codes.*/ \
X(LegPaymentStreamFormulaCurrencyDeterminationMethod,                    42483) /*!< 42483 (String FIX.5.0SP2) Specifies the method according to which the formula amount currency is determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(LegPaymentStreamFormulaReferenceAmount,                                42484) /*!< 42484 (int FIX.5.0SP2) Specifies the reference amount when this term either corresponds to the standard ISDA Definition (either the 2002 Equity Definition for the Equity Amount, or the 2000 Definition for the Interest Amount), or refers to a term defined elsewhere in the swap document. \
 \
See http://www.fixtradingcommunity.org/codelists#Payment_Amount_Relative_To for code list of reference amounts.*/ \
X(NoLegPaymentStreamFormulas,                                            42485) /*!< 42485 (NumInGroup FIX.5.0SP2) Number of formulas in the repeating group.*/ \
X(LegPaymentStreamFormula,                                               42486) /*!< 42486 (XMLData FIX.5.0SP2) Contains an XML representation of the formula. Defined for flexibility in choice of language (MathML, OpenMath or text).*/ \
X(LegPaymentStreamFormulaDesc,                                           42487) /*!< 42487 (String FIX.5.0SP2) A description of the math formula in LegPaymentStreamFormula(42486).*/ \
X(LegPaymentStubEndDateUnadjusted,                                       42488) /*!< 42488 (LocalMktDate FIX.5.0SP2) The unadjusted stub end date.*/ \
X(LegPaymentStubEndDateBusinessDayConvention,                            42489) /*!< 42489 (int FIX.5.0SP2) The stub end date business day convention.*/ \
X(LegPaymentStubEndDateRelativeTo,                                       42490) /*!< 42490 (int FIX.5.0SP2) Specifies the anchor date when the stub end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStubEndDateOffsetPeriod,                                     42491) /*!< 42491 (int FIX.5.0SP2) Time unit multiplier for the relative stub end date offset.*/ \
X(LegPaymentStubEndDateOffsetUnit,                                       42492) /*!< 42492 (String FIX.5.0SP2) Time unit associated with the relative stub end date offset.*/ \
X(LegPaymentStubEndDateOffsetDayType,                                    42493) /*!< 42493 (int FIX.5.0SP2) Specifies the day type of the relative stub end date offset.*/ \
X(LegPaymentStubEndDateAdjusted,                                         42494) /*!< 42494 (LocalMktDate FIX.5.0SP2) The adjusted stub end date.*/ \
X(NoLegPaymentStubEndDateBusinessCenters,                                42495) /*!< 42495 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegPaymentStubEndDateBusinessCenter,                                   42496) /*!< 42496 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stub end date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegPaymentStubStartDateUnadjusted,                                     42497) /*!< 42497 (LocalMktDate FIX.5.0SP2) The unadjusted stub start date.*/ \
X(LegPaymentStubStartDateBusinessDayConvention,                          42498) /*!< 42498 (int FIX.5.0SP2) The stub start date business day convention.*/ \
X(LegPaymentStubStartDateRelativeTo,                                     42499) /*!< 42499 (int FIX.5.0SP2) Specifies the anchor date when the stub start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegPaymentStubStartDateOffsetPeriod,                                   42500) /*!< 42500 (int FIX.5.0SP2) Time unit multiplier for the relative stub start date offset.*/ \
X(LegPaymentStubStartDateOffsetUnit,                                     42501) /*!< 42501 (String FIX.5.0SP2) Time unit associated with the relative stub start date offset.*/ \
X(LegPaymentStubStartDateOffsetDayType,                                  42502) /*!< 42502 (int FIX.5.0SP2) Specifies the day type of the relative stub start date offset.*/ \
X(LegPaymentStubStartDateAdjusted,                                       42503) /*!< 42503 (LocalMktDate FIX.5.0SP2) The adjusted stub start date.*/ \
X(NoLegPaymentStubStartDateBusinessCenters,                              42504) /*!< 42504 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegPaymentStubStartDateBusinessCenter,                                 42505) /*!< 42505 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stub start date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegProvisionBreakFeeElection,                                          42506) /*!< 42506 (int FIX.5.0SP2) Type of fee elected for the break provision. */ \
X(LegProvisionBreakFeeRate,                                              42507) /*!< 42507 (Percentage FIX.5.0SP2) Break fee election rate when the break fee is proportional to the notional. A fee rate of 5% would be represented as "0.05".*/ \
X(NoLegReturnRateDates,                                                  42508) /*!< 42508 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate date repeating group.*/ \
X(LegReturnRateDateMode,                                                 42509) /*!< 42509 (int FIX.5.0SP2) Specifies the valuation type applicable to the return rate date.*/ \
X(LegReturnRateValuationDateRelativeTo,                                  42510) /*!< 42510 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation dates are relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegReturnRateValuationDateOffsetPeriod,                                42511) /*!< 42511 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation date offset.*/ \
X(LegReturnRateValuationDateOffsetUnit,                                  42512) /*!< 42512 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation date offset.*/ \
X(LegReturnRateValuationDateOffsetDayType,                               42513) /*!< 42513 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation date offset.*/ \
X(LegReturnRateValuationStartDateUnadjusted,                             42514) /*!< 42514 (LocalMktDate FIX.5.0SP2) The unadjusted start date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(LegReturnRateValuationStartDateRelativeTo,                             42515) /*!< 42515 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegReturnRateValuationStartDateOffsetPeriod,                           42516) /*!< 42516 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation start date offset.*/ \
X(LegReturnRateValuationStartDateOffsetUnit,                             42517) /*!< 42517 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation start date offset.*/ \
X(LegReturnRateValuationStartDateOffsetDayType,                          42518) /*!< 42518 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation start date offset.*/ \
X(LegReturnRateValuationStartDateAdjusted,                               42519) /*!< 42519 (LocalMktDate FIX.5.0SP2) The adjusted start date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(LegReturnRateValuationEndDateUnadjusted,                               42520) /*!< 42520 (LocalMktDate FIX.5.0SP2) The unadjusted end date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(LegReturnRateValuationEndDateRelativeTo,                               42521) /*!< 42521 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegReturnRateValuationEndDateOffsetPeriod,                             42522) /*!< 42522 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation end date offset.*/ \
X(LegReturnRateValuationEndDateOffsetUnit,                               42523) /*!< 42523 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation end date offset.*/ \
X(LegReturnRateValuationEndDateOffsetDayType,                            42524) /*!< 42524 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation end date offset.*/ \
X(LegReturnRateValuationEndDateAdjusted,                                 42525) /*!< 42525 (LocalMktDate FIX.5.0SP2) The adjusted end date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(LegReturnRateValuationFrequencyPeriod,                                 42526) /*!< 42526 (int FIX.5.0SP2) Time unit multiplier for the frequency at which return rate valuation dates occur. */ \
X(LegReturnRateValuationFrequencyUnit,                                   42527) /*!< 42527 (String FIX.5.0SP2) Time unit associated with the frequency at which return rate valuation dates occur.*/ \
X(LegReturnRateValuationFrequencyRollConvention,                         42528) /*!< 42528 (String FIX.5.0SP2) The convention for determining the sequence of return rate valuation dates. It is used in conjunction with a specified frequency.*/ \
X(LegReturnRateValuationDateBusinessDayConvention,                       42529) /*!< 42529 (int FIX.5.0SP2) The return rate valuation dates business day convention.*/ \
X(NoLegReturnRateFXConversions,                                          42530) /*!< 42530 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate FX conversion repeating group. */ \
X(LegReturnRateFXCurrencySymbol,                                         42531) /*!< 42531 (String FIX.5.0SP2) Specifies the currency pair for the FX conversion expressed using the CCY1/CCY2 convention.  Uses ISO 4217 currency codes.*/ \
X(LegReturnRateFXRate,                                                   42532) /*!< 42532 (float FIX.5.0SP2) The rate of exchange between the two currencies specified in LegReturnRateFXCurrencySymbol(42531).*/ \
X(LegReturnRateFXRateCalc,                                               42533) /*!< 42533 (char FIX.5.0SP2) The rate of exchange between the two currencies specified in LegReturnRateFXCurrencySymbol(42531).*/ \
X(NoLegReturnRates,                                                      42534) /*!< 42534 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate repeating group.*/ \
X(LegReturnRatePriceSequence,                                            42535) /*!< 42535 (int FIX.5.0SP2) Specifies the type of price sequence of the return rate.*/ \
X(LegReturnRateCommissionBasis,                                          42536) /*!< 42536 (char FIX.5.0SP2) Specifies the basis or unit used to calculate the commission.*/ \
X(LegReturnRateCommissionAmount,                                         42537) /*!< 42537 (Amt FIX.5.0SP2) The commission amount.*/ \
X(LegReturnRateCommissionCurrency,                                       42538) /*!< 42538 (Currency FIX.5.0SP2) Specifies the currency the commission amount is denominated in. Uses ISO 4217 currency codes.*/ \
X(LegReturnRateTotalCommissionPerTrade,                                  42539) /*!< 42539 (Amt FIX.5.0SP2) The total commission per trade.*/ \
X(LegReturnRateDeterminationMethod,                                      42540) /*!< 42540 (String FIX.5.0SP2) Specifies the method by which the underlier prices are determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(LegReturnRateAmountRelativeTo,                                         42541) /*!< 42541 (int FIX.5.0SP2) Specifies the reference amount when the return rate amount is relative to another amount in the trade. \
 \
See http://www.fixtradingcommunity.org/codelists#Amount_Relative_To for code list of relative amounts.*/ \
X(LegReturnRateQuoteMeasureType,                                         42542) /*!< 42542 (String FIX.5.0SP2) Specifies the type of the measure applied to the return rate's asset, e.g. valuation, sensitivity risk. This could be an NPV, a cash flow, a clean price, etc. \
 \
See http://www.fpml.org/coding-scheme/asset-measure for values.*/ \
X(LegReturnRateQuoteUnits,                                               42543) /*!< 42543 (String FIX.5.0SP2) Specifies the units that the measure is expressed in. If not specified, the default is a price/value in currency units.  \
 \
See http://www.fpml.org/coding-scheme/price-quote-units for values.*/ \
X(LegReturnRateQuoteMethod,                                              42544) /*!< 42544 (int FIX.5.0SP2) Specifies the type of quote used to determine the return rate of the swap.*/ \
X(LegReturnRateQuoteCurrency,                                            42545) /*!< 42545 (Currency FIX.5.0SP2) Specifies the currency the return rate quote is denominated in.  Uses ISO 4217 Currency Code.*/ \
X(LegReturnRateQuoteCurrencyType,                                        42546) /*!< 42546 (String FIX.5.0SP2) Specifies the type of currency, e.g. settlement currency, base currency, etc., that the quote is reported in.  \
 \
See http://www.fpml.org/coding-scheme/reporting-currency-type for values.*/ \
X(LegReturnRateQuoteTimeType,                                            42547) /*!< 42547 (int FIX.5.0SP2) Specifies how or the timing when the quote is to be obtained.*/ \
X(LegReturnRateQuoteTime,                                                42548) /*!< 42548 (LocalMktTime FIX.5.0SP2) The time when the quote is to be generated. */ \
X(LegReturnRateQuoteDate,                                                42549) /*!< 42549 (LocalMktDate FIX.5.0SP2) The date when the quote is to be generated.*/ \
X(LegReturnRateQuoteExpirationTime,                                      42550) /*!< 42550 (LocalMktTime FIX.5.0SP2) The time when the quote ceases to be valid.*/ \
X(LegReturnRateQuoteBusinessCenter,                                      42551) /*!< 42551 (String FIX.5.0SP2) The business center calendar used for adjustments associated with LegReturnRateQuoteTimeType(42547) or LegReturnRateQuoteTime(42548) and LegReturnRateQuoteDate(42549), e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegReturnRateQuoteExchange,                                            42552) /*!< 42552 (Exchange FIX.5.0SP2) Specifies the exchange (e.g. stock or listed futures/options exchange) from which the quote is obtained.*/ \
X(LegReturnRateQuotePricingModel,                                        42553) /*!< 42553 (String FIX.5.0SP2) Specifies the pricing model used to evaluate the underlying asset price.  \
 \
See http://www.fpml.org/coding-scheme/pricing-model for values.*/ \
X(LegReturnRateCashFlowType,                                             42554) /*!< 42554 (String FIX.5.0SP2) Specifies the type of cash flows, e.g. coupon payment, premium fee, settlement fee, etc.  \
 \
See http://www.fpml.org/coding-scheme/cashflow-type for values.*/ \
X(LegReturnRateValuationTimeType,                                        42555) /*!< 42555 (int FIX.5.0SP2) Specifies the timing at which the calculation agent values the underlying. */ \
X(LegReturnRateValuationTime,                                            42556) /*!< 42556 (LocalMktTime FIX.5.0SP2) The time at which the calculation agent values the underlying asset. */ \
X(LegReturnRateValuationTimeBusinessCenter,                              42557) /*!< 42557 (String FIX.5.0SP2) The business center calendar used for adjustments associated with LegReturnRateValuationTimeType(42555) or LegReturnRateValuationTime(42556), e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegReturnRateValuationPriceOption,                                     42558) /*!< 42558 (int FIX.5.0SP2) Indicates whether an ISDA price option applies, and if applicable which type of price.*/ \
X(LegReturnRateFinalPriceFallback,                                       42559) /*!< 42559 (int FIX.5.0SP2) Specifies the fallback provision for the hedging party in the determination of the final price.*/ \
X(NoLegReturnRateInformationSources,                                     42560) /*!< 42560 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate information source repeating group.*/ \
X(LegReturnRateInformationSource,                                        42561) /*!< 42561 (int FIX.5.0SP2) Identifies the source of rate information. For FX the references source to be used for the FX spot rate.*/ \
X(LegReturnRateReferencePage,                                            42562) /*!< 42562 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
For FX, the reference page to the spot rate to be used for the reference FX spot rate. \
 \
When LegReturnRateInformationSource(42561) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions.  \
 \
See: http://www.fpml.org/coding-scheme/settlement-rate-option.*/ \
X(LegReturnRateReferencePageHeading,                                     42563) /*!< 42563 (String FIX.5.0SP2) Identifies the page heading from the rate source.*/ \
X(NoLegReturnRatePrices,                                                 42564) /*!< 42564 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate price repeating group.*/ \
X(LegReturnRatePriceBasis,                                               42565) /*!< 42565 (int FIX.5.0SP2) The basis of the return price.*/ \
X(LegReturnRatePrice,                                                    42566) /*!< 42566 (Price FIX.5.0SP2) Specifies the price of the underlying swap asset.*/ \
X(LegReturnRatePriceCurrency,                                            42567) /*!< 42567 (Currency FIX.5.0SP2) Specifies the currency of the price of the leg swap asset. Uses ISO 4217 currency codes.*/ \
X(LegReturnRatePriceType,                                                42568) /*!< 42568 (int FIX.5.0SP2) Specifies whether the LegReturnRatePrice(42566) is expressed in absolute or relative terms.*/ \
X(NoLegReturnRateValuationDateBusinessCenters,                           42569) /*!< 42569 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate valuation date business center repeating group.*/ \
X(LegReturnRateValuationDateBusinessCenter,                              42570) /*!< 42570 (String FIX.5.0SP2) The business center calendar used for date adjustment of the return rate valuation unadjusted or relative dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoLegReturnRateValuationDates,                                         42571) /*!< 42571 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate valuation date repeating group.*/ \
X(LegReturnRateValuationDate,                                            42572) /*!< 42572 (LocalMktDate FIX.5.0SP2) The return rate valuation date.  The type of date is specified in LegReturnRateValuationDateType(42573).*/ \
X(LegReturnRateValuationDateType,                                        42573) /*!< 42573 (int FIX.5.0SP2) Specifies the type of return rate valuation date (e.g. adjusted for holidays).  */ \
X(LegSettlMethodElectionDateUnadjusted,                                  42574) /*!< 42574 (LocalMktDate FIX.5.0SP2) The unadjusted settlement method election date.*/ \
X(LegSettlMethodElectionDateBusinessDayConvention,                       42575) /*!< 42575 (int FIX.5.0SP2) The settlement method election date adjustment business day convention. */ \
X(LegSettlMethodElectionDateRelativeTo,                                  42576) /*!< 42576 (int FIX.5.0SP2) Specifies the anchor date when the settlement method election date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(LegSettlMethodElectionDateOffsetPeriod,                                42577) /*!< 42577 (int FIX.5.0SP2) Time unit multiplier for the relative settlement method election date offset.*/ \
X(LegSettlMethodElectionDateOffsetUnit,                                  42578) /*!< 42578 (String FIX.5.0SP2) Time unit associated with the relative settlement method election date offset.*/ \
X(LegSettlMethodElectionDateOffsetDayType,                               42579) /*!< 42579 (int FIX.5.0SP2) Specifies the day type of the relative settlement method election date offset.*/ \
X(LegSettlMethodElectionDateAdjusted,                                    42580) /*!< 42580 (LocalMktDate FIX.5.0SP2) The adjusted settlement method election date.*/ \
X(NoLegSettlMethodElectionDateBusinessCenters,                           42581) /*!< 42581 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(LegSettlMethodElectionDateBusinessCenter,                              42582) /*!< 42582 (String FIX.5.0SP2) The business center calendar used for date adjustment of the settlement method election unadjusted or relative date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(LegStreamVersion,                                                      42583) /*!< 42583 (String FIX.5.0SP2) The stream version identifier when there have been modifications to the contract over time. Helps signal when there are embedded changes.*/ \
X(LegStreamVersionEffectiveDate,                                         42584) /*!< 42584 (LocalMktDate FIX.5.0SP2) The effective date of the LegStreamVersion(42583).*/ \
X(LegStreamNotionalDeterminationMethod,                                  42585) /*!< 42585 (String FIX.5.0SP2) Specifies the method for determining the floating notional value for equity swaps.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(LegStreamNotionalAdjustments,                                          42586) /*!< 42586 (int FIX.5.0SP2) For equity swaps this specifies the conditions that govern the adjustment to the number of units of the swap.*/ \
X(StreamCommodityDeliveryPricingRegion,                                  42587) /*!< 42587 (String FIX.5.0SP2) The delivery or pricing region associated with the commodity swap. See http://www.ecfr.gov/cgi-bin/text-idx?SID=660d6a40f836aa6ddf213cba080c5b22&node=ap17.2.43_17.e&rgn=div9  for the external code list.*/ \
X(LegStreamCommodityDeliveryPricingRegion,                               42588) /*!< 42588 (String FIX.5.0SP2) The delivery or pricing region associated with the commodity swap. See http://www.ecfr.gov/cgi-bin/text-idx?SID=660d6a40f836aa6ddf213cba080c5b22&node=ap17.2.43_17.e&rgn=div9 for the external code list.*/ \
X(UnderlyingStreamCommodityDeliveryPricingRegion,                        42589) /*!< 42589 (String FIX.5.0SP2) The delivery or pricing region associated with the commodity swap. See http://www.ecfr.gov/cgi-bin/text-idx?SID=660d6a40f836aa6ddf213cba080c5b22&node=ap17.2.43_17.e&rgn=div9 for the external code list.*/ \
X(SettlMethodElectingPartySide,                                          42590) /*!< 42590 (int FIX.5.0SP2) Side value of the party electing the settlement method.*/ \
X(MakeWholeDate,                                                         42591) /*!< 42591 (LocalMktDate FIX.5.0SP2) The date through which option cannot be exercised without penalty.*/ \
X(MakeWholeAmount,                                                       42592) /*!< 42592 (Amt FIX.5.0SP2) Amount to be paid by the buyer of the option if the option is exercised prior to the MakeWholeDate(42591).*/ \
X(MakeWholeBenchmarkCurveName,                                           42593) /*!< 42593 (String FIX.5.0SP2) Identifies the benchmark floating rate index.*/ \
X(MakeWholeBenchmarkCurvePoint,                                          42594) /*!< 42594 (String FIX.5.0SP2) The point on the floating rate index curve.  \
 \
Sample values: \
 \
M = combination of a number between 1-12 and an "M" for month, e.g. 3M \
 \
Y = combination of number between 1-100 and a "Y" for year, e.g. 10Y \
 \
10Y-OLD = see above, then add "-OLD" when appropriate \
 \
INTERPOLATED = the point is mathematically derived \
 \
2/2031 5 3/8 = the point is stated via a combination of maturity month / year and coupon.*/ \
X(MakeWholeRecallSpread,                                                 42595) /*!< 42595 (PriceOffset FIX.5.0SP2) Spread over the floating rate index.*/ \
X(MakeWholeBenchmarkQuote,                                               42596) /*!< 42596 (int FIX.5.0SP2) The quote side of the benchmark to be used for calculating the "make whole" amount.*/ \
X(MakeWholeInterpolationMethod,                                          42597) /*!< 42597 (int FIX.5.0SP2) The method used when calculating the "make whole" amount. The most common is linear method.*/ \
X(PaymentAmountRelativeTo,                                               42598) /*!< 42598 (int FIX.5.0SP2) Specifies the reference amount when the payment amount is relative to another amount in the message. \
 \
See http://www.fixtradingcommunity.org/codelists#Payment_Amount_Relative_To for code list of relative amounts. \
 \
*/ \
X(PaymentAmountDeterminationMethod,                                      42599) /*!< 42599 (String FIX.5.0SP2) Specifies the method by which a payment amount is determined. \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(PaymentStreamCashSettlIndicator,                                       42600) /*!< 42600 (Boolean FIX.5.0SP2) Indicates whether cash settlement is applicable.*/ \
X(PaymentStreamCompoundingXIDRef,                                        42601) /*!< 42601 (XIDREF FIX.5.0SP2) Reference to the stream which details the compounding fixed or floating rate.*/ \
X(PaymentStreamCompoundingSpread,                                        42602) /*!< 42602 (PriceOffset FIX.5.0SP2) The spread to be used for compounding. Used in scenarios where the interest payment is based on a compounding formula that uses a compounding spread in addition to the regular spread.*/ \
X(PaymentStreamInterpolationMethod,                                      42603) /*!< 42603 (int FIX.5.0SP2) The method used when calculating the index rate from multiple points on the curve. The most common is linear method.*/ \
X(PaymentStreamInterpolationPeriod,                                      42604) /*!< 42604 (int FIX.5.0SP2) Defines applicable periods for interpolation.*/ \
X(PaymentStreamCompoundingFixedRate,                                     42605) /*!< 42605 (float FIX.5.0SP2) The compounding fixed rate applicable to the payment stream.*/ \
X(NoPaymentStreamCompoundingDates,                                       42606) /*!< 42606 (NumInGroup FIX.5.0SP2) Number of dates in the repeating group.*/ \
X(PaymentStreamCompoundingDate,                                          42607) /*!< 42607 (LocalMktDate FIX.5.0SP2) The compounding date.  The type of date is specified in PaymentStreamCompoundingDateType(42608).*/ \
X(PaymentStreamCompoundingDateType,                                      42608) /*!< 42608 (int FIX.5.0SP2) Specifies the type of payment compounding date (e.g. adjusted for holidays).  */ \
X(PaymentStreamCompoundingDatesBusinessDayConvention,                    42609) /*!< 42609 (int FIX.5.0SP2) The compounding dates business day convention.*/ \
X(PaymentStreamCompoundingDatesRelativeTo,                               42610) /*!< 42610 (int FIX.5.0SP2) Specifies the anchor date when the compounding dates are relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamCompoundingDatesOffsetPeriod,                             42611) /*!< 42611 (int FIX.5.0SP2) Time unit multiplier for the relative compounding date offset.*/ \
X(PaymentStreamCompoundingDatesOffsetUnit,                               42612) /*!< 42612 (String FIX.5.0SP2) Time unit associated with the relative compounding date offset.*/ \
X(PaymentStreamCompoundingDatesOffsetDayType,                            42613) /*!< 42613 (int FIX.5.0SP2) Specifies the day type of the relative compounding date offset.*/ \
X(PaymentStreamCompoundingPeriodSkip,                                    42614) /*!< 42614 (int FIX.5.0SP2) The number of periods in the "RelativeTo" schedule that are between each date in the compounding schedule. A skip of 2 would mean that compounding dates are relative to every second date in the "RelativeTo" schedule. If present this should have a value greater than 1.*/ \
X(PaymentStreamCompoundingFrequencyPeriod,                               42615) /*!< 42615 (int FIX.5.0SP2) Time unit multiplier for the frequency at which compounding dates occur. */ \
X(PaymentStreamCompoundingFrequencyUnit,                                 42616) /*!< 42616 (String FIX.5.0SP2) Time unit associated with the frequency at which compounding dates occur.*/ \
X(PaymentStreamCompoundingRollConvention,                                42617) /*!< 42617 (String FIX.5.0SP2) The convention for determining the sequence of compounding dates. It is used in conjunction with a specified frequency. */ \
X(PaymentStreamBoundsFirstDateUnadjusted,                                42618) /*!< 42618 (LocalMktDate FIX.5.0SP2) The unadjusted first date of the compounding schedule. This can be used to restrict the range of dates when they are relative.*/ \
X(PaymentStreamBoundsLastDateUnadjusted,                                 42619) /*!< 42619 (LocalMktDate FIX.5.0SP2) The unadjusted last date of the compounding schedule. This can be used to restrict the range of dates when they are relative.*/ \
X(NoPaymentStreamCompoundingDatesBusinessCenters,                        42620) /*!< 42620 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(PaymentStreamCompoundingDatesBusinessCenter,                           42621) /*!< 42621 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stream compounding dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStreamCompoundingEndDateUnadjusted,                             42622) /*!< 42622 (LocalMktDate FIX.5.0SP2) The unadjusted compounding end date.*/ \
X(PaymentStreamCompoundingEndDateRelativeTo,                             42623) /*!< 42623 (int FIX.5.0SP2) Specifies the anchor date when the compounding end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamCompoundingEndDateOffsetPeriod,                           42624) /*!< 42624 (int FIX.5.0SP2) Time unit multiplier for the relative compounding end date offset.*/ \
X(PaymentStreamCompoundingEndDateOffsetUnit,                             42625) /*!< 42625 (String FIX.5.0SP2) Time unit associated with the relative compounding end date offset.*/ \
X(PaymentStreamCompoundingEndDateOffsetDayType,                          42626) /*!< 42626 (int FIX.5.0SP2) Specifies the day type of the relative compounding end date offset.*/ \
X(PaymentStreamCompoundingEndDateAdjusted,                               42627) /*!< 42627 (LocalMktDate FIX.5.0SP2) The adjusted compounding end date.*/ \
X(PaymentStreamCompoundingRateIndex,                                     42628) /*!< 42628 (String FIX.5.0SP2) The payment stream's compounding floating rate index.*/ \
X(PaymentStreamCompoundingRateIndexCurvePeriod,                          42629) /*!< 42629 (int FIX.5.0SP2) Time unit multiplier for the payment stream's compounding floating rate index curve period.*/ \
X(PaymentStreamCompoundingRateIndexCurveUnit,                            42630) /*!< 42630 (String FIX.5.0SP2) Time unit associated with the payment stream's compounding floating rate index curve period. */ \
X(PaymentStreamCompoundingRateMultiplier,                                42631) /*!< 42631 (float FIX.5.0SP2) A rate multiplier to apply to the compounding floating rate. The multiplier can be less than or greater than 1 (one). This should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(PaymentStreamCompoundingRateSpread,                                    42632) /*!< 42632 (PriceOffset FIX.5.0SP2) The basis points spread from the index specified in PaymentStreamCompoundingRateIndex(42628).*/ \
X(PaymentStreamCompoundingRateSpreadPositionType,                        42633) /*!< 42633 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(PaymentStreamCompoundingRateTreatment,                                 42634) /*!< 42634 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(PaymentStreamCompoundingCapRate,                                       42635) /*!< 42635 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the compounding floating rate. It is only required where the compounding floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as "0.05".*/ \
X(PaymentStreamCompoundingCapRateBuySide,                                42636) /*!< 42636 (int FIX.5.0SP2) Reference to the buyer of the compounding cap rate option through its trade side.*/ \
X(PaymentStreamCompoundingCapRateSellSide,                               42637) /*!< 42637 (int FIX.5.0SP2) Reference to the seller of the compounding cap rate option through its trade side.*/ \
X(PaymentStreamCompoundingFloorRate,                                     42638) /*!< 42638 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the compounding floating rate. The floor rate (strike) is only required where the compounding floating rate on a swap stream is floored at a certain strike level.  The floor rate is assumed to be exclusive of any spread and is a per annum rate. The rate is expressed as a decimal, e.g. 5% is represented as "0.05".*/ \
X(PaymentStreamCompoundingFloorRateBuySide,                              42639) /*!< 42639 (int FIX.5.0SP2) Reference to the buyer of the compounding floor rate option through its trade side.*/ \
X(PaymentStreamCompoundingFloorRateSellSide,                             42640) /*!< 42640 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(PaymentStreamCompoundingInitialRate,                                   42641) /*!< 42641 (Percentage FIX.5.0SP2) The initial compounding floating rate reset agreed between the principal parties involved in the trade. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. The initial rate is expressed in decimal form, e.g. 5% is represented as "0.05".*/ \
X(PaymentStreamCompoundingFinalRateRoundingDirection,                    42642) /*!< 42642 (char FIX.5.0SP2) Specifies the rounding direction for the compounding floating rate.*/ \
X(PaymentStreamCompoundingFinalRatePrecision,                            42643) /*!< 42643 (int FIX.5.0SP2) Specifies the compounding floating rate rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(PaymentStreamCompoundingAveragingMethod,                               42644) /*!< 42644 (int FIX.5.0SP2) Specifies the averaging method when compounding floating rate averaging is applicable (e.g. weighted or unweighted). */ \
X(PaymentStreamCompoundingNegativeRateTreatment,                         42645) /*!< 42645 (int FIX.5.0SP2) Specifies the method for calculating payment obligations when a compounding floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(PaymentStreamCompoundingStartDateUnadjusted,                           42646) /*!< 42646 (LocalMktDate FIX.5.0SP2) The unadjusted compounding start date.*/ \
X(PaymentStreamCompoundingStartDateRelativeTo,                           42647) /*!< 42647 (int FIX.5.0SP2) Specifies the anchor date when the compounding start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamCompoundingStartDateOffsetPeriod,                         42648) /*!< 42648 (int FIX.5.0SP2) Time unit multiplier for the relative compounding start date offset.*/ \
X(PaymentStreamCompoundingStartDateOffsetUnit,                           42649) /*!< 42649 (String FIX.5.0SP2) Time unit associated with the relative compounding start date offset.*/ \
X(PaymentStreamCompoundingStartDateOffsetDayType,                        42650) /*!< 42650 (int FIX.5.0SP2) Specifies the day type of the relative compounding start date offset.*/ \
X(PaymentStreamCompoundingStartDateAdjusted,                             42651) /*!< 42651 (LocalMktDate FIX.5.0SP2) The adjusted compounding start date.*/ \
X(PaymentStreamFormulaImageLength,                                       42652) /*!< 42652 (Length FIX.5.0SP2) Length in bytes of the PaymentStreamFormulaImage(42563) field.*/ \
X(PaymentStreamFormulaImage,                                             42653) /*!< 42653 (data FIX.5.0SP2) Image of the formula image when represented through an encoded clip in base64Binary.*/ \
X(PaymentStreamFinalPricePaymentDateUnadjusted,                          42654) /*!< 42654 (LocalMktDate FIX.5.0SP2) The unadjusted final price payment date.*/ \
X(PaymentStreamFinalPricePaymentDateRelativeTo,                          42655) /*!< 42655 (int FIX.5.0SP2) Specifies the anchor date when the final price payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamFinalPricePaymentDateOffsetfPeriod,                       42656) /*!< 42656 (int FIX.5.0SP2) Time unit multiplier for the relative final price payment date offset.*/ \
X(PaymentStreamFinalPricePaymentDateOffsetUnit,                          42657) /*!< 42657 (String FIX.5.0SP2) Time unit associated with the relative final price payment date offset.*/ \
X(PaymentStreamFinalPricePaymentDateOffsetDayType,                       42658) /*!< 42658 (int FIX.5.0SP2) Specifies the day type of the relative final price payment date offset.*/ \
X(PaymentStreamFinalPricePaymentDateAdjusted,                            42659) /*!< 42659 (LocalMktDate FIX.5.0SP2) The adjusted final price payment date.*/ \
X(NoPaymentStreamFixingDates,                                            42660) /*!< 42660 (NumInGroup FIX.5.0SP2) Number of fixing dates in the repeating group.*/ \
X(PaymentStreamFixingDate,                                               42661) /*!< 42661 (LocalMktDate FIX.5.0SP2) The fixing date.  The type of date is specified in PaymentStreamFixingDateType(42662).*/ \
X(PaymentStreamFixingDateType,                                           42662) /*!< 42662 (int FIX.5.0SP2) Specifies the type of fixing date (e.g. adjusted for holidays).  */ \
X(PaymentStreamFirstObservationDateUnadjusted,                           42663) /*!< 42663 (LocalMktDate FIX.5.0SP2) The unadjusted initial price observation date.*/ \
X(PaymentStreamFirstObservationDateRelativeTo,                           42664) /*!< 42664 (int FIX.5.0SP2) Specifies the anchor date when the initial price observation date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStreamFirstObservationDateOffsetDayType,                        42665) /*!< 42665 (int FIX.5.0SP2) Specifies the day type of the initial price observation date offset.*/ \
X(PaymentStreamFirstObservationDateAdjusted,                             42666) /*!< 42666 (LocalMktDate FIX.5.0SP2) The adjusted initial price observation date.*/ \
X(PaymentStreamUnderlierRefID,                                           42667) /*!< 42667 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(ReturnRateNotionalReset,                                               42668) /*!< 42668 (Boolean FIX.5.0SP2) Indicates whether the term "Equity Notional Reset" as defined in the ISDA 2002 Equity Derivatives Definitions is applicable ("Y") or not.*/ \
X(PaymentStreamLinkInitialLevel,                                         42669) /*!< 42669 (Price FIX.5.0SP2) Price level at which the correlation or variance swap contract will strike.*/ \
X(PaymentStreamLinkClosingLevelIndicator,                                42670) /*!< 42670 (Boolean FIX.5.0SP2) Indicates whether the correlation or variance swap contract will ("Y") strike off the closing level of the default exchange traded contract or not.*/ \
X(PaymentStreamLinkExpiringLevelIndicator,                               42671) /*!< 42671 (Boolean FIX.5.0SP2) Indicates whether the correlation or variance swap contract will ("Y") strike off the expiring level of the default exchange traded contract or not.*/ \
X(PaymentStreamLinkEstimatedTradingDays,                                 42672) /*!< 42672 (int FIX.5.0SP2) The expected number of trading days in the variance or correlation swap stream.*/ \
X(PaymentStreamLinkStrikePrice,                                          42673) /*!< 42673 (Price FIX.5.0SP2) The strike price of a correlation or variance swap stream.*/ \
X(PaymentStreamLinkStrikePriceType,                                      42674) /*!< 42674 (int FIX.5.0SP2) For a variance swap specifies how PaymentStreamLinkStrikePrice(42673) is expressed.*/ \
X(PaymentStreamLinkMaximumBoundary,                                      42675) /*!< 42675 (float FIX.5.0SP2) Specifies the maximum or upper boundary for variance or strike determination. \
 \
For a variation swap stream all observations above this price level will be excluded from the variance calculation.  \
 \
For a correlation swap stream the maximum boundary is a percentage of the strike price.*/ \
X(PaymentStreamLinkMinimumBoundary,                                      42676) /*!< 42676 (float FIX.5.0SP2) Specifies the minimum or lower boundary for variance or strike determination. \
 \
For a variation swap stream all observations below this price level will be excluded from the variance calculation. \
 \
For a correlation swap stream the minimum boundary is a percentage of the strike price.*/ \
X(PaymentStreamLinkNumberOfDataSeries,                                   42677) /*!< 42677 (int FIX.5.0SP2) Number of data series for a correlation swap.  Normal market practice is that correlation data sets are drawn from geographic market areas, such as America, Europe and Asia Pacific.  Each of these geographic areas will have its own data series to avoid contagion.*/ \
X(PaymentStreamVarianceUnadjustedCap,                                    42678) /*!< 42678 (float FIX.5.0SP2) Indicates the scaling factor to be multiplied by the variance strike price thereby making variance cap applicable.*/ \
X(PaymentStreamRealizedVarianceMethod,                                   42679) /*!< 42679 (int FIX.5.0SP2) Indicates which price to use to satisfy the boundary condition.*/ \
X(PaymentStreamDaysAdjustmentIndicator,                                  42680) /*!< 42680 (Boolean FIX.5.0SP2) Indicates whether the contract specifies that the notional should be scaled by the number of days in range divided by the estimate trading days or not. The number of "days in range" refers to the number of returns that contribute to the realized volatility.*/ \
X(PaymentStreamNearestExchangeContractRefID,                             42681) /*!< 42681 (String FIX.5.0SP2) References a contract listed on an exchange through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(PaymentStreamVegaNotionalAmount,                                       42682) /*!< 42682 (float FIX.5.0SP2) "Vega Notional" represents the approximate gain/loss at maturity for a 1% difference between RVol (realised volatility) and KVol (strike volatility). It does not necessarily represent the Vega risk of the trade.*/ \
X(NoPaymentStreamFormulas,                                               42683) /*!< 42683 (NumInGroup FIX.5.0SP2) Number of formulas in the repeating group.*/ \
X(PaymentStreamFormula,                                                  42684) /*!< 42684 (XMLData FIX.5.0SP2) Contains an XML representation of the formula. Defined for flexibility in choice of language (MathML, OpenMath or text).*/ \
X(PaymentStreamFormulaDesc,                                              42685) /*!< 42685 (String FIX.5.0SP2) A description of the math formula in PaymentStreamFormula(42684).*/ \
X(PaymentStreamFormulaCurrency,                                          42686) /*!< 42686 (Currency FIX.5.0SP2) The currency in which the formula amount is denominated.  Uses ISO 4217 currency codes.*/ \
X(PaymentStreamFormulaCurrencyDeterminationMethod,                       42687) /*!< 42687 (String FIX.5.0SP2) Specifies the method according to which the formula amount currency is determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(PaymentStreamFormulaReferenceAmount,                                   42688) /*!< 42688 (int FIX.5.0SP2) Specifies the reference amount when this term either corresponds to the standard ISDA Definition (either the 2002 Equity Definition for the Equity Amount, or the 2000 Definition for the Interest Amount), or refers to a term defined elsewhere in the swap document. \
 \
See http://www.fixtradingcommunity.org/codelists#Payment_Amount_Relative_To for code list of reference amounts.*/ \
X(PaymentStubEndDateUnadjusted,                                          42689) /*!< 42689 (LocalMktDate FIX.5.0SP2) The unadjusted stub end date.*/ \
X(PaymentStubEndDateBusinessDayConvention,                               42690) /*!< 42690 (int FIX.5.0SP2) The stub end date business day convention.*/ \
X(PaymentStubEndDateRelativeTo,                                          42691) /*!< 42691 (int FIX.5.0SP2) Specifies the anchor date when the stub end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStubEndDateOffsetPeriod,                                        42692) /*!< 42692 (int FIX.5.0SP2) Time unit multiplier for the relative stub end date offset.*/ \
X(PaymentStubEndDateOffsetUnit,                                          42693) /*!< 42693 (String FIX.5.0SP2) Time unit associated with the relative stub end date offset.*/ \
X(PaymentStubEndDateOffsetDayType,                                       42694) /*!< 42694 (int FIX.5.0SP2) Specifies the day type of the relative stub end date offset.*/ \
X(PaymentStubEndDateAdjusted,                                            42695) /*!< 42695 (LocalMktDate FIX.5.0SP2) The adjusted stub end date.*/ \
X(NoPaymentStubEndDateBusinessCenters,                                   42696) /*!< 42696 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(PaymentStubEndDateBusinessCenter,                                      42697) /*!< 42697 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stub end date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(PaymentStubStartDateUnadjusted,                                        42698) /*!< 42698 (LocalMktDate FIX.5.0SP2) The unadjusted stub start date.*/ \
X(PaymentStubStartDateBusinessDayConvention,                             42699) /*!< 42699 (int FIX.5.0SP2) The stub start date business day convention.*/ \
X(PaymentStubStartDateRelativeTo,                                        42700) /*!< 42700 (int FIX.5.0SP2) Specifies the anchor date when the stub start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(PaymentStubStartDateOffsetPeriod,                                      42701) /*!< 42701 (int FIX.5.0SP2) Time unit multiplier for the relative stub start date offset.*/ \
X(PaymentStubStartDateOffsetUnit,                                        42702) /*!< 42702 (String FIX.5.0SP2) Time unit associated with the relative stub start date offset.*/ \
X(PaymentStubStartDateOffsetDayType,                                     42703) /*!< 42703 (int FIX.5.0SP2) Specifies the day type of the relative stub start date offset.*/ \
X(PaymentStubStartDateAdjusted,                                          42704) /*!< 42704 (LocalMktDate FIX.5.0SP2) The adjusted stub start date.*/ \
X(NoPaymentStubStartDateBusinessCenters,                                 42705) /*!< 42705 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(PaymentStubStartDateBusinessCenter,                                    42706) /*!< 42706 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stub start date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ProvisionBreakFeeElection,                                             42707) /*!< 42707 (int FIX.5.0SP2) Type of fee elected for the break provision. */ \
X(ProvisionBreakFeeRate,                                                 42708) /*!< 42708 (Percentage FIX.5.0SP2) Break fee election rate when the break fee is proportional to the notional.  A fee rate of 5% would be represented as "0.05".*/ \
X(NoReturnRateDates,                                                     42709) /*!< 42709 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate date repeating group.*/ \
X(ReturnRateDateMode,                                                    42710) /*!< 42710 (int FIX.5.0SP2) Specifies the valuation type applicable to the return rate date.*/ \
X(ReturnRateValuationDateRelativeTo,                                     42711) /*!< 42711 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation dates are relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ReturnRateValuationDateOffsetPeriod,                                   42712) /*!< 42712 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation date offset.*/ \
X(ReturnRateValuationDateOffsetUnit,                                     42713) /*!< 42713 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation date offset.*/ \
X(ReturnRateValuationDateOffsetDayType,                                  42714) /*!< 42714 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation date offset.*/ \
X(ReturnRateValuationStartDateUnadjusted,                                42715) /*!< 42715 (LocalMktDate FIX.5.0SP2) The unadjusted start date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(ReturnRateValuationStartDateRelativeTo,                                42716) /*!< 42716 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ReturnRateValuationStartDateOffsetPeriod,                              42717) /*!< 42717 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation start date offset.*/ \
X(ReturnRateValuationStartDateOffsetUnit,                                42718) /*!< 42718 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation start date offset.*/ \
X(ReturnRateValuationStartDateOffsetDayType,                             42719) /*!< 42719 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation start date offset.*/ \
X(ReturnRateValuationStartDateAdjusted,                                  42720) /*!< 42720 (LocalMktDate FIX.5.0SP2) The adjusted start date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(ReturnRateValuationEndDateUnadjusted,                                  42721) /*!< 42721 (LocalMktDate FIX.5.0SP2) The unadjusted end date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(ReturnRateValuationEndDateRelativeTo,                                  42722) /*!< 42722 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(ReturnRateValuationEndDateOffsetPeriod,                                42723) /*!< 42723 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation end date offset.*/ \
X(ReturnRateValuationEndDateOffsetUnit,                                  42724) /*!< 42724 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation end date offset.*/ \
X(ReturnRateValuationEndDateOffsetDayType,                               42725) /*!< 42725 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation end date offset.*/ \
X(ReturnRateValuationEndDateAdjusted,                                    42726) /*!< 42726 (LocalMktDate FIX.5.0SP2) The adjusted end date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(ReturnRateValuationFrequencyPeriod,                                    42727) /*!< 42727 (int FIX.5.0SP2) Time unit multiplier for the frequency at which return rate valuation dates occur. */ \
X(ReturnRateValuationFrequencyUnit,                                      42728) /*!< 42728 (String FIX.5.0SP2) Time unit associated with the frequency at which return rate valuation dates occur.*/ \
X(ReturnRateValuationFrequencyRollConvention,                            42729) /*!< 42729 (String FIX.5.0SP2) The convention for determining the sequence of return rate valuation dates. It is used in conjunction with a specified frequency.*/ \
X(ReturnRateValuationDateBusinessDayConvention,                          42730) /*!< 42730 (int FIX.5.0SP2) The return rate valuation dates business day convention.*/ \
X(NoReturnRateFXConversions,                                             42731) /*!< 42731 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate FX conversion repeating group. */ \
X(ReturnRateFXCurrencySymbol,                                            42732) /*!< 42732 (String FIX.5.0SP2) Specifies the currency pair for the FX conversion expressed using the CCY1/CCY2 convention.  Uses ISO 4217 currency codes.*/ \
X(ReturnRateFXRate,                                                      42733) /*!< 42733 (float FIX.5.0SP2) The rate of exchange between the two currencies specified in ReturnRateFXCurrencySymbol(42732).*/ \
X(ReturnRateFXRateCalc,                                                  42734) /*!< 42734 (char FIX.5.0SP2) Specifies whether ReturnRateFXRate(42733) should be multiplied or divided.*/ \
X(NoReturnRates,                                                         42735) /*!< 42735 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate repeating group.*/ \
X(ReturnRatePriceSequence,                                               42736) /*!< 42736 (int FIX.5.0SP2) Specifies the type of price sequence of the return rate.*/ \
X(ReturnRateCommissionBasis,                                             42737) /*!< 42737 (char FIX.5.0SP2) Specifies the basis or unit used to calculate the commission.*/ \
X(ReturnRateCommissionAmount,                                            42738) /*!< 42738 (Amt FIX.5.0SP2) The commission amount.*/ \
X(ReturnRateCommissionCurrency,                                          42739) /*!< 42739 (Currency FIX.5.0SP2) Specifies the currency the commission amount is denominated in. Uses ISO 4217 currency codes.*/ \
X(ReturnRateTotalCommissionPerTrade,                                     42740) /*!< 42740 (Amt FIX.5.0SP2) The total commission per trade.*/ \
X(ReturnRateDeterminationMethod,                                         42741) /*!< 42741 (String FIX.5.0SP2) Specifies the method by which the underlier prices are determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(ReturnRateAmountRelativeTo,                                            42742) /*!< 42742 (int FIX.5.0SP2) Specifies the reference amount when the return rate amount is relative to another amount in the trade. \
 \
See http://www.fixtradingcommunity.org/codelists#Payment_Amount_Relative_To for code list of relative amounts.*/ \
X(ReturnRateQuoteMeasureType,                                            42743) /*!< 42743 (String FIX.5.0SP2) Specifies the type of the measure applied to the return rate's asset, e.g. valuation, sensitivity risk. This could be an NPV, a cash flow, a clean price, etc.  \
 \
See http://www.fpml.org/coding-scheme/asset-measure for values.*/ \
X(ReturnRateQuoteUnits,                                                  42744) /*!< 42744 (String FIX.5.0SP2) Specifies the units that the measure is expressed in. If not specified, the default is a price/value in currency units.  \
 \
See http://www.fpml.org/coding-scheme/price-quote-units for values.*/ \
X(ReturnRateQuoteMethod,                                                 42745) /*!< 42745 (int FIX.5.0SP2) Specifies the type of quote used to determine the return rate of the swap.*/ \
X(ReturnRateQuoteCurrency,                                               42746) /*!< 42746 (Currency FIX.5.0SP2) Specifies the currency the return rate quote is denominated in.  Uses ISO 4217 Currency Code.*/ \
X(ReturnRateQuoteCurrencyType,                                           42747) /*!< 42747 (String FIX.5.0SP2) Specifies the type of currency, e.g. settlement currency, base currency, etc., that the quote is reported in.  \
 \
See http://www.fpml.org/coding-scheme/reporting-currency-type for values.*/ \
X(ReturnRateQuoteTimeType,                                               42748) /*!< 42748 (int FIX.5.0SP2) Specifies how or the timing when the quote is to be obtained.*/ \
X(ReturnRateQuoteTime,                                                   42749) /*!< 42749 (LocalMktTime FIX.5.0SP2) The time when the quote is to be generated.*/ \
X(ReturnRateQuoteDate,                                                   42750) /*!< 42750 (LocalMktDate FIX.5.0SP2) The date when the quote is to be generated.*/ \
X(ReturnRateQuoteExpirationTime,                                         42751) /*!< 42751 (LocalMktTime FIX.5.0SP2) The time when the quote ceases to be valid.*/ \
X(ReturnRateQuoteBusinessCenter,                                         42752) /*!< 42752 (String FIX.5.0SP2) The business center calendar used for adjustments associated with ReturnRateQuoteTimeType(42748) or ReturnRateQuoteTime(42749) and ReturnRateQuoteDate(42750), e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ReturnRateQuoteExchange,                                               42753) /*!< 42753 (Exchange FIX.5.0SP2) Specifies the exchange (e.g. stock or listed futures/options exchange) from which the quote is obtained.*/ \
X(ReturnRateQuotePricingModel,                                           42754) /*!< 42754 (String FIX.5.0SP2) Specifies the pricing model used to evaluate the underlying asset price.  \
 \
See http://www.fpml.org/coding-scheme/pricing-model for values.*/ \
X(ReturnRateCashFlowType,                                                42755) /*!< 42755 (String FIX.5.0SP2) Specifies the type of cash flows, e.g. coupon payment, premium fee, settlement fee, etc.  \
 \
See http://www.fpml.org/coding-scheme/cashflow-type for values.*/ \
X(ReturnRateValuationTimeType,                                           42756) /*!< 42756 (int FIX.5.0SP2) Specifies the timing at which the calculation agent values the underlying.*/ \
X(ReturnRateValuationTime,                                               42757) /*!< 42757 (LocalMktTime FIX.5.0SP2) The time at which the calculation agent values the underlying asset.*/ \
X(ReturnRateValuationTimeBusinessCenter,                                 42758) /*!< 42758 (String FIX.5.0SP2) The business center calendar used for adjustments associated with ReturnRateValuationTimeType(42756) or ReturnRateValuationTime(42757), e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(ReturnRateValuationPriceOption,                                        42759) /*!< 42759 (int FIX.5.0SP2) Indicates whether an ISDA price option applies, and if applicable which type of price.*/ \
X(ReturnRateFinalPriceFallback,                                          42760) /*!< 42760 (int FIX.5.0SP2) Specifies the fallback provision for the hedging party in the determination of the final price.*/ \
X(NoReturnRateInformationSources,                                        42761) /*!< 42761 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate information source repeating group.*/ \
X(ReturnRateInformationSource,                                           42762) /*!< 42762 (int FIX.5.0SP2) Identifies the source of rate information. For FX the references source to be used for the FX spot rate.*/ \
X(ReturnRateReferencePage,                                               42763) /*!< 42763 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
For FX, the reference page to the spot rate to be used for the reference FX spot rate. \
 \
When ReturnRateInformationSource(42762) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions.  \
 \
See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(ReturnRateReferencePageHeading,                                        42764) /*!< 42764 (String FIX.5.0SP2) Identifies the page heading from the rate source.*/ \
X(NoReturnRatePrices,                                                    42765) /*!< 42765 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate price repeating group.*/ \
X(ReturnRatePriceBasis,                                                  42766) /*!< 42766 (int FIX.5.0SP2) The basis of the return price.*/ \
X(ReturnRatePrice,                                                       42767) /*!< 42767 (Price FIX.5.0SP2) Specifies the price of the underlying swap asset.*/ \
X(ReturnRatePriceCurrency,                                               42768) /*!< 42768 (Currency FIX.5.0SP2) Specifies the currency of the price of the underlying swap asset. Uses ISO 4217 currency codes.*/ \
X(ReturnRatePriceType,                                                   42769) /*!< 42769 (int FIX.5.0SP2) Specifies whether the ReturnRatePrice(42767) is expressed in absolute or relative terms.*/ \
X(NoReturnRateValuationDateBusinessCenters,                              42770) /*!< 42770 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate valuation date business center repeating group.*/ \
X(ReturnRateValuationDateBusinessCenter,                                 42771) /*!< 42771 (String FIX.5.0SP2) The business center calendar used for date adjustment of the return rate valuation unadjusted or relative dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoReturnRateValuationDates,                                            42772) /*!< 42772 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate valuation date repeating group.*/ \
X(ReturnRateValuationDate,                                               42773) /*!< 42773 (LocalMktDate FIX.5.0SP2) The return rate valuation date.  Type of date is specified in ReturnRateValuationDateType(42774).*/ \
X(ReturnRateValuationDateType,                                           42774) /*!< 42774 (int FIX.5.0SP2) Specifies the type of return rate valuation date (e.g. adjusted for holidays).  */ \
X(NoSettlMethodElectionDateBusinessCenters,                              42775) /*!< 42775 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(SettlMethodElectionDateBusinessCenter,                                 42776) /*!< 42776 (String FIX.5.0SP2) The business center calendar used for date adjustment of the settlement method election unadjusted or relative date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(SettlMethodElectionDateUnadjusted,                                     42777) /*!< 42777 (LocalMktDate FIX.5.0SP2) The unadjusted settlement method election date.*/ \
X(SettlMethodElectionDateBusinessDayConvention,                          42778) /*!< 42778 (int FIX.5.0SP2) The settlement method election date adjustment business day convention. */ \
X(SettlMethodElectionDateRelativeTo,                                     42779) /*!< 42779 (int FIX.5.0SP2) Specifies the anchor date when the settlement method election date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(SettlMethodElectionDateOffsetPeriod,                                   42780) /*!< 42780 (int FIX.5.0SP2) Time unit multiplier for the relative settlement method election date offset.*/ \
X(SettlMethodElectionDateOffsetUnit,                                     42781) /*!< 42781 (String FIX.5.0SP2) Time unit associated with the relative settlement method election date offset.*/ \
X(SettlMethodElectionDateOffsetDayType,                                  42782) /*!< 42782 (int FIX.5.0SP2) Specifies the day type of the relative settlement method election date offset.*/ \
X(SettlMethodElectionDateAdjusted,                                       42783) /*!< 42783 (LocalMktDate FIX.5.0SP2) The adjusted settlement method election date.*/ \
X(StreamVersion,                                                         42784) /*!< 42784 (String FIX.5.0SP2) The stream version identifier when there have been modifications to the contract over time. Helps signal when there are embedded changes.*/ \
X(StreamVersionEffectiveDate,                                            42785) /*!< 42785 (LocalMktDate FIX.5.0SP2) The effective date of the StreamVersion(42784).*/ \
X(StreamNotionalDeterminationMethod,                                     42786) /*!< 42786 (String FIX.5.0SP2) Specifies the method for determining the floating notional value for equity swaps.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(StreamNotionalAdjustments,                                             42787) /*!< 42787 (int FIX.5.0SP2) For equity swaps this specifies the conditions that govern the adjustment to the number of units of the swap.*/ \
X(NoUnderlyingCashSettlDateBusinessCenters,                              42788) /*!< 42788 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingCashSettlDateBusinessCenter,                                 42789) /*!< 42789 (String FIX.5.0SP2) The business center calendar used for date adjustment of the cash settlement unadjusted or relative date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingCashSettlDateUnadjusted,                                     42790) /*!< 42790 (LocalMktDate FIX.5.0SP2) The unadjusted cash settlement date.*/ \
X(UnderlyingCashSettlDateBusinessDayConvention,                          42791) /*!< 42791 (int FIX.5.0SP2) The business day convention used to adjust the cash settlement provision's date.  Used only to override the business day convention defined in the UnderlyingInstrument component.*/ \
X(UnderlyingCashSettlDateRelativeTo,                                     42792) /*!< 42792 (int FIX.5.0SP2) Specifies the anchor date when the cash settlement date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingCashSettlDateOffsetPeriod,                                   42793) /*!< 42793 (int FIX.5.0SP2) Time unit multiplier for the relative cash settlement date offset.*/ \
X(UnderlyingCashSettlDateOffsetUnit,                                     42794) /*!< 42794 (String FIX.5.0SP2) Time unit associated with the relative cash settlement date offset.*/ \
X(UnderlyingCashSettlDateOffsetDayType,                                  42795) /*!< 42795 (int FIX.5.0SP2) Specifies the day type of the relative cash settlement date offset.*/ \
X(UnderlyingCashSettlDateAdjusted,                                       42796) /*!< 42796 (LocalMktDate FIX.5.0SP2) The adjusted cash settlement date.*/ \
X(UnderlyingCashSettlPriceSource,                                        42797) /*!< 42797 (String FIX.5.0SP2) The source from which the settlement price is to be obtained.  \
 \
See http://www.fpml.org/coding-scheme/settlement-price-source for values.*/ \
X(UnderlyingCashSettlPriceDefault,                                       42798) /*!< 42798 (int FIX.5.0SP2) The default election for determining settlement price.*/ \
X(NoUnderlyingDividendAccrualPaymentDateBusinessCenters,                 42799) /*!< 42799 (NumInGroup FIX.5.0SP2) Number of entries in the UnderlyingDividendAccrualPaymentDateBusinessCenterGrp.*/ \
X(UnderlyingDividendAccrualPaymentDateBusinessCenter,                    42800) /*!< 42800 (String FIX.5.0SP2) The business center calendar used for date adjustment of the  instrument's dividend accrual payment date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingDividendFloatingRateIndex,                                   42801) /*!< 42801 (String FIX.5.0SP2) The dividend accrual floating rate index.*/ \
X(UnderlyingDividendFloatingRateIndexCurvePeriod,                        42802) /*!< 42802 (int FIX.5.0SP2) Time unit multiplier for the dividend accrual floating rate index curve.*/ \
X(UnderlyingDividendFloatingRateIndexCurveUnit,                          42803) /*!< 42803 (String FIX.5.0SP2) Time unit associated with the dividend accrual floating rate index curve period.*/ \
X(UnderlyingDividendFloatingRateMultiplier,                              42804) /*!< 42804 (float FIX.5.0SP2) A rate multiplier to apply to the floating rate. The multiplier can be less than or greater than 1 (one). This should only be included if the multiplier is not equal to 1 (one) for the term of the contract.*/ \
X(UnderlyingDividendFloatingRateSpread,                                  42805) /*!< 42805 (PriceOffset FIX.5.0SP2) The basis points spread from the index specified in UnderlyingDividendFloatingRateIndex(42801).*/ \
X(UnderlyingDividendFloatingRateSpreadPositionType,                      42806) /*!< 42806 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(UnderlyingDividendFloatingRateTreatment,                               42807) /*!< 42807 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(UnderlyingDividendCapRate,                                             42808) /*!< 42808 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the floating rate. It is only required where the floating rate is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as "0.05".*/ \
X(UnderlyingDividendCapRateBuySide,                                      42809) /*!< 42809 (int FIX.5.0SP2) Reference to the buyer of the cap rate option through its trade side.*/ \
X(UnderlyingDividendCapRateSellSide,                                     42810) /*!< 42810 (int FIX.5.0SP2) Reference to the seller of the cap rate option through its trade side.*/ \
X(UnderlyingDividendFloorRate,                                           42811) /*!< 42811 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate. The rate is expressed as a decimal, e.g. 5% is represented as "0.05".*/ \
X(UnderlyingDividendFloorRateBuySide,                                    42812) /*!< 42812 (int FIX.5.0SP2) Reference to the buyer of the floor rate option through its trade side.*/ \
X(UnderlyingDividendFloorRateSellSide,                                   42813) /*!< 42813 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(UnderlyingDividendInitialRate,                                         42814) /*!< 42814 (Percentage FIX.5.0SP2) The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. The initial rate is expressed in decimal form, e.g. 5% is represented as "0.05".*/ \
X(UnderlyingDividendFinalRateRoundingDirection,                          42815) /*!< 42815 (char FIX.5.0SP2) Specifies the rounding direction of the final rate.*/ \
X(UnderlyingDividendFinalRatePrecision,                                  42816) /*!< 42816 (int FIX.5.0SP2) Specifies the rounding precision of the final rate in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(UnderlyingDividendAveragingMethod,                                     42817) /*!< 42817 (int FIX.5.0SP2) When averaging is applicable, used to specify whether a weighted or unweighted average method of calculation is to be used. */ \
X(UnderlyingDividendNegativeRateTreatment,                               42818) /*!< 42818 (int FIX.5.0SP2) The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(UnderlyingDividendAccrualPaymentDateRelativeTo,                        42819) /*!< 42819 (int FIX.5.0SP2) Specifies the anchor date when the accrual payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingDividendAccrualPaymentDateOffsetPeriod,                      42820) /*!< 42820 (int FIX.5.0SP2) Time unit multiplier for the relative accrual payment date offset.*/ \
X(UnderlyingDividendAccrualPaymentDateOffsetUnit,                        42821) /*!< 42821 (String FIX.5.0SP2) Time unit associated with the relative accrual payment date offset.*/ \
X(UnderlyingDividendAccrualPaymentDateOffsetDayType,                     42822) /*!< 42822 (int FIX.5.0SP2) Specifies the day type of the relative accrual payment date offset.*/ \
X(UnderlyingDividendAccrualPaymentDateUnadjusted,                        42823) /*!< 42823 (LocalMktDate FIX.5.0SP2) The unadjusted accrual payment date.*/ \
X(UnderlyingDividendAccrualPaymentDateBusinessDayConvention,             42824) /*!< 42824 (int FIX.5.0SP2) Accrual payment date adjustment business day convention.*/ \
X(UnderlyingDividendAccrualPaymentDateAdjusted,                          42825) /*!< 42825 (LocalMktDate FIX.5.0SP2) The adjusted accrual payment date.*/ \
X(UnderlyingDividendReinvestmentIndicator,                               42826) /*!< 42826 (Boolean FIX.5.0SP2) Indicates whether the dividend will be reinvested.*/ \
X(UnderlyingDividendEntitlementEvent,                                    42827) /*!< 42827 (int FIX.5.0SP2) Defines the contract event which the receiver of the derivative is entitled to the dividend.*/ \
X(UnderlyingDividendAmountType,                                          42828) /*!< 42828 (int FIX.5.0SP2) Indicates how the gross cash dividend amount per share is determined.*/ \
X(UnderlyingDividendUnderlierRefID,                                      42829) /*!< 42829 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in a separate instance of the UnderlyingInstrument component.*/ \
X(UnderlyingExtraordinaryDividendPartySide,                              42830) /*!< 42830 (int FIX.5.0SP2) Reference to the party through its side in the trade who makes the determination whether dividends are extraordinary in relation to normal levels.*/ \
X(UnderlyingExtraordinaryDividendAmountType,                             42831) /*!< 42831 (int FIX.5.0SP2) Indicates how the extraordinary gross cash dividend per share is determined.*/ \
X(UnderlyingExtraordinaryDividendCurrency,                               42832) /*!< 42832 (Currency FIX.5.0SP2) The currency in which the excess dividend is denominated. Uses ISO 4217 currency codes.*/ \
X(UnderlyingExtraordinaryDividendDeterminationMethod,                    42833) /*!< 42833 (String FIX.5.0SP2) Specifies the method in which the excess amount is determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(UnderlyingDividendAccrualFixedRate,                                    42834) /*!< 42834 (Percentage FIX.5.0SP2) The dividend accrual fixed rate per annum expressed as a decimal.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(UnderlyingDividendCompoundingMethod,                                   42835) /*!< 42835 (int FIX.5.0SP2) The compounding method to be used when more than one dividend period contributes to a single payment.*/ \
X(UnderlyingDividendNumOfIndexUnits,                                     42836) /*!< 42836 (int FIX.5.0SP2) The number of index units applicable to dividends.*/ \
X(UnderlyingDividendCashPercentage,                                      42837) /*!< 42837 (Percentage FIX.5.0SP2) Declared cash dividend percentage.  \
 \
A value of 5% would be represented as "0.05".*/ \
X(UnderlyingDividendCashEquivalentPercentage,                            42838) /*!< 42838 (Percentage FIX.5.0SP2) Declared cash-equivalent dividend percentage. A value of 5% would be represented as "0.05".*/ \
X(UnderlyingNonCashDividendTreatment,                                    42839) /*!< 42839 (int FIX.5.0SP2) Defines the treatment of non-cash dividends.*/ \
X(UnderlyingDividendComposition,                                         42840) /*!< 42840 (int FIX.5.0SP2) Defines how the composition of dividends is to be determined.*/ \
X(UnderlyingSpecialDividendsIndicator,                                   42841) /*!< 42841 (Boolean FIX.5.0SP2) Indicates whether special dividends are applicable.*/ \
X(UnderlyingMaterialDividendsIndicator,                                  42842) /*!< 42842 (Boolean FIX.5.0SP2) Indicates whether material non-cash dividends are applicable.*/ \
X(UnderlyingOptionsExchangeDividendsIndicator,                           42843) /*!< 42843 (Boolean FIX.5.0SP2) Indicates whether option exchange dividends are applicable.*/ \
X(UnderlyingAdditionalDividendsIndicator,                                42844) /*!< 42844 (Boolean FIX.5.0SP2) Indicates whether additional dividends are applicable.*/ \
X(UnderlyingAllDividendsIndicator,                                       42845) /*!< 42845 (Boolean FIX.5.0SP2) Represents the European Master Confirmation value of 'All Dividends' which, when applicable, signifies that, for a given Ex-Date, the daily observed share price for that day is adjusted (reduced) by the cash dividend and/or the cash value of any non-cash dividend per share (including extraordinary dividends) declared by the issuer.*/ \
X(UnderlyingDividendFXTriggerDateRelativeTo,                             42846) /*!< 42846 (int FIX.5.0SP2) Specifies the anchor date when the FX trigger date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingDividendFXTriggerDateOffsetPeriod,                           42847) /*!< 42847 (int FIX.5.0SP2) Time unit multiplier for the relative FX trigger date offset.*/ \
X(UnderlyingDividendFXTriggerDateOffsetUnit,                             42848) /*!< 42848 (String FIX.5.0SP2) Time unit associated with the relative FX trigger date offset.*/ \
X(UnderlyingDividendFXTriggerDateOffsetDayType,                          42849) /*!< 42849 (int FIX.5.0SP2) Specifies the day type of the relative FX trigger date offset.*/ \
X(UnderlyingDividendFXTriggerDateUnadjusted,                             42850) /*!< 42850 (LocalMktDate FIX.5.0SP2) The unadjusted FX trigger date.*/ \
X(UnderlyingDividendFXTriggerDateBusinessDayConvention,                  42851) /*!< 42851 (int FIX.5.0SP2) The business day convention used for the FX trigger date adjustment.*/ \
X(UnderlyingDividendFXTriggerDateAdjusted,                               42852) /*!< 42852 (LocalMktDate FIX.5.0SP2) The adjusted FX trigger date.*/ \
X(NoUnderlyingDividendFXTriggerDateBusinessCenters,                      42853) /*!< 42853 (NumInGroup FIX.5.0SP2) Number of entries in the UnderlyingDividendFXTriggerDateBusinessCenterGrp.*/ \
X(UnderlyingDividendFXTriggerDateBusinessCenter,                         42854) /*!< 42854 (String FIX.5.0SP2) The business center calendar used for date adjustment of the instrument's FX trigger date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingDividendPayments,                                          42855) /*!< 42855 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(UnderlyingDividendPaymentDate,                                         42856) /*!< 42856 (LocalMktDate FIX.5.0SP2) Specifies the date that the dividend or coupon payment is due.*/ \
X(UnderlyingDividendPaymentAmount,                                       42857) /*!< 42857 (Amt FIX.5.0SP2) The amount of the dividend or coupon payment.*/ \
X(UnderlyingDividendPaymentCurrency,                                     42858) /*!< 42858 (Currency FIX.5.0SP2) Specifies the currency the UnderlyingDividendPaymentAmount(42857) is denominated in.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingDividendAccruedInterest,                                     42859) /*!< 42859 (Amt FIX.5.0SP2) Accrued interest on the dividend or coupon payment.*/ \
X(UnderlyingDividendPayoutRatio,                                         42860) /*!< 42860 (float FIX.5.0SP2) Specifies the actual dividend payout ratio associated with the equity or bond underlier.*/ \
X(UnderlyingDividendPayoutConditions,                                    42861) /*!< 42861 (String FIX.5.0SP2) Specifies the dividend payout conditions that will be applied in the case where the actual ratio is not known, typically because of regulatory or legal uncertainties. */ \
X(NoUnderlyingDividendPeriods,                                           42862) /*!< 42862 (NumInGroup FIX.5.0SP2) Number of entries in the UnderlyingDividendPeriodGrp component.*/ \
X(UnderlyingDividendPeriodSequence,                                      42863) /*!< 42863 (int FIX.5.0SP2) Defines the ordinal dividend period. E.g. 1 = First period, 2 = Second period, etc.*/ \
X(UnderlyingDividendPeriodStartDateUnadjusted,                           42864) /*!< 42864 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the dividend period will begin.*/ \
X(UnderlyingDividendPeriodEndDateUnadjusted,                             42865) /*!< 42865 (LocalMktDate FIX.5.0SP2) The unadjusted date on which the dividend period will end.*/ \
X(UnderlyingDividendPeriodUnderlierRefID,                                42866) /*!< 42866 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(UnderlyingDividendPeriodStrikePrice,                                   42867) /*!< 42867 (Price FIX.5.0SP2) Specifies the fixed strike price of the dividend period.*/ \
X(UnderlyingDividendPeriodBusinessDayConvention,                         42868) /*!< 42868 (int FIX.5.0SP2) The dividend period dates business day convention.*/ \
X(UnderlyingDividendPeriodValuationDateUnadjusted,                       42869) /*!< 42869 (LocalMktDate FIX.5.0SP2) The unadjusted dividend period valuation date.*/ \
X(UnderlyingDividendPeriodValuationDateRelativeTo,                       42870) /*!< 42870 (int FIX.5.0SP2) Specifies the anchor date when the dividend period valuation date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingDividendPeriodValuationDateOffsetPeriod,                     42871) /*!< 42871 (int FIX.5.0SP2) Time unit multiplier for the relative dividend period valuation date offset.*/ \
X(UnderlyingDividendPeriodValuationDateOffsetUnit,                       42872) /*!< 42872 (String FIX.5.0SP2) Time unit associated with the relative dividend period valuation date offset.*/ \
X(UnderlyingDividendPeriodValuationDateOffsetDayType,                    42873) /*!< 42873 (int FIX.5.0SP2) Specifies the day type of the relative dividend period valuation date offset.*/ \
X(UnderlyingDividendPeriodValuationDateAdjusted,                         42874) /*!< 42874 (LocalMktDate FIX.5.0SP2) The adjusted dividend period valuation date.*/ \
X(UnderlyingDividendPeriodPaymentDateUnadjusted,                         42875) /*!< 42875 (LocalMktDate FIX.5.0SP2) The unadjusted dividend period payment date.*/ \
X(UnderlyingDividendPeriodPaymentDateRelativeTo,                         42876) /*!< 42876 (int FIX.5.0SP2) Specifies the anchor date when the dividend period payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingDividendPeriodPaymentDateOffsetPeriod,                       42877) /*!< 42877 (int FIX.5.0SP2) Time unit multiplier for the relative dividend period payment date offset.*/ \
X(UnderlyingDividendPeriodPaymentDateOffsetUnit,                         42878) /*!< 42878 (String FIX.5.0SP2) Time unit associated with the relative dividend period payment date offset.*/ \
X(UnderlyingDividendPeriodPaymentDateOffsetDayType,                      42879) /*!< 42879 (int FIX.5.0SP2) Specifies the day type of the relative dividend period payment date offset.*/ \
X(UnderlyingDividendPeriodPaymentDateAdjusted,                           42880) /*!< 42880 (LocalMktDate FIX.5.0SP2) The adjusted dividend period payment date.*/ \
X(UnderlyingDividendPeriodXID,                                           42881) /*!< 42881 (XID FIX.5.0SP2) Identifier for linking this stream dividend period to an underlier through an instance of RelatedInstrumentGrp.*/ \
X(NoUnderlyingDividendPeriodBusinessCenters,                             42882) /*!< 42882 (NumInGroup FIX.5.0SP2) Number of entries in UnderlyingDividendPeriodBusinessCenterGrp.*/ \
X(UnderlyingDividendPeriodBusinessCenter,                                42883) /*!< 42883 (String FIX.5.0SP2) The business center calendar used for date adjustment of the instrument's dividend period date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingExtraordinaryEvents,                                       42884) /*!< 42884 (NumInGroup FIX.5.0SP2) Number of extraordinary events in the repeating group.*/ \
X(UnderlyingExtraordinaryEventType,                                      42885) /*!< 42885 (String FIX.5.0SP2) Identifies the type of extraordinary or disruptive event applicable to UnderlyingExtraordinaryEventType(42885). \
 \
See http://www.fixtradingcommunity.org/codelists#Extraordinary_Event_Type for code list of extraordinary event types and values.*/ \
X(UnderlyingExtraordinaryEventValue,                                     42886) /*!< 42886 (String FIX.5.0SP2) The extraordinary or disruptive event value appropriate to UnderlyingExtraordinaryEventType(42885). \
 \
See http://www.fixtradingcommunity.org/codelists#Extraordinary_Event_Type for code list of extraordinary event types and values.*/ \
X(UnderlyingSettlMethodElectingPartySide,                                42887) /*!< 42887 (int FIX.5.0SP2) Side value of the party electing the settlement method.*/ \
X(UnderlyingMakeWholeDate,                                               42888) /*!< 42888 (LocalMktDate FIX.5.0SP2) The date through which the option cannot be exercised without penalty.*/ \
X(UnderlyingMakeWholeAmount,                                             42889) /*!< 42889 (Amt FIX.5.0SP2) Amount to be paid by the buyer of the option if the option is exercised prior to the UnderlyingMakeWholeDate(42888).*/ \
X(UnderlyingMakeWholeBenchmarkCurveName,                                 42890) /*!< 42890 (String FIX.5.0SP2) Identifies the benchmark floating rate index.*/ \
X(UnderlyingMakeWholeBenchmarkCurvePoint,                                42891) /*!< 42891 (String FIX.5.0SP2) The point on the floating rate index curve.  \
 \
Sample values: \
 \
M = combination of a number between 1-12 and an "M" for month, e.g. 3M \
 \
Y = combination of number between 1-100 and a "Y" for year, e.g. 10Y \
 \
10Y-OLD = see above, then add "-OLD" when appropriate \
 \
INTERPOLATED = the point is mathematically derived \
 \
2/2031 5 3/8 = the point is stated via a combination of maturity month / year and coupon.*/ \
X(UnderlyingMakeWholeRecallSpread,                                       42892) /*!< 42892 (PriceOffset FIX.5.0SP2) Spread over the floating rate index.*/ \
X(UnderlyingMakeWholeBenchmarkQuote,                                     42893) /*!< 42893 (int FIX.5.0SP2) The quote side of the benchmark to be used for calculating the "make whole" amount.*/ \
X(UnderlyingMakeWholeInterpolationMethod,                                42894) /*!< 42894 (int FIX.5.0SP2) The method used when calculating the "make whole" amount. The most common is linear method.*/ \
X(UnderlyingPaymentStreamCashSettlIndicator,                             42895) /*!< 42895 (Boolean FIX.5.0SP2) Indicates whether cash settlement is applicable.*/ \
X(UnderlyingPaymentStreamCompoundingXIDRef,                              42896) /*!< 42896 (XIDREF FIX.5.0SP2) Reference to the stream which details the compounding fixed or floating rate.*/ \
X(UnderlyingPaymentStreamCompoundingSpread,                              42897) /*!< 42897 (PriceOffset FIX.5.0SP2) The spread to be used for compounding. Used in scenarios where the interest payment is based on a compounding formula that uses a compounding spread in addition to the regular spread.*/ \
X(UnderlyingPaymentStreamInterpolationMethod,                            42898) /*!< 42898 (int FIX.5.0SP2) The method used when calculating the index rate from multiple points on the curve. The most common is linear method.*/ \
X(UnderlyingPaymentStreamInterpolationPeriod,                            42899) /*!< 42899 (int FIX.5.0SP2) Defines applicable periods for interpolation.*/ \
X(UnderlyingPaymentStreamCompoundingFixedRate,                           42900) /*!< 42900 (float FIX.5.0SP2) The compounding fixed rate applicable to the payment stream.*/ \
X(NoUnderlyingPaymentStreamCompoundingDates,                             42901) /*!< 42901 (NumInGroup FIX.5.0SP2) Number of dates in the repeating group.*/ \
X(UnderlyingPaymentStreamCompoundingDate,                                42902) /*!< 42902 (LocalMktDate FIX.5.0SP2) The compounding date.  Type of date is specified in UnderlyingPaymentStreamCompoundingDateType(42903).*/ \
X(UnderlyingPaymentStreamCompoundingDateType,                            42903) /*!< 42903 (int FIX.5.0SP2) Specifies the type of payment compounding date (e.g. adjusted for holidays).  */ \
X(UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention,          42904) /*!< 42904 (int FIX.5.0SP2) The compounding dates business day convention.*/ \
X(UnderlyingPaymentStreamCompoundingDatesRelativeTo,                     42905) /*!< 42905 (int FIX.5.0SP2) Specifies the anchor date when the compounding dates are relative to an anchor  date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamCompoundingDatesOffsetPeriod,                   42906) /*!< 42906 (int FIX.5.0SP2) Time unit multiplier for the relative compounding date offset.*/ \
X(UnderlyingPaymentStreamCompoundingDatesOffsetUnit,                     42907) /*!< 42907 (String FIX.5.0SP2) Time unit associated with the relative compounding date offset.*/ \
X(UnderlyingPaymentStreamCompoundingDatesOffsetDayType,                  42908) /*!< 42908 (int FIX.5.0SP2) Specifies the day type of the relative compounding date offset.*/ \
X(UnderlyingPaymentStreamCompoundingPeriodSkip,                          42909) /*!< 42909 (int FIX.5.0SP2) The number of periods in the "RelativeTo" schedule that are between each date in the compounding schedule. A skip of 2 would mean that compounding dates are relative to every second date in the "RelativeTo" schedule. If present this should have a value greater than 1.*/ \
X(UnderlyingPaymentStreamCompoundingFrequencyPeriod,                     42910) /*!< 42910 (int FIX.5.0SP2) Time unit multiplier for the frequency at which compounding dates occur. */ \
X(UnderlyingPaymentStreamCompoundingFrequencyUnit,                       42911) /*!< 42911 (String FIX.5.0SP2) Time unit associated with the frequency at which compounding dates occur.*/ \
X(UnderlyingPaymentStreamCompoundingRollConvention,                      42912) /*!< 42912 (String FIX.5.0SP2) The convention for determining the sequence of compounding dates. It is used in conjunction with a specified frequency. \
 \
*/ \
X(UnderlyingPaymentStreamBoundsFirstDateUnadjusted,                      42913) /*!< 42913 (LocalMktDate FIX.5.0SP2) The unadjusted first date of the compounding schedule. This can be used to restrict the range of dates when they are relative.*/ \
X(UnderlyingPaymentStreamBoundsLastDateUnadjusted,                       42914) /*!< 42914 (LocalMktDate FIX.5.0SP2) The unadjusted last date of the compounding schedule. This can be used to restrict the range of dates when they are relative.*/ \
X(NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters,              42915) /*!< 42915 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingPaymentStreamCompoundingDatesBusinessCenter,                 42916) /*!< 42916 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stream compounding dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentStreamCompoundingEndDateUnadjusted,                   42917) /*!< 42917 (LocalMktDate FIX.5.0SP2) The unadjusted compounding end date.*/ \
X(UnderlyingPaymentStreamCompoundingEndDateRelativeTo,                   42918) /*!< 42918 (int FIX.5.0SP2) Specifies the anchor date when the compounding end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod,                 42919) /*!< 42919 (int FIX.5.0SP2) Time unit multiplier for the relative compounding end date offset.*/ \
X(UnderlyingPaymentStreamCompoundingEndDateOffsetUnit,                   42920) /*!< 42920 (String FIX.5.0SP2) Time unit associated with the relative compounding end date offset.*/ \
X(UnderlyingPaymentStreamCompoundingEndDateOffsetDayType,                42921) /*!< 42921 (int FIX.5.0SP2) Specifies the day type of the relative compounding end date offset.*/ \
X(UnderlyingPaymentStreamCompoundingEndDateAdjusted,                     42922) /*!< 42922 (LocalMktDate FIX.5.0SP2) The adjusted compounding end date.*/ \
X(UnderlyingPaymentStreamCompoundingRateIndex,                           42923) /*!< 42923 (String FIX.5.0SP2) The payment stream's compounding floating rate index.*/ \
X(UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod,                42924) /*!< 42924 (int FIX.5.0SP2) Time unit multiplier for the payment stream's compounding floating rate index curve period.*/ \
X(UnderlyingPaymentStreamCompoundingRateIndexCurveUnit,                  42925) /*!< 42925 (String FIX.5.0SP2) Time unit associated with the payment stream's compounding floating rate index curve period. */ \
X(UnderlyingPaymentStreamCompoundingRateMultiplier,                      42926) /*!< 42926 (float FIX.5.0SP2) A rate multiplier to apply to the compounding floating rate. The multiplier can be less than or greater than 1 (one). This should only be included if the multiplier is not equal to 1 (one) for the term of the stream.*/ \
X(UnderlyingPaymentStreamCompoundingRateSpread,                          42927) /*!< 42927 (PriceOffset FIX.5.0SP2) The basis points spread from the index specified in UnderlyingPaymentStreamCompoundingRateIndex(42923).*/ \
X(UnderlyingPaymentStreamCompoundingRateSpreadPositionType,              42928) /*!< 42928 (int FIX.5.0SP2) Identifies whether the rate spread is applied to a long or short position.*/ \
X(UnderlyingPaymentStreamCompoundingRateTreatment,                       42929) /*!< 42929 (int FIX.5.0SP2) Specifies the yield calculation treatment for the index.*/ \
X(UnderlyingPaymentStreamCompoundingCapRate,                             42930) /*!< 42930 (Percentage FIX.5.0SP2) The cap rate, if any, which applies to the compounding floating rate. It is only required where the compounding floating rate on a swap stream is capped at a certain level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as "0.05".*/ \
X(UnderlyingPaymentStreamCompoundingCapRateBuySide,                      42931) /*!< 42931 (int FIX.5.0SP2) Reference to the buyer of the compounding cap rate option through its trade side.*/ \
X(UnderlyingPaymentStreamCompoundingCapRateSellSide,                     42932) /*!< 42932 (int FIX.5.0SP2) Reference to the seller of the compounding cap rate option through its trade side.*/ \
X(UnderlyingPaymentStreamCompoundingFloorRate,                           42933) /*!< 42933 (Percentage FIX.5.0SP2) The floor rate, if any, which applies to the compounding floating rate. The floor rate (strike) is only required where the compounding floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate. The rate is expressed as a decimal, e.g. 5% is represented as "0.05".*/ \
X(UnderlyingPaymentStreamCompoundingFloorRateBuySide,                    42934) /*!< 42934 (int FIX.5.0SP2) Reference to the buyer of the compounding floor rate option through its trade side.*/ \
X(UnderlyingPaymentStreamCompoundingFloorRateSellSide,                   42935) /*!< 42935 (int FIX.5.0SP2) Reference to the seller of the floor rate option through its trade side.*/ \
X(UnderlyingPaymentStreamCompoundingInitialRate,                         42936) /*!< 42936 (Percentage FIX.5.0SP2) The initial compounding floating rate reset agreed between the principal parties involved in the trade. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. The initial rate is expressed in decimal form, e.g. 5% is represented as "0.05".*/ \
X(UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection,          42937) /*!< 42937 (char FIX.5.0SP2) Specifies the rounding direction for the compounding floating rate.*/ \
X(UnderlyingPaymentStreamCompoundingFinalRatePrecision,                  42938) /*!< 42938 (int FIX.5.0SP2) Specifies the compounding floating rate rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7.*/ \
X(UnderlyingPaymentStreamCompoundingAveragingMethod,                     42939) /*!< 42939 (int FIX.5.0SP2) Specifies the averaging method when compounding floating rate averaging is applicable (e.g. weighted or unweighted). */ \
X(UnderlyingPaymentStreamCompoundingNegativeRateTreatment,               42940) /*!< 42940 (int FIX.5.0SP2) Specifies the method for calculating payment obligations when a compounding floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).*/ \
X(UnderlyingPaymentStreamCompoundingStartDateUnadjusted,                 42941) /*!< 42941 (LocalMktDate FIX.5.0SP2) The unadjusted compounding start date.*/ \
X(UnderlyingPaymentStreamCompoundingStartDateRelativeTo,                 42942) /*!< 42942 (int FIX.5.0SP2) Specifies the anchor date when the compounding start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod,               42943) /*!< 42943 (int FIX.5.0SP2) Time unit multiplier for the relative compounding start date offset.*/ \
X(UnderlyingPaymentStreamCompoundingStartDateOffsetUnit,                 42944) /*!< 42944 (String FIX.5.0SP2) Time unit associated with the relative compounding start date offset.*/ \
X(UnderlyingPaymentStreamCompoundingStartDateOffsetDayType,              42945) /*!< 42945 (int FIX.5.0SP2) Specifies the day type of the relative compounding start date offset.*/ \
X(UnderlyingPaymentStreamCompoundingStartDateAdjusted,                   42946) /*!< 42946 (LocalMktDate FIX.5.0SP2) The adjusted compounding start date.*/ \
X(UnderlyingPaymentStreamFormulaImageLength,                             42947) /*!< 42947 (Length FIX.5.0SP2) Length in bytes of the UnderlyingPaymentStreamFormulaImage(42948) field.*/ \
X(UnderlyingPaymentStreamFormulaImage,                                   42948) /*!< 42948 (data FIX.5.0SP2) Image of the formula image when represented through an encoded clip in base64Binary.*/ \
X(UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted,                42949) /*!< 42949 (LocalMktDate FIX.5.0SP2) The unadjusted final price payment date.*/ \
X(UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo,                42950) /*!< 42950 (int FIX.5.0SP2) Specifies the anchor date when the final price payment date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod,              42951) /*!< 42951 (int FIX.5.0SP2) Time unit multiplier for the relative final price payment date offset.*/ \
X(UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit,                42952) /*!< 42952 (String FIX.5.0SP2) Time unit associated with the relative final price payment date offset.*/ \
X(UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType,             42953) /*!< 42953 (int FIX.5.0SP2) Specifies the day type of the relative final price payment date offset.*/ \
X(UnderlyingPaymentStreamFinalPricePaymentDateAdjusted,                  42954) /*!< 42954 (LocalMktDate FIX.5.0SP2) The adjusted final price payment date.*/ \
X(NoUnderlyingPaymentStreamFixingDates,                                  42955) /*!< 42955 (NumInGroup FIX.5.0SP2) Number of fixing dates in the repeating group.*/ \
X(UnderlyingPaymentStreamFixingDate,                                     42956) /*!< 42956 (LocalMktDate FIX.5.0SP2) The fixing date.  Type of date is specified in UnderlyingPaymentStreamFixingDateType(42957).*/ \
X(UnderlyingPaymentStreamFixingDateType,                                 42957) /*!< 42957 (int FIX.5.0SP2) Specifies the type of fixing date (e.g. adjusted for holidays).  */ \
X(UnderlyingPaymentStreamFirstObservationDateUnadjusted,                 42958) /*!< 42958 (LocalMktDate FIX.5.0SP2) The unadjusted initial price observation date.*/ \
X(UnderlyingPaymentStreamFirstObservationDateRelativeTo,                 42959) /*!< 42959 (int FIX.5.0SP2) Specifies the anchor date when the initial price observation date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStreamFirstObservationDateOffsetDayType,              42960) /*!< 42960 (int FIX.5.0SP2) Specifies the day type of the initial price observation date offset.*/ \
X(UnderlyingPaymentStreamFirstObservationDateAdjusted,                   42961) /*!< 42961 (LocalMktDate FIX.5.0SP2) The adjusted initial price observation date.*/ \
X(UnderlyingPaymentStreamUnderlierRefID,                                 42962) /*!< 42962 (String FIX.5.0SP2) References the dividend underlier through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(UnderlyingReturnRateNotionalReset,                                     42963) /*!< 42963 (Boolean FIX.5.0SP2) Indicates whether the term "Equity Notional Reset" as defined in the ISDA 2002 Equity Derivatives Definitions is applicable ("Y") or not.*/ \
X(UnderlyingPaymentStreamLinkInitialLevel,                               42964) /*!< 42964 (Price FIX.5.0SP2) Price level at which the correlation or variance swap contract will strike.*/ \
X(UnderlyingPaymentStreamLinkClosingLevelIndicator,                      42965) /*!< 42965 (Boolean FIX.5.0SP2) Indicates whether the correlation or variance swap contract will ("Y") strike off the closing level of the default exchange traded contract or not.*/ \
X(UnderlyingPaymentStreamLinkExpiringLevelIndicator,                     42966) /*!< 42966 (Boolean FIX.5.0SP2) Indicates whether the correlation or variance swap contract will ("Y") strike off the expiring level of the default exchange traded contract or not.*/ \
X(UnderlyingPaymentStreamLinkEstimatedTradingDays,                       42967) /*!< 42967 (int FIX.5.0SP2) The expected number of trading days in the variance or correlation swap stream.*/ \
X(UnderlyingPaymentStreamLinkStrikePrice,                                42968) /*!< 42968 (Price FIX.5.0SP2) The strike price of a correlation or variance swap stream.*/ \
X(UnderlyingPaymentStreamLinkStrikePriceType,                            42969) /*!< 42969 (int FIX.5.0SP2) For a variance swap specifies how UnderlyingPaymentStreamLinkStrikePrice(42968) is expressed.*/ \
X(UnderlyingPaymentStreamLinkMaximumBoundary,                            42970) /*!< 42970 (float FIX.5.0SP2) Specifies the maximum or upper boundary for variance or strike determination. \
 \
For a variation swap stream all observations above this price level will be excluded from the variance calculation.  \
 \
For a correlation swap stream the maximum boundary is a percentage of the strike price. \
 \
*/ \
X(UnderlyingPaymentStreamLinkMinimumBoundary,                            42971) /*!< 42971 (float FIX.5.0SP2) Specifies the minimum or lower boundary for variance or strike determination. \
 \
For a variation swap stream all observations below this price level will be excluded from the variance calculation. \
 \
For a correlation swap stream the minimum boundary is a percentage of the strike price. \
 \
*/ \
X(UnderlyingPaymentStreamLinkNumberOfDataSeries,                         42972) /*!< 42972 (int FIX.5.0SP2) Number of data series for a correlation swap.  Normal market practice is that correlation data sets are drawn from geographic market areas, such as America, Europe and Asia Pacific.  Each of these geographic areas will have its own data series to avoid contagion.*/ \
X(UnderlyingPaymentStreamVarianceUnadjustedCap,                          42973) /*!< 42973 (float FIX.5.0SP2) Indicates the scaling factor to be multiplied by the variance strike price thereby making variance cap applicable.*/ \
X(UnderlyingPaymentStreamRealizedVarianceMethod,                         42974) /*!< 42974 (int FIX.5.0SP2) Indicates which price to use to satisfy the boundary condition.*/ \
X(UnderlyingPaymentStreamDaysAdjustmentIndicator,                        42975) /*!< 42975 (Boolean FIX.5.0SP2) Indicates whether the contract specifies that the notional should be scaled by the number of days in range divided by the estimate trading days or not. The number of "days in range" refers to the number of returns that contribute to the realized volatility.*/ \
X(UnderlyingPaymentStreamNearestExchangeContractRefID,                   42976) /*!< 42976 (String FIX.5.0SP2) References a contract listed on an exchange through the instrument's UnderlyingSecurityID(309) which must be fully specified in an instance of the UnderlyingInstrument component.*/ \
X(UnderlyingPaymentStreamVegaNotionalAmount,                             42977) /*!< 42977 (float FIX.5.0SP2) Vega Notional represents the approximate gain/loss at maturity for a 1% difference between RVol (realised volatility) and KVol (strike volatility). It does not necessarily represent the Vega risk of the trade.*/ \
X(UnderlyingPaymentStreamFormulaCurrency,                                42978) /*!< 42978 (Currency FIX.5.0SP2) The currency in which the formula amount is denominated.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod,             42979) /*!< 42979 (String FIX.5.0SP2) Specifies the method according to which the formula amount currency is determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(UnderlyingPaymentStreamFormulaReferenceAmount,                         42980) /*!< 42980 (int FIX.5.0SP2) Specifies the reference amount when this term either corresponds to the standard ISDA Definition (either the 2002 Equity Definition for the Equity Amount, or the 2000 Definition for the Interest Amount), or refers to a term defined elsewhere in the swap document. \
 \
See http://www.fixtradingcommunity.org/codelists#Payment_Amount_Relative_To for code list of reference amounts.*/ \
X(NoUnderlyingPaymentStreamFormulas,                                     42981) /*!< 42981 (NumInGroup FIX.5.0SP2) Number of formulas in the repeating group.*/ \
X(UnderlyingPaymentStreamFormula,                                        42982) /*!< 42982 (XMLData FIX.5.0SP2) Contains an XML representation of the formula. Defined for flexibility in choice of language (MathML, OpenMath or text).*/ \
X(UnderlyingPaymentStreamFormulaDesc,                                    42983) /*!< 42983 (String FIX.5.0SP2) A description of the math formula in UnderlyingPaymentStreamFormula(42982).*/ \
X(UnderlyingPaymentStubEndDateUnadjusted,                                42984) /*!< 42984 (LocalMktDate FIX.5.0SP2) The unadjusted stub end date.*/ \
X(UnderlyingPaymentStubEndDateBusinessDayConvention,                     42985) /*!< 42985 (int FIX.5.0SP2) The stub end date business day convention.*/ \
X(UnderlyingPaymentStubEndDateRelativeTo,                                42986) /*!< 42986 (int FIX.5.0SP2) Specifies the anchor date when the stub end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStubEndDateOffsetPeriod,                              42987) /*!< 42987 (int FIX.5.0SP2) Time unit multiplier for the relative stub end date offset.*/ \
X(UnderlyingPaymentStubEndDateOffsetUnit,                                42988) /*!< 42988 (String FIX.5.0SP2) Time unit associated with the relative stub end date offset.*/ \
X(UnderlyingPaymentStubEndDateOffsetDayType,                             42989) /*!< 42989 (int FIX.5.0SP2) Specifies the day type of the relative stub end date offset.*/ \
X(UnderlyingPaymentStubEndDateAdjusted,                                  42990) /*!< 42990 (LocalMktDate FIX.5.0SP2) The adjusted stub end date.*/ \
X(NoUnderlyingPaymentStubEndDateBusinessCenters,                         42991) /*!< 42991 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingPaymentStubEndDateBusinessCenter,                            42992) /*!< 42992 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stub end date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingPaymentStubStartDateUnadjusted,                              42993) /*!< 42993 (LocalMktDate FIX.5.0SP2) The unadjusted stub start date.*/ \
X(UnderlyingPaymentStubStartDateBusinessDayConvention,                   42994) /*!< 42994 (int FIX.5.0SP2) The stub start date business day convention.*/ \
X(UnderlyingPaymentStubStartDateRelativeTo,                              42995) /*!< 42995 (int FIX.5.0SP2) Specifies the anchor date when the stub start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingPaymentStubStartDateOffsetPeriod,                            42996) /*!< 42996 (int FIX.5.0SP2) Time unit multiplier for the relative stub start date offset.*/ \
X(UnderlyingPaymentStubStartDateOffsetUnit,                              42997) /*!< 42997 (String FIX.5.0SP2) Time unit associated with the relative stub start date offset.*/ \
X(UnderlyingPaymentStubStartDateOffsetDayType,                           42998) /*!< 42998 (int FIX.5.0SP2) Specifies the day type of the relative stub start date offset.*/ \
X(UnderlyingPaymentStubStartDateAdjusted,                                42999) /*!< 42999 (LocalMktDate FIX.5.0SP2) The adjusted stub start date.*/ \
X(NoUnderlyingPaymentStubStartDateBusinessCenters,                       43000) /*!< 43000 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingPaymentStubStartDateBusinessCenter,                          43001) /*!< 43001 (String FIX.5.0SP2) The business center calendar used for date adjustment of the payment stub start date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingProvisionBreakFeeElection,                                   43002) /*!< 43002 (int FIX.5.0SP2) Type of fee elected for the break provision. */ \
X(UnderlyingProvisionBreakFeeRate,                                       43003) /*!< 43003 (Percentage FIX.5.0SP2) Break fee election rate when the break fee is proportional to the notional.  A fee rate of 5% would be represented as "0.05".*/ \
X(UnderlyingRateSpreadInitialValue,                                      43004) /*!< 43004 (float FIX.5.0SP2) Specifies the initial rate spread for a basket underlier.*/ \
X(NoUnderlyingRateSpreadSteps,                                           43005) /*!< 43005 (NumInGroup FIX.5.0SP2) Number of entries in the repeating group.*/ \
X(UnderlyingRateSpreadStepDate,                                          43006) /*!< 43006 (LocalMktDate FIX.5.0SP2) The date that the rate spread step takes affect.*/ \
X(UnderlyingRateSpreadStepValue,                                         43007) /*!< 43007 (float FIX.5.0SP2) The the value of the new rate spread as of the UnderlyingRateSpreadStepDate(43006).*/ \
X(NoUnderlyingReturnRateDates,                                           43008) /*!< 43008 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate date repeating group.*/ \
X(UnderlyingReturnRateDateMode,                                          43009) /*!< 43009 (int FIX.5.0SP2) Specifies the valuation type applicable to the return rate date.*/ \
X(UnderlyingReturnRateValuationDateRelativeTo,                           43010) /*!< 43010 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation dates are relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingReturnRateValuationDateOffsetPeriod,                         43011) /*!< 43011 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation date offset.*/ \
X(UnderlyingReturnRateValuationDateOffsetUnit,                           43012) /*!< 43012 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation date offset.*/ \
X(UnderlyingReturnRateValuationDateOffsetDayType,                        43013) /*!< 43013 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation date offset.*/ \
X(UnderlyingReturnRateValuationStartDateUnadjusted,                      43014) /*!< 43014 (LocalMktDate FIX.5.0SP2) The unadjusted start date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(UnderlyingReturnRateValuationStartDateRelativeTo,                      43015) /*!< 43015 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation start date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingReturnRateValuationStartDateOffsetPeriod,                    43016) /*!< 43016 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation start date offset.*/ \
X(UnderlyingReturnRateValuationStartDateOffsetUnit,                      43017) /*!< 43017 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation start date offset.*/ \
X(UnderlyingReturnRateValuationStartDateOffsetDayType,                   43018) /*!< 43018 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation start date offset.*/ \
X(UnderlyingReturnRateValuationStartDateAdjusted,                        43019) /*!< 43019 (LocalMktDate FIX.5.0SP2) The adjusted start date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(UnderlyingReturnRateValuationEndDateUnadjusted,                        43020) /*!< 43020 (LocalMktDate FIX.5.0SP2) The unadjusted end date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(UnderlyingReturnRateValuationEndDateRelativeTo,                        43021) /*!< 43021 (int FIX.5.0SP2) Specifies the anchor date when the return rate valuation end date is relative to an anchor date. \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingReturnRateValuationEndDateOffsetPeriod,                      43022) /*!< 43022 (int FIX.5.0SP2) Time unit multiplier for the relative return rate valuation end date offset.*/ \
X(UnderlyingReturnRateValuationEndDateOffsetUnit,                        43023) /*!< 43023 (String FIX.5.0SP2) Time unit associated with the relative return rate valuation end date offset.*/ \
X(UnderlyingReturnRateValuationEndDateOffsetDayType,                     43024) /*!< 43024 (int FIX.5.0SP2) Specifies the day type of the relative return rate valuation end date offset.*/ \
X(UnderlyingReturnRateValuationEndDateAdjusted,                          43025) /*!< 43025 (LocalMktDate FIX.5.0SP2) The adjusted end date for return rate valuation. This can be used to restrict the range of dates when they are relative.*/ \
X(UnderlyingReturnRateValuationFrequencyPeriod,                          43026) /*!< 43026 (int FIX.5.0SP2) Time unit multiplier for the frequency at which return rate valuation dates occur. */ \
X(UnderlyingReturnRateValuationFrequencyUnit,                            43027) /*!< 43027 (String FIX.5.0SP2) Time unit associated with the frequency at which return rate valuation dates occur.*/ \
X(UnderlyingReturnRateValuationFrequencyRollConvention,                  43028) /*!< 43028 (String FIX.5.0SP2) The convention for determining the sequence of return rate valuation dates. It is used in conjunction with a specified frequency.*/ \
X(UnderlyingReturnRateValuationDateBusinessDayConvention,                43029) /*!< 43029 (int FIX.5.0SP2) The return rate valuation dates business day convention.*/ \
X(NoUnderlyingReturnRateFXConversions,                                   43030) /*!< 43030 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate FX conversion repeating group. */ \
X(UnderlyingReturnRateFXCurrencySymbol,                                  43031) /*!< 43031 (String FIX.5.0SP2) Specifies the currency pair for the FX conversion expressed using the CCY1/CCY2 convention.  Uses ISO 4217 currency codes.*/ \
X(UnderlyingReturnRateFXRate,                                            43032) /*!< 43032 (float FIX.5.0SP2) The rate of exchange between the two currencies specified in UnderlyingReturnRateFXCurrencySymbol(43031).*/ \
X(UnderlyingReturnRateFXRateCalc,                                        43033) /*!< 43033 (char FIX.5.0SP2) Specifies whether UnderlyingReturnRateFXRate(43032) should be multiplied or divided.*/ \
X(NoUnderlyingReturnRates,                                               43034) /*!< 43034 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate repeating group.*/ \
X(UnderlyingReturnRatePriceSequence,                                     43035) /*!< 43035 (int FIX.5.0SP2) Specifies the type of price sequence of the return rate.*/ \
X(UnderlyingReturnRateCommissionBasis,                                   43036) /*!< 43036 (char FIX.5.0SP2) Specifies the basis or unit used to calculate the commission.*/ \
X(UnderlyingReturnRateCommissionAmount,                                  43037) /*!< 43037 (Amt FIX.5.0SP2) The commission amount.*/ \
X(UnderlyingReturnRateCommissionCurrency,                                43038) /*!< 43038 (Currency FIX.5.0SP2) Specifies the currency the commission amount is denominated in. Uses ISO 4217 currency codes.*/ \
X(UnderlyingReturnRateTotalCommissionPerTrade,                           43039) /*!< 43039 (Amt FIX.5.0SP2) The total commission per trade.*/ \
X(UnderlyingReturnRateDeterminationMethod,                               43040) /*!< 43040 (String FIX.5.0SP2) Specifies the method by which the underlier prices are determined.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(UnderlyingReturnRateAmountRelativeTo,                                  43041) /*!< 43041 (int FIX.5.0SP2) Specifies the reference amount when the return rate amount is relative to another amount in the trade. \
 \
See http://www.fixtradingcommunity.org/codelists#Payment_Amount_Relative_To for code list of relative amounts.*/ \
X(UnderlyingReturnRateQuoteMeasureType,                                  43042) /*!< 43042 (String FIX.5.0SP2) Specifies the type of the measure applied to the return rate's asset, e.g. valuation, sensitivity risk. This could be an NPV, a cash flow, a clean price, etc.  \
 \
See http://www.fpml.org/coding-scheme/asset-measure for values.*/ \
X(UnderlyingReturnRateQuoteUnits,                                        43043) /*!< 43043 (String FIX.5.0SP2) Specifies the units that the measure is expressed in. If not specified, the default is a price/value in currency units.  \
 \
See http://www.fpml.org/coding-scheme/price-quote-units for values.*/ \
X(UnderlyingReturnRateQuoteMethod,                                       43044) /*!< 43044 (int FIX.5.0SP2) Specifies the type of quote used to determine the return rate of the swap.*/ \
X(UnderlyingReturnRateQuoteCurrency,                                     43045) /*!< 43045 (Currency FIX.5.0SP2) Specifies the currency the return rate quote is denominated in.  Uses ISO 4217 Currency Code.*/ \
X(UnderlyingReturnRateQuoteCurrencyType,                                 43046) /*!< 43046 (String FIX.5.0SP2) Specifies the type of currency, e.g. settlement currency, base currency, etc., that the quote is reported in.  \
 \
See http://www.fpml.org/coding-scheme/reporting-currency-type for values.*/ \
X(UnderlyingReturnRateQuoteTimeType,                                     43047) /*!< 43047 (int FIX.5.0SP2) Specifies how or the timing when the quote is to be obtained.*/ \
X(UnderlyingReturnRateQuoteTime,                                         43048) /*!< 43048 (LocalMktDate FIX.5.0SP2) The time when the quote is to be generated. */ \
X(UnderlyingReturnRateQuoteDate,                                         43049) /*!< 43049 (LocalMktDate FIX.5.0SP2) The date when the quote is to be generated.*/ \
X(UnderlyingReturnRateQuoteExpirationTime,                               43050) /*!< 43050 (LocalMktTime FIX.5.0SP2) The time when the quote ceases to be valid.*/ \
X(UnderlyingReturnRateQuoteBusinessCenter,                               43051) /*!< 43051 (String FIX.5.0SP2) The business center calendar used for adjustments associated with UnderlyingReturnRateQuoteTimeType(43047) or UnderlyingReturnRateQuoteTime(43048) and UnderlyingReturnRateQuoteDate(43049), e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingReturnRateQuoteExchange,                                     43052) /*!< 43052 (Exchange FIX.5.0SP2) Specifies the exchange (e.g. stock or listed futures/options exchange) from which the quote is obtained.*/ \
X(UnderlyingReturnRateQuotePricingModel,                                 43053) /*!< 43053 (String FIX.5.0SP2) Specifies the pricing model used to evaluate the underlying asset price.  \
 \
See http://www.fpml.org/coding-scheme/pricing-model for values.*/ \
X(UnderlyingReturnRateCashFlowType,                                      43054) /*!< 43054 (String FIX.5.0SP2) Specifies the type of cash flows, e.g. coupon payment, premium fee, settlement fee, etc.  \
 \
See http://www.fpml.org/coding-scheme/cashflow-type for values.*/ \
X(UnderlyingReturnRateValuationTimeType,                                 43055) /*!< 43055 (int FIX.5.0SP2) Specifies the timing at which the calculation agent values the underlying.*/ \
X(UnderlyingReturnRateValuationTime,                                     43056) /*!< 43056 (LocalMktTime FIX.5.0SP2) The time at which the calculation agent values the underlying asset.*/ \
X(UnderlyingReturnRateValuationTimeBusinessCenter,                       43057) /*!< 43057 (String FIX.5.0SP2) The business center calendar used for adjustments associated with  UnderlyingReturnRateValuationTimeType(43055) or UnderlyingReturnRateValuationTime(43056) , e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingReturnRateValuationPriceOption,                              43058) /*!< 43058 (int FIX.5.0SP2) Indicates whether an ISDA price option applies, and if applicable which type of price.*/ \
X(UnderlyingReturnRateFinalPriceFallback,                                43059) /*!< 43059 (int FIX.5.0SP2) Specifies the fallback provision for the hedging party in the determination of the final price.*/ \
X(NoUnderlyingReturnRateInformationSources,                              43060) /*!< 43060 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate information source repeating group.*/ \
X(UnderlyingReturnRateInformationSource,                                 43061) /*!< 43061 (int FIX.5.0SP2) Identifies the source of rate information. For FX the references source to be used for the FX spot rate.*/ \
X(UnderlyingReturnRateReferencePage,                                     43062) /*!< 43062 (String FIX.5.0SP2) Identifies the reference "page" from the rate source. \
 \
For FX, the reference page to the spot rate to be used for the reference FX spot rate. \
 \
When UnderlyingReturnRateInformationSource(43061) = 3 (ISDA Settlement Rate Option) this contains the value from the scheme that reflects the terms of the Annex A to the ISDA 1998 FX and Currency Option Definitions.  \
 \
See: http://www.fpml.org/coding-scheme/settlement-rate-option*/ \
X(UnderlyingReturnRateReferencePageHeading,                              43063) /*!< 43063 (String FIX.5.0SP2) Identifies the page heading from the rate source.*/ \
X(NoUnderlyingReturnRatePrices,                                          43064) /*!< 43064 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate price repeating group.*/ \
X(UnderlyingReturnRatePriceBasis,                                        43065) /*!< 43065 (int FIX.5.0SP2) The basis of the return price.*/ \
X(UnderlyingReturnRatePrice,                                             43066) /*!< 43066 (Price FIX.5.0SP2) Specifies the price of the underlying swap asset.*/ \
X(UnderlyingReturnRatePriceCurrency,                                     43067) /*!< 43067 (Currency FIX.5.0SP2) Specifies the currency of the price of the underlying swap asset. Uses ISO 4217 currency codes.*/ \
X(UnderlyingReturnRatePriceType,                                         43068) /*!< 43068 (int FIX.5.0SP2) Specifies whether the UnderlyingReturnRatePrice(43066) is expressed in absolute or relative terms.*/ \
X(NoUnderlyingReturnRateValuationDateBusinessCenters,                    43069) /*!< 43069 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate valuation date business center repeating group.*/ \
X(UnderlyingReturnRateValuationDateBusinessCenter,                       43070) /*!< 43070 (String FIX.5.0SP2) The business center calendar used for date adjustment of the return rate valuation unadjusted or relative dates, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(NoUnderlyingReturnRateValuationDates,                                  43071) /*!< 43071 (NumInGroup FIX.5.0SP2) Number of iterations in the return rate valuation date repeating group.*/ \
X(UnderlyingReturnRateValuationDate,                                     43072) /*!< 43072 (LocalMktDate FIX.5.0SP2) The return rate valuation date.  Type of date is specified in UnderlyingReturnRateValuationDateType(43073).*/ \
X(UnderlyingReturnRateValuationDateType,                                 43073) /*!< 43073 (int FIX.5.0SP2) Specifies the type of return rate valuation date (e.g. adjusted for holidays).  */ \
X(NoUnderlyingSettlMethodElectionDateBusinessCenters,                    43074) /*!< 43074 (NumInGroup FIX.5.0SP2) Number of business centers in the repeating group.*/ \
X(UnderlyingSettlMethodElectionDateBusinessCenter,                       43075) /*!< 43075 (String FIX.5.0SP2) The business center calendar used for date adjustment of the settlement method election unadjusted or relative date, e.g. "GBLO".  \
 \
See http://www.fpml.org/coding-scheme/business-center for standard 4-character code values.*/ \
X(UnderlyingSettlMethodElectionDateUnadjusted,                           43076) /*!< 43076 (LocalMktDate FIX.5.0SP2) The unadjusted settlement method election date.*/ \
X(UnderlyingSettlMethodElectionDateBusinessDayConvention,                43077) /*!< 43077 (int FIX.5.0SP2) The settlement method election date adjustment business day convention. */ \
X(UnderlyingSettlMethodElectionDateRelativeTo,                           43078) /*!< 43078 (int FIX.5.0SP2) Specifies the anchor date when the settlement method election date is relative to an anchor date.  \
 \
See http://www.fixtradingcommunity.org/codelists#Relative_To_Date for values.*/ \
X(UnderlyingSettlMethodElectionDateOffsetPeriod,                         43079) /*!< 43079 (int FIX.5.0SP2) Time unit multiplier for the relative settlement method election date offset.*/ \
X(UnderlyingSettlMethodElectionDateOffsetUnit,                           43080) /*!< 43080 (String FIX.5.0SP2) Time unit associated with the relative settlement method election date offset.*/ \
X(UnderlyingSettlMethodElectionDateOffsetDayType,                        43081) /*!< 43081 (int FIX.5.0SP2) Specifies the day type of the relative settlement method election date offset.*/ \
X(UnderlyingSettlMethodElectionDateAdjusted,                             43082) /*!< 43082 (LocalMktDate FIX.5.0SP2) The adjusted settlement method election date.*/ \
X(UnderlyingStreamVersion,                                               43083) /*!< 43083 (String FIX.5.0SP2) The stream version identifier when there have been modifications to the contract over time. Helps signal when there are embedded changes.*/ \
X(UnderlyingStreamVersionEffectiveDate,                                  43084) /*!< 43084 (LocalMktDate FIX.5.0SP2) The effective date of the UnderlyingStreamVersion(43083).*/ \
X(UnderlyingStreamNotionalDeterminationMethod,                           43085) /*!< 43085 (String FIX.5.0SP2) Specifies the method for determining the floating notional value for equity swaps.  \
 \
See http://www.fpml.org/coding-scheme/determination-method for values.*/ \
X(UnderlyingStreamNotionalAdjustments,                                   43086) /*!< 43086 (int FIX.5.0SP2) For equity swaps this specifies the conditions that govern the adjustment to the number of units of the swap.*/ \
X(PaymentDesc,                                                           43087) /*!< 43087 (String FIX.5.0SP2) A short descriptive name given to the payment, e.g. Premium, Upfront, etc. The description has no intrinsic meaning but should be arbitrarily chosen by the remitter as reference.*/ \
X(LegPaymentStreamRateIndexID,                                           43088) /*!< 43088 (String FIX.5.0SP2) Security identifier of the floating rate index.*/ \
X(LegPaymentStreamRateIndexIDSource,                                     43089) /*!< 43089 (String FIX.5.0SP2) Source for the floating rate index identified in LegPaymentStreamRateIndexID(43088).*/ \
X(PaymentStreamRateIndexID,                                              43090) /*!< 43090 (String FIX.5.0SP2) Security identifier of the floating rate index.*/ \
X(PaymentStreamRateIndexIDSource,                                        43091) /*!< 43091 (String FIX.5.0SP2) Source for the floating rate index identified in PaymentStreamRateIndexID(43090).*/ \
X(UnderlyingPaymentStreamRateIndexID,                                    43092) /*!< 43092 (String FIX.5.0SP2) Security identifier of the floating rate index.*/ \
X(UnderlyingPaymentStreamRateIndexIDSource,                              43093) /*!< 43093 (String FIX.5.0SP2) Source for the floating rate index identified in UnderlyingPaymentStreamRateIndexID(43092).*/ \
X(DeliveryStreamRouteOrCharter,                                          43094) /*!< 43094 (String FIX.5.0SP2) Specific delivery route or time charter average.  Applicable to commodity freight swaps.*/ \
X(LegDeliveryStreamRouteOrCharter,                                       43095) /*!< 43095 (String FIX.5.0SP2) Specific delivery route or time charter average.  Applicable to commodity freight swaps.*/ \
X(UnderlyingDeliveryStreamRouteOrCharter,                                43096) /*!< 43096 (String FIX.5.0SP2) Specific delivery route or time charter average.  Applicable to commodity freight swaps.*/ \
X(BatchID,                                                               50000) /*!< 50000 (String FIX.5.0SP2) Unique Identifier for a batch of messages.*/ \
X(BatchTotalMessages,                                                    50001) /*!< 50001 (int FIX.5.0SP2) Total # of messages contained within batch.*/ \
X(BatchProcessMode,                                                      50002) /*!< 50002 (int FIX.5.0SP2) Indicates the processing mode for a batch of messages.*/





/*!
\brief Namespace for all field tag name enums.
*/
namespace tag {
enum {
#define HFFIX_dummy(name, value) name = value,
HFFIX_FIX_FIELDS(HFFIX_dummy)
#undef HFFIX_dummy
};
} // namespace tag





namespace {
//! Sorted list of all field tags which are of type Length
int length_fields[] = {
tag::SecureDataLen,                 // 90 Length FIX.2.7
tag::SignatureLength,               // 93 Length FIX.2.7
tag::RawDataLength,                 // 95 Length FIX.2.7
tag::XmlDataLen,                    // 212 Length FIX.4.2
tag::EncodedIssuerLen,              // 348 Length FIX.4.2
tag::EncodedSecurityDescLen,        // 350 Length FIX.4.2
tag::EncodedListExecInstLen,        // 352 Length FIX.4.2
tag::EncodedTextLen,                // 354 Length FIX.4.2
tag::EncodedSubjectLen,             // 356 Length FIX.4.2
tag::EncodedHeadlineLen,            // 358 Length FIX.4.2
tag::EncodedAllocTextLen,           // 360 Length FIX.4.2
tag::EncodedUnderlyingIssuerLen,    // 362 Length FIX.4.2
tag::EncodedUnderlyingSecurityDescLen, // 364 Length FIX.4.2
tag::EncodedListStatusTextLen,      // 445 Length FIX.4.2
tag::EncodedLegIssuerLen,           // 618 Length FIX.4.3
tag::EncodedLegSecurityDescLen,     // 621 Length FIX.4.3
tag::SecurityXMLLen,                // 1184 Length FIX.5.0
tag::DerivativeSecurityXMLLen,      // 1282 Length FIX.5.0
tag::EncodedMktSegmDescLen,         // 1397 Length FIX.5.0
tag::EncryptedPasswordLen,          // 1401 Length FIX.5.0
tag::EncryptedNewPasswordLen,       // 1403 Length FIX.5.0
tag::EncodedSecurityListDescLen,    // 1468 Length FIX.5.0SP1
tag::EncodedDocumentationTextLen,   // 1525 Length FIX.5.0SP2
tag::EncodedEventTextLen,           // 1578 Length FIX.5.0SP2
tag::InstrumentScopeEncodedSecurityDescLen, // 1620 Length FIX.5.0SP2
tag::EncodedRejectTextLen,          // 1664 Length FIX.5.0SP2
tag::EncodedOptionExpirationDescLen, // 1678 Length FIX.5.0SP2
tag::EncodedFirmAllocTextLen,       // 1733 Length FIX.5.0SP2
tag::LegSecurityXMLLen,             // 1871 Length FIX.5.0SP2
tag::UnderlyingSecurityXMLLen,      // 1874 Length FIX.5.0SP2
tag::EncodedUnderlyingEventTextLen, // 2072 Length FIX.5.0SP2
tag::EncodedLegEventTextLen,        // 2074 Length FIX.5.0SP2
tag::EncodedAttachmentLen,          // 2111 Length FIX.5.0SP2
tag::EncodedLegOptionExpirationDescLen, // 2179 Length FIX.5.0SP2
tag::EncodedUnderlyingOptionExpirationDescLen, // 2287 Length FIX.5.0SP2
tag::EncodedComplianceTextLen,      // 2351 Length FIX.5.0SP2
tag::EncodedTradeContinuationTextLen, // 2372 Length FIX.5.0SP2
tag::EncodedMDStatisticDescLen,     // 2481 Length FIX.5.0SP2
tag::EncodedLegDocumentationTextLen, // 2494 Length FIX.5.0SP2
tag::EncodedWarningTextLen,         // 2522 Length FIX.5.0SP2
tag::EncodedMiscFeeSubTypeDescLen,  // 2637 Length FIX.5.0SP2
tag::EncodedCommissionDescLen,      // 2651 Length FIX.5.0SP2
tag::EncodedAllocCommissionDescLen, // 2665 Length FIX.5.0SP2
tag::EncodedFinancialInstrumentFullNameLen, // 2715 Length FIX.5.0SP2
tag::EncodedLegFinancialInstrumentFullNameLen, // 2718 Length FIX.5.0SP2
tag::EncodedUnderlyingFinancialInstrumentFullNameLen, // 2721 Length FIX.5.0SP2
tag::EncodedAdditionalTermBondDescLen, // 40004 Length FIX.5.0SP2
tag::EncodedAdditionalTermBondIssuerLen, // 40008 Length FIX.5.0SP2
tag::EncodedLegStreamTextLen,       // 40978 Length FIX.5.0SP2
tag::EncodedLegProvisionTextLen,    // 40980 Length FIX.5.0SP2
tag::EncodedStreamTextLen,          // 40982 Length FIX.5.0SP2
tag::EncodedPaymentTextLen,         // 40984 Length FIX.5.0SP2
tag::EncodedProvisionTextLen,       // 40986 Length FIX.5.0SP2
tag::EncodedUnderlyingStreamTextLen, // 40988 Length FIX.5.0SP2
tag::EncodedDeliveryStreamCycleDescLen, // 41083 Length FIX.5.0SP2
tag::EncodedMarketDisruptionFallbackUnderlierSecurityDescLen, // 41101 Length FIX.5.0SP2
tag::EncodedExerciseDescLen,        // 41107 Length FIX.5.0SP2
tag::EncodedStreamCommodityDescLen, // 41256 Length FIX.5.0SP2
tag::EncodedLegAdditionalTermBondDescLen, // 41320 Length FIX.5.0SP2
tag::EncodedLegAdditionalTermBondIssuerLen, // 41324 Length FIX.5.0SP2
tag::EncodedLegDeliveryStreamCycleDescLen, // 41458 Length FIX.5.0SP2
tag::EncodedLegMarketDisruptionFallbackUnderlierSecurityDescLen, // 41476 Length FIX.5.0SP2
tag::EncodedLegExerciseDescLen,     // 41482 Length FIX.5.0SP2
tag::EncodedLegStreamCommodityDescLen, // 41653 Length FIX.5.0SP2
tag::EncodedUnderlyingAdditionalTermBondDescLen, // 41710 Length FIX.5.0SP2
tag::EncodedUnderlyingDeliveryStreamCycleDescLen, // 41806 Length FIX.5.0SP2
tag::EncodedUnderlyingExerciseDescLen, // 41811 Length FIX.5.0SP2
tag::EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen, // 41873 Length FIX.5.0SP2
tag::EncodedUnderlyingStreamCommodityDescLen, // 41969 Length FIX.5.0SP2
tag::EncodedUnderlyingAdditionalTermBondIssuerLen, // 42025 Length FIX.5.0SP2
tag::EncodedUnderlyingProvisionTextLen, // 42171 Length FIX.5.0SP2
tag::LegPaymentStreamFormulaImageLength, // 42451 Length FIX.5.0SP2
tag::PaymentStreamFormulaImageLength, // 42652 Length FIX.5.0SP2
tag::UnderlyingPaymentStreamFormulaImageLength // 42947 Length FIX.5.0SP2
};
}





/*!
 * \brief Populate an AssociativeContainer with the names of all the FIX fields.
 *
 * \param dictionary A reference to an AssociativeContainer<int, std::string>
 */
template <typename AssociativeContainer> void dictionary_init_field(AssociativeContainer& dictionary) {
#define HFFIX_dummy(name, value) dictionary[tag::name] = #value;
HFFIX_FIX_FIELDS(HFFIX_dummy)
#undef HFFIX_dummy
}





#define HFFIX_FIX_MSGTYPE(X) \
X(Heartbeat,                               "0")  /* (FIX.2.7) */ \
X(TestRequest,                             "1")  /* (FIX.2.7) */ \
X(ResendRequest,                           "2")  /* (FIX.2.7) */ \
X(Reject,                                  "3")  /* (FIX.2.7) */ \
X(SequenceReset,                           "4")  /* (FIX.2.7) */ \
X(Logout,                                  "5")  /* (FIX.2.7) */ \
X(IOI,                                     "6")  /* (FIX.2.7) */ \
X(Advertisement,                           "7")  /* (FIX.2.7) */ \
X(ExecutionReport,                         "8")  /* (FIX.2.7) */ \
X(OrderCancelReject,                       "9")  /* (FIX.2.7) */ \
X(Logon,                                   "A")  /* (FIX.2.7) */ \
X(News,                                    "B")  /* (FIX.2.7) */ \
X(Email,                                   "C")  /* (FIX.2.7) */ \
X(NewOrderSingle,                          "D")  /* (FIX.2.7) */ \
X(NewOrderList,                            "E")  /* (FIX.2.7) */ \
X(OrderCancelRequest,                      "F")  /* (FIX.2.7) */ \
X(OrderCancelReplaceRequest,               "G")  /* (FIX.2.7) */ \
X(OrderStatusRequest,                      "H")  /* (FIX.2.7) */ \
X(AllocationInstruction,                   "J")  /* (FIX.2.7) */ \
X(ListCancelRequest,                       "K")  /* (FIX.2.7) */ \
X(ListExecute,                             "L")  /* (FIX.2.7) */ \
X(ListStatusRequest,                       "M")  /* (FIX.2.7) */ \
X(ListStatus,                              "N")  /* (FIX.2.7) */ \
X(AllocationInstructionAck,                "P")  /* (FIX.2.7) */ \
X(DontKnowTrade,                           "Q")  /* (FIX.4.0) */ \
X(QuoteRequest,                            "R")  /* (FIX.4.0) */ \
X(Quote,                                   "S")  /* (FIX.4.0) */ \
X(SettlementInstructions,                  "T")  /* (FIX.4.1) */ \
X(MarketDataRequest,                       "V")  /* (FIX.4.2) */ \
X(MarketDataSnapshotFullRefresh,           "W")  /* (FIX.4.2) */ \
X(MarketDataIncrementalRefresh,            "X")  /* (FIX.4.2) */ \
X(MarketDataRequestReject,                 "Y")  /* (FIX.4.2) */ \
X(QuoteCancel,                             "Z")  /* (FIX.4.2) */ \
X(QuoteStatusRequest,                      "a")  /* (FIX.4.2) */ \
X(MassQuoteAck,                            "b")  /* (FIX.4.2) */ \
X(SecurityDefinitionRequest,               "c")  /* (FIX.4.2) */ \
X(SecurityDefinition,                      "d")  /* (FIX.4.2) */ \
X(SecurityStatusRequest,                   "e")  /* (FIX.4.2) */ \
X(SecurityStatus,                          "f")  /* (FIX.4.2) */ \
X(TradingSessionStatusRequest,             "g")  /* (FIX.4.2) */ \
X(TradingSessionStatus,                    "h")  /* (FIX.4.2) */ \
X(MassQuote,                               "i")  /* (FIX.4.2) */ \
X(BusinessMessageReject,                   "j")  /* (FIX.4.2) */ \
X(BidRequest,                              "k")  /* (FIX.4.2) */ \
X(BidResponse,                             "l")  /* (FIX.4.2) */ \
X(ListStrikePrice,                         "m")  /* (FIX.4.2) */ \
X(XMLnonFIX,                               "n")  /* (FIX.4.3) */ \
X(RegistrationInstructions,                "o")  /* (FIX.4.3) */ \
X(RegistrationInstructionsResponse,        "p")  /* (FIX.4.3) */ \
X(OrderMassCancelRequest,                  "q")  /* (FIX.4.3) */ \
X(OrderMassCancelReport,                   "r")  /* (FIX.4.3) */ \
X(NewOrderCross,                           "s")  /* (FIX.4.3) */ \
X(CrossOrderCancelReplaceRequest,          "t")  /* (FIX.4.3) */ \
X(CrossOrderCancelRequest,                 "u")  /* (FIX.4.3) */ \
X(SecurityTypeRequest,                     "v")  /* (FIX.4.3) */ \
X(SecurityTypes,                           "w")  /* (FIX.4.3) */ \
X(SecurityListRequest,                     "x")  /* (FIX.4.3) */ \
X(SecurityList,                            "y")  /* (FIX.4.3) */ \
X(DerivativeSecurityListRequest,           "z")  /* (FIX.4.3) */ \
X(DerivativeSecurityList,                  "AA") /* (FIX.4.3) */ \
X(NewOrderMultileg,                        "AB") /* (FIX.4.3) */ \
X(MultilegOrderCancelReplace,              "AC") /* (FIX.4.3) */ \
X(TradeCaptureReportRequest,               "AD") /* (FIX.4.3) */ \
X(TradeCaptureReport,                      "AE") /* (FIX.4.3) */ \
X(OrderMassStatusRequest,                  "AF") /* (FIX.4.3) */ \
X(QuoteRequestReject,                      "AG") /* (FIX.4.3) */ \
X(RFQRequest,                              "AH") /* (FIX.4.3) */ \
X(QuoteStatusReport,                       "AI") /* (FIX.4.3) */ \
X(QuoteResponse,                           "AJ") /* (FIX.4.4) */ \
X(Confirmation,                            "AK") /* (FIX.4.4) */ \
X(PositionMaintenanceRequest,              "AL") /* (FIX.4.4) */ \
X(PositionMaintenanceReport,               "AM") /* (FIX.4.4) */ \
X(RequestForPositions,                     "AN") /* (FIX.4.4) */ \
X(RequestForPositionsAck,                  "AO") /* (FIX.4.4) */ \
X(PositionReport,                          "AP") /* (FIX.4.4) */ \
X(TradeCaptureReportRequestAck,            "AQ") /* (FIX.4.4) */ \
X(TradeCaptureReportAck,                   "AR") /* (FIX.4.4) */ \
X(AllocationReport,                        "AS") /* (FIX.4.4) */ \
X(AllocationReportAck,                     "AT") /* (FIX.4.4) */ \
X(ConfirmationAck,                         "AU") /* (FIX.4.4) */ \
X(SettlementInstructionRequest,            "AV") /* (FIX.4.4) */ \
X(AssignmentReport,                        "AW") /* (FIX.4.4) */ \
X(CollateralRequest,                       "AX") /* (FIX.4.4) */ \
X(CollateralAssignment,                    "AY") /* (FIX.4.4) */ \
X(CollateralResponse,                      "AZ") /* (FIX.4.4) */ \
X(CollateralReport,                        "BA") /* (FIX.4.4) */ \
X(CollateralInquiry,                       "BB") /* (FIX.4.4) */ \
X(NetworkCounterpartySystemStatusRequest,  "BC") /* (FIX.4.4) */ \
X(NetworkCounterpartySystemStatusResponse, "BD") /* (FIX.4.4) */ \
X(UserRequest,                             "BE") /* (FIX.4.4) */ \
X(UserResponse,                            "BF") /* (FIX.4.4) */ \
X(CollateralInquiryAck,                    "BG") /* (FIX.4.4) */ \
X(ConfirmationRequest,                     "BH") /* (FIX.4.4) */ \
X(ContraryIntentionReport,                 "BO") /* (FIX.4.4) */ \
X(SecurityDefinitionUpdateReport,          "BP") /* (FIX.4.4) */ \
X(SecurityListUpdateReport,                "BK") /* (FIX.4.4) */ \
X(AdjustedPositionReport,                  "BL") /* (FIX.4.4) */ \
X(AllocationInstructionAlert,              "BM") /* (FIX.4.4) */ \
X(ExecutionAck,                            "BN") /* (FIX.4.4) */ \
X(TradingSessionList,                      "BJ") /* (FIX.4.4) */ \
X(TradingSessionListRequest,               "BI") /* (FIX.4.4) */ \
X(SettlementObligationReport,              "BQ") /* (FIX.5.0) */ \
X(DerivativeSecurityListUpdateReport,      "BR") /* (FIX.5.0) */ \
X(TradingSessionListUpdateReport,          "BS") /* (FIX.5.0) */ \
X(MarketDefinitionRequest,                 "BT") /* (FIX.5.0) */ \
X(MarketDefinition,                        "BU") /* (FIX.5.0) */ \
X(MarketDefinitionUpdateReport,            "BV") /* (FIX.5.0) */ \
X(UserNotification,                        "CB") /* (FIX.5.0) */ \
X(OrderMassActionReport,                   "BZ") /* (FIX.5.0) */ \
X(OrderMassActionRequest,                  "CA") /* (FIX.5.0) */ \
X(ApplicationMessageRequest,               "BW") /* (FIX.5.0) */ \
X(ApplicationMessageRequestAck,            "BX") /* (FIX.5.0) */ \
X(ApplicationMessageReport,                "BY") /* (FIX.5.0) */ \
X(StreamAssignmentRequest,                 "CC") /* (FIX.5.0SP1) */ \
X(StreamAssignmentReport,                  "CD") /* (FIX.5.0SP1) */ \
X(StreamAssignmentReportACK,               "CE") /* (FIX.5.0SP1) */ \
X(MarginRequirementInquiry,                "CH") /* (FIX.5.0SP2) */ \
X(MarginRequirementInquiryAck,             "CI") /* (FIX.5.0SP2) */ \
X(MarginRequirementReport,                 "CJ") /* (FIX.5.0SP2) */ \
X(PartyDetailsListRequest,                 "CF") /* (FIX.5.0SP2) */ \
X(PartyDetailsListReport,                  "CG") /* (FIX.5.0SP2) */ \
X(PartyDetailsListUpdateReport,            "CK") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitsRequest,                  "CL") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitsReport,                   "CM") /* (FIX.5.0SP2) */ \
X(SecurityMassStatusRequest,               "CN") /* (FIX.5.0SP2) */ \
X(SecurityMassStatus,                      "CO") /* (FIX.5.0SP2) */ \
X(AccountSummaryReport,                    "CQ") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitsUpdateReport,             "CR") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitsDefinitionRequest,        "CS") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitsDefinitionRequestAck,     "CT") /* (FIX.5.0SP2) */ \
X(PartyEntitlementsRequest,                "CU") /* (FIX.5.0SP2) */ \
X(PartyEntitlementsReport,                 "CV") /* (FIX.5.0SP2) */ \
X(QuoteAck,                                "CW") /* (FIX.5.0SP2) */ \
X(PartyDetailsDefinitionRequest,           "CX") /* (FIX.5.0SP2) */ \
X(PartyDetailsDefinitionRequestAck,        "CY") /* (FIX.5.0SP2) */ \
X(PartyEntitlementsUpdateReport,           "CZ") /* (FIX.5.0SP2) */ \
X(PartyEntitlementsDefinitionRequest,      "DA") /* (FIX.5.0SP2) */ \
X(PartyEntitlementsDefinitionRequestAck,   "DB") /* (FIX.5.0SP2) */ \
X(TradeMatchReport,                        "DC") /* (FIX.5.0SP2) */ \
X(TradeMatchReportAck,                     "DD") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitsReportAck,                "DE") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitCheckRequest,              "DF") /* (FIX.5.0SP2) */ \
X(PartyRiskLimitCheckRequestAck,           "DG") /* (FIX.5.0SP2) */ \
X(PartyActionRequest,                      "DH") /* (FIX.5.0SP2) */ \
X(PartyActionReport,                       "DI") /* (FIX.5.0SP2) */ \
X(MassOrder,                               "DJ") /* (FIX.5.0SP2) */ \
X(MassOrderAck,                            "DK") /* (FIX.5.0SP2) */ \
X(PositionTransferInstruction,             "DL") /* (FIX.5.0SP2) */ \
X(PositionTransferInstructionAck,          "DM") /* (FIX.5.0SP2) */ \
X(PositionTransferReport,                  "DN") /* (FIX.5.0SP2) */ \
X(MarketDataStatisticsRequest,             "DO") /* (FIX.5.0SP2) */ \
X(MarketDataStatisticsReport,              "DP") /* (FIX.5.0SP2) */ \
X(CollateralReportAck,                     "DQ") /* (FIX.5.0SP2) */ \
X(MarketDataReport,                        "DR") /* (FIX.5.0SP2) */ \
X(CrossRequest,                            "DS") /* (FIX.5.0SP2) */ \
X(CrossRequestAck,                         "DT") /* (FIX.5.0SP2) */ \
X(AllocationInstructionAlertRequest,       "DU") /* (FIX.5.0SP2) */



/*!
\brief Namespace for all message types.
*/
namespace msg_type {
#define HFFIX_dummy(name, value) static const char* const name = value;
HFFIX_FIX_MSGTYPE(HFFIX_dummy)
#undef HFFIX_dummy
} // namespace tag



/*!
 * \brief Populate an AssociativeContainer with the names of all the FIX message types.
 *
 * \param dictionary A reference to an AssociativeContainer<std::string, std::string>
 */
template <typename AssociativeContainer> void dictionary_init_message(AssociativeContainer& dictionary) {
#define HFFIX_dummy(name, value) dictionary[value] = #name;
HFFIX_FIX_MSGTYPE(HFFIX_dummy)
#undef HFFIX_dummy
}

} // namespace hffix
#endif // HFFIX_FIELDS_HEADER
